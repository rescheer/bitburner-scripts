{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":383,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":24406799.78715491,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.061527276469071,\"hacking_speed\":1.0933730947631433,\"hacking_money\":1.061527276469071,\"hacking_grow\":1.061527276469071,\"hacking\":1.1146036402925248,\"strength\":1.061527276469071,\"defense\":1.061527276469071,\"dexterity\":1.2260640043217774,\"agility\":1.1146036402925248,\"charisma\":1.061527276469071,\"hacking_exp\":1.1676800041159783,\"strength_exp\":1.1676800041159783,\"defense_exp\":1.1676800041159783,\"dexterity_exp\":1.1676800041159783,\"agility_exp\":1.1676800041159783,\"charisma_exp\":1.1676800041159783,\"company_rep\":1.061527276469071,\"faction_rep\":1.061527276469071,\"crime_money\":1.061527276469071,\"crime_success\":1.061527276469071,\"hacknet_node_money\":1.2844480045275761,\"hacknet_node_purchase_cost\":0.8478350203055027,\"hacknet_node_ram_cost\":0.9420389114505586,\"hacknet_node_core_cost\":0.9420389114505586,\"hacknet_node_level_cost\":0.8007330747329748,\"work_money\":1.061527276469071,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":6,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"}],\"queuedAugmentations\":[{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"}],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"The Black Hand\",\"NiteSec\",\"Sector-12\",\"Netburners\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44965.399999906556,\"ram\":64,\"totalMoneyGenerated\":502040888.26155967,\"name\":\"hacknet-node-0\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44964.39999990657,\"ram\":64,\"totalMoneyGenerated\":492027548.4395362,\"name\":\"hacknet-node-1\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44963.399999906585,\"ram\":64,\"totalMoneyGenerated\":491588370.6080523,\"name\":\"hacknet-node-2\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44962.3999999066,\"ram\":64,\"totalMoneyGenerated\":487146846.7416686,\"name\":\"hacknet-node-3\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44961.399999906615,\"ram\":64,\"totalMoneyGenerated\":478293574.5375977,\"name\":\"hacknet-node-4\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44960.39999990663,\"ram\":64,\"totalMoneyGenerated\":476445590.10895467,\"name\":\"hacknet-node-5\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44959.399999906644,\"ram\":64,\"totalMoneyGenerated\":474085363.36820203,\"name\":\"hacknet-node-6\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44958.39999990666,\"ram\":64,\"totalMoneyGenerated\":471229924.9305888,\"name\":\"hacknet-node-7\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44957.39999990667,\"ram\":64,\"totalMoneyGenerated\":464789332.2665154,\"name\":\"hacknet-node-8\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44956.39999990669,\"ram\":64,\"totalMoneyGenerated\":463819201.5020581,\"name\":\"hacknet-node-9\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44955.3999999067,\"ram\":64,\"totalMoneyGenerated\":462967079.7805061,\"name\":\"hacknet-node-10\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44954.39999990672,\"ram\":64,\"totalMoneyGenerated\":462353744.2156337,\"name\":\"hacknet-node-11\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44953.39999990673,\"ram\":64,\"totalMoneyGenerated\":461015676.8319412,\"name\":\"hacknet-node-12\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44928.399999907095,\"ram\":64,\"totalMoneyGenerated\":460527705.0200569,\"name\":\"hacknet-node-13\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":44717.59999991016,\"ram\":64,\"totalMoneyGenerated\":459980653.3764068,\"name\":\"hacknet-node-14\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":43813.799999923314,\"ram\":64,\"totalMoneyGenerated\":458673577.8963767,\"name\":\"hacknet-node-15\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":40590.999999970234,\"ram\":64,\"totalMoneyGenerated\":441709821.6497771,\"name\":\"hacknet-node-16\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":31160.200000078297,\"ram\":64,\"totalMoneyGenerated\":357941622.6600219,\"name\":\"hacknet-node-17\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":31155.20000007828,\"ram\":64,\"totalMoneyGenerated\":357355788.5689087,\"name\":\"hacknet-node-18\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":27766.20000006595,\"ram\":64,\"totalMoneyGenerated\":324148992.7996788,\"name\":\"hacknet-node-19\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":27556.000000065185,\"ram\":64,\"totalMoneyGenerated\":321937106.06755376,\"name\":\"hacknet-node-20\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":22230.00000004581,\"ram\":64,\"totalMoneyGenerated\":261217124.2117803,\"name\":\"hacknet-node-21\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":16784.600000026,\"ram\":64,\"totalMoneyGenerated\":197067580.6683907,\"name\":\"hacknet-node-22\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":6899.799999995916,\"ram\":64,\"totalMoneyGenerated\":80626297.90082155,\"name\":\"hacknet-node-23\"}},{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":16,\"level\":200,\"moneyGainRatePerSecond\":11780.069817123021,\"onlineTimeSeconds\":3940.799999998607,\"ram\":64,\"totalMoneyGenerated\":45768482.308434755,\"name\":\"hacknet-node-24\"}}],\"has4SData\":true,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":true,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":6841195027.166821,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":135853294651.39197,\"hacknet\":9954757895.238972,\"hacknet_expenses\":-14290267009.251862,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-1200000000,\"total\":6840195027.167038,\"work\":0,\"servers\":-122124866259.71729,\"other\":-280200000,\"augmentations\":-1072524249.9999998}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-10377600,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":137854962377.68204,\"hacknet\":13232493629.910448,\"hacknet_expenses\":-17122436755.377941,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-1200000000,\"total\":6865757277.071325,\"work\":343681.6693468301,\"servers\":-123595244276.31232,\"other\":-280400000,\"augmentations\":-2013583779.5321841}},\"playtimeSinceLastAug\":59496000,\"playtimeSinceLastBitnode\":161085400,\"lastAugReset\":1700549801820,\"lastNodeReset\":-1,\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\"],\"scriptProdSinceLastAug\":135839434376.85791,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1700448523331},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1700448763331},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1700453323330},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1700454163326},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1700458483330},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1700468506642},{\"ID\":\"TOR\",\"unlockedOn\":1700473244712},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1700481930808},{\"ID\":\"FROZE\",\"unlockedOn\":1700559259316},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1700573137106},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1700581755373},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1700598615372},{\"ID\":\"NITESEC\",\"unlockedOn\":1700599695385},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1700599995381},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1700599995395},{\"ID\":\"4S\",\"unlockedOn\":1700600115369}],\"terminalCommandHistory\":[\"sa 3\",\"connect phantasy \",\"connect netlink \",\"sa 3\",\"connect zb-institute \",\"sa 3\",\"connect alpha-ent \",\"sa 3\",\"connect zb-institute \",\"sa 1\",\"connect lexo-corp \",\"sa 3\",\"connect aerocorp \",\"sa 3\",\"home\",\"sa 3\",\"connect hong-fang-tea \",\"sa 3\",\"connect max-hardware \",\"sa 3\",\"connect omega-net \",\"connect johnson-ortho \",\"connect I.I.I.I \",\"backdoor\",\"sa 1\",\"go\",\"home\",\"go\",\"ls\",\"sa 3\",\"home\",\"sa 3\",\"backdoor\",\"homr\",\"home\",\"sa 1\",\"buy -1\",\"analyze \",\"buy HTTPWorm.exe \",\"buy SQLInject.exe \",\"home\",\"run nuker.js \",\"connect darkweb \",\"backdoor \",\"buy -l\",\"sa 1\",\"home\",\"sa 3\",\"clear\",\"go\"],\"lastUpdate\":1700609300768,\"lastSave\":1700609283369,\"totalPlaytime\":161085400,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":37106,\"factionWorkType\":\"hacking\",\"factionName\":\"NiteSec\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"64592dbed27ac\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"33.8.5.9\",\"isConnectedTo\":true,\"maxRam\":2048,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"AutoLink.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"scripts/scan.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\nexport async function main(ns) {\\n  await ns.sleep(1000);\\n  ns.tprint('Success! 2');\\n}\",\"filename\":\"scripts/scan.js\",\"server\":\"home\"}}],[\"startup.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport {\\n  NETWORK_MAP,\\n  HOME,\\n  DEPLOYER_START_PORT,\\n  EMPTY_PORT_STRING,\\n} from './config';\\n\\nexport async function main(ns) {\\n  const networkMap = await JSON.parse(ns.read(NETWORK_MAP));\\n\\n  // Functions\\n  const getTarget = () => {\\n    const bestTarget = { host: '', score: 0 };\\n    const indexPortData = ns.peek(DEPLOYER_START_PORT);\\n    const deployerTargetList = [];\\n\\n    if (typeof indexPortData === 'number' && indexPortData > 10) {\\n      for (let p = DEPLOYER_START_PORT + 1; p <= indexPortData; p++) {\\n        deployerTargetList.push(ns.peek(p));\\n      }\\n    }\\n\\n    for (let node in networkMap) {\\n      if (\\n        node !== HOME &&\\n        !deployerTargetList.includes(node) &&\\n        networkMap[node].root\\n      ) {\\n        const currentNodeScore = networkMap[node].score;\\n        if (currentNodeScore > bestTarget.score) {\\n          bestTarget.host = node;\\n          bestTarget.score = currentNodeScore;\\n        }\\n      }\\n    }\\n\\n    return bestTarget.host;\\n  };\\n\\n  const getFreePort = (start) => {\\n    let result = -1;\\n    for (let p = start + 1; p < start * 10; p++) {\\n      if (ns.peek(p) === EMPTY_PORT_STRING) {\\n        result = p;\\n        break;\\n      }\\n    }\\n    return result;\\n  };\\n\\n  // netmap & nuker\\n  ns.run('netmap.js', { preventDuplicates: true });\\n\\n  // hacknet manager\\n  ns.run('hacknet-mgr.js', { preventDuplicates: true });\\n\\n  // server manager\\n  ns.run('server-mgr.js', { preventDuplicates: true });\\n\\n  // Deployers\\n  const deployerTarget = getTarget();\\n  const indexPortData = ns.readPort(DEPLOYER_START_PORT);\\n  if (typeof indexPortData === 'number') {\\n    ns.tryWritePort(DEPLOYER_START_PORT, indexPortData + 1);\\n  } else {\\n    ns.tryWritePort(DEPLOYER_START_PORT, 11);\\n  }\\n  const firstFreePort = getFreePort(DEPLOYER_START_PORT);\\n  if (ns.tryWritePort(firstFreePort, deployerTarget)) {\\n    ns.run('deployer-basic.js', 1, firstFreePort, deployerTarget);\\n  }\\n}\\n\",\"filename\":\"startup.js\",\"server\":\"home\"}}],[\"lib/common.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\n\\n/**\\n * Removes duplicate values from an array and returns a new one\\n * @param {Array} a\\n * @returns Array\\n */\\nexport function uniq(a) {\\n  var seen = { home: true };\\n  return a.filter(function (item) {\\n    return seen.hasOwnProperty(item) ? false : (seen[item] = true);\\n  });\\n}\\n\",\"filename\":\"lib/common.js\",\"server\":\"home\"}}],[\"lib/servers.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport { uniq } from './lib/common.js';\\n\\n/**\\n * Scans network at specified depth and returns an array of servers\\n * @param {*} ns\\n * @param {Number} depth - the depth to scan to\\n * @returns {Array}\\n */\\nexport async function scanAtDepth(ns, depth) {\\n  // Max allowed depth\\n  const depthLimit = 8;\\n\\n  if (!depth || typeof depth !== 'number' || depth < 1) {\\n    depth = 1;\\n  } else if (depth > depthLimit) {\\n    ns.tprint(`Depth too high. Using max depth of ${depthLimit}`);\\n    depth = depthLimit;\\n  }\\n\\n  var scanResults = [];\\n  scanResults.push(ns.scan('home'));\\n\\n  for (var i = 1; i < depth; i++) {\\n    // This flat array stores server connections at the current depth\\n    var depthResult = [];\\n\\n    scanResults[i - 1].forEach((server) => {\\n      // Scan a server at the current depth and ignore links to 'home'\\n      const data = ns.scan(server).filter((el) => {\\n        return el !== 'home';\\n      });\\n\\n      if (data.length > 0) {\\n        depthResult = depthResult.concat(data);\\n      }\\n    });\\n\\n    scanResults.push(depthResult);\\n  }\\n\\n  const hosts = uniq(scanResults.flat());\\n\\n  return hosts;\\n}\\n\\n/**\\n * Attempts to get root access to a given server\\n * @param {*} ns\\n * @param {string} targetHostname - The server name to get access to\\n * @returns true if successful\\n */\\nexport function getRootAccess(ns, targetHostname) {\\n  // Port opening software names\\n  var portOpeners = [\\n    'brutessh.exe',\\n    'ftpcrack.exe',\\n    'relaysmtp.exe',\\n    'httpworm.exe',\\n    'sqlinject.exe',\\n  ];\\n\\n  // Get minimum ports required\\n  var targetMinPorts = ns.getServerNumPortsRequired(targetHostname);\\n\\n  var maxOpenablePorts = 0;\\n  portOpeners.forEach((exe) => {\\n    if (ns.fileExists(exe, 'home')) {\\n      switch (exe) {\\n        case 'brutessh.exe':\\n          ns.brutessh(targetHostname);\\n          maxOpenablePorts = 1;\\n          break;\\n        case 'ftpcrack.exe':\\n          ns.ftpcrack(targetHostname);\\n          maxOpenablePorts = 2;\\n          break;\\n        case 'relaysmtp.exe':\\n          ns.relaysmtp(targetHostname);\\n          maxOpenablePorts = 3;\\n          break;\\n        case 'httpworm.exe':\\n          ns.httpworm(targetHostname);\\n          maxOpenablePorts = 4;\\n          break;\\n        case 'sqlinject.exe':\\n          ns.sqlinject(targetHostname);\\n          maxOpenablePorts = 5;\\n          break;\\n        default:\\n          break;\\n      }\\n    }\\n  });\\n\\n  if (targetMinPorts <= maxOpenablePorts) {\\n    ns.nuke(targetHostname);\\n    return true;\\n  } else {\\n    return false;\\n  }\\n}\\n\\n/**\\n * When given a server, gets root access if needed, then copies our basic\\n * hack script and runs as many thread as possible.\\n * @param {*} ns\\n */\\nexport async function deployScript(ns, targetHostname, hackFile) {\\n  // Check if a hostname was provided\\n  if (!targetHostname) {\\n    ns.tprint('No host specified.');\\n    return;\\n  }\\n\\n  // Check for valid hostname\\n  if (ns.serverExists(targetHostname)) {\\n    // Calculate the max number of threads\\n    var targetMaxRam = ns.getServerMaxRam(targetHostname);\\n    var targetFreeRam = targetMaxRam - ns.getServerUsedRam(targetHostname);\\n    var hackFileRamUsage = ns.getScriptRam(hackFile, 'home');\\n    var maxThreads = Math.floor(targetFreeRam / hackFileRamUsage);\\n\\n    const targetMinPorts = ns.getServerNumPortsRequired(targetHostname);\\n    const minHackingLevel = ns.getServerRequiredHackingLevel(targetHostname);\\n    const currentHackingLevel = ns.getHackingLevel();\\n\\n    // Check minimum hacking level\\n    if (currentHackingLevel < minHackingLevel) {\\n      ns.print(\\n        `No root access to ${targetHostname} (Hacking level: ${currentHackingLevel}/${minHackingLevel})!`\\n      );\\n      return 0;\\n    }\\n\\n    // Assure root access\\n    const rootAccess = ns.hasRootAccess(targetHostname);\\n    if (!rootAccess) {\\n      if (!getRootAccess(ns, targetHostname)) {\\n        ns.print(\\n          `No root access to ${targetHostname} (Need ${targetMinPorts} ports open)!`\\n        );\\n        return 0;\\n      }\\n    }\\n\\n    if (maxThreads > 0) {\\n      if (targetHostname !== 'home') {\\n        // Copy script to target host\\n        await ns.scp(hackFile, targetHostname, 'home');\\n\\n        // Runs the script on the target host\\n        ns.exec(hackFile, targetHostname, maxThreads);\\n      } else {\\n        ns.run(hackFile, maxThreads);\\n      }\\n\\n      ns.print(`Started ${maxThreads} threads on ${targetHostname}!`);\\n      return maxThreads;\\n    } else {\\n      ns.print(`Not enough free RAM on ${targetHostname}.`);\\n      return 0;\\n    }\\n  } else {\\n    ns.print(`Server '${targetHostname}' not found!`);\\n    return 0;\\n  }\\n}\\n\",\"filename\":\"lib/servers.js\",\"server\":\"home\"}}],[\"scripts/hacknet-mgr.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  function myMoney() {\\n    return ns.getServerMoneyAvailable('home');\\n  }\\n\\n  //this script is designed to manage the hacknet nodes\\n  //to prevent excess spending i've limited it from spending\\n  //more than half the players money\\n  var nodes = 0;\\n  var ref = 0;\\n\\n  ns.disableLog('ALL');\\n\\n  while (true) {\\n    //sleep for second to prevent the loop from crashing the game\\n    await ns.sleep(1000);\\n\\n    //buy a node if we have more than twice the money needed\\n    if (ns.hacknet.getPurchaseNodeCost() < myMoney() / 2) {\\n      ref = ns.hacknet.purchaseNode();\\n      ns.print('bought node hn-' + ref);\\n    }\\n    nodes = ns.hacknet.numNodes();\\n\\n    for (var i = 0; i < nodes; i++) {\\n      //check if nodes level is a multiple of 10\\n      var mod = ns.hacknet.getNodeStats(i).level % 10;\\n\\n      //buy level node to the nearest multiple of 10 if we have double the money needed\\n      if (ns.hacknet.getLevelUpgradeCost(i, 10 - mod) < myMoney() / 2) {\\n        ns.hacknet.upgradeLevel(i, 10 - mod);\\n        ns.print('node hn-' + i + ' leveled up');\\n      }\\n\\n      //same for ram\\n      if (ns.hacknet.getRamUpgradeCost(i) < myMoney() / 2) {\\n        ns.hacknet.upgradeRam(i);\\n        ns.print('node hn-' + i + ' ram upgraded');\\n      }\\n\\n      //and cores\\n      if (ns.hacknet.getCoreUpgradeCost(i) < myMoney() / 2) {\\n        ns.hacknet.upgradeCore(i);\\n        ns.print('node hn-' + i + ' core upgraded');\\n      }\\n    }\\n  }\\n}\\n\",\"filename\":\"scripts/hacknet-mgr.js\",\"server\":\"home\"}}],[\"config.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// netmap\\nexport const NETWORK_MAP = 'network_map.txt';\\nexport const NETMAP_INTERVAL = 30 * 1000;\\n\\n// GAME INFO\\nexport const ACCESS_EXES = [\\n  'BruteSSH.exe',\\n  'FTPCrack.exe',\\n  'relaySMTP.exe',\\n  'HTTPWorm.exe',\\n  'SQLInject.exe',\\n];\\nexport const RAM_PRICE_PER_GB = 55000;\\nexport const EMPTY_PORT_STRING = 'NULL PORT DATA';\\nexport const HOME = 'home';\\n\\n// PLAYER INFO\\nexport const SCRIPTS = {\\n  hack: 'hack.js',\\n  grow: 'grow.js',\\n  weaken: 'weaken.js',\\n};\\n\\n// Ports\\nexport const PORTS = {\\n  STATUS: 1,\\n  HACKNET: 2,\\n  PSERVERS: 3,\\n};\\nexport const DEPLOYER_START_PORT = 10;\\n\\n// DEPLOYER SETTINGS\\nexport const HACK_PERCENT = 0.35;\\nexport const SLEEP_PADDING = 100;\\nexport const TICK_INTERVAL = 500;\\nexport const BASE_WIDTH = 50;\\nexport const SEC_TOLERANCE = 0.1;\\nexport const MONEY_TOLERANCE = 0.15;\\n\\n// PROGRESS BARS\\nexport const PBAR_LENGTH = BASE_WIDTH - 9;\\nexport const PBAR_INACTIVE_CHAR = '·';\\nexport const PBAR_ACTIVE_CHAR = '=';\\n\\n// DEBUG\\nexport const DISABLE_LOGGING = 'ALL';\\nexport const LOG_LEVEL = 'NONE';\\n\",\"filename\":\"config.js\",\"server\":\"home\"}}],[\"netmap.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { HOME, NETWORK_MAP, NETMAP_INTERVAL, DISABLE_LOGGING } from 'config.js';\\n\\nexport async function main(ns) {\\n  ns.disableLog(DISABLE_LOGGING);\\n\\n  const argData = ns.flags([\\n    ['daemon', true],\\n    ['nuke', true],\\n  ]);\\n\\n  const scanHost = (host, currentData = {}) => {\\n    const myConnections = ns.scan(host);\\n    const currentMoney = ns.getServerMoneyAvailable(host);\\n    const maxMoney = ns.getServerMaxMoney(host);\\n    const hackTime = ns.getHackTime(host);\\n    const growth = ns.getServerGrowth(host);\\n    const score = ((maxMoney / hackTime) * ns.hackAnalyzeChance(host)) ^ 3;\\n\\n    let newData = {\\n      ...currentData,\\n      [host]: {\\n        connections: myConnections,\\n        root: ns.hasRootAccess(host),\\n        currentMoney,\\n        maxMoney,\\n        hackLevel: ns.getServerRequiredHackingLevel(host),\\n        hackTime,\\n        minSecurity: ns.getServerMinSecurityLevel(host),\\n        growth,\\n        ports: ns.getServerNumPortsRequired(host),\\n        moneyPerSec: currentMoney / hackTime,\\n        score,\\n      },\\n    };\\n\\n    myConnections\\n      .filter((node) => !newData[node]) // prevent infinite looping...\\n      .forEach((node) => {\\n        newData = scanHost(node, newData);\\n      });\\n\\n    return newData;\\n  };\\n\\n  const run = async () => {\\n    const data = scanHost(HOME);\\n    await ns.write(NETWORK_MAP, JSON.stringify(data, null, 2), 'w');\\n    ns.print(`netmap complete! ${Object.keys(data).length} nodes profiled.`);\\n  };\\n\\n  if (argData.daemon) {\\n    while (true) {\\n      await run();\\n      if (argData.nuke) {\\n        ns.run('nuker.js', { preventDuplicates: true });\\n      }\\n      await ns.sleep(NETMAP_INTERVAL || 30000);\\n    }\\n  } else {\\n    await run();\\n    if (argData.nuke) {\\n      ns.run('nuker.js', { preventDuplicates: true });\\n    }\\n  }\\n}\\n\",\"filename\":\"netmap.js\",\"server\":\"home\"}}],[\"nuker.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  HOME,\\n  NETWORK_MAP,\\n  NETMAP_INTERVAL,\\n  ACCESS_EXES,\\n  DISABLE_LOGGING,\\n} from 'config.js';\\n/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  ns.disableLog(DISABLE_LOGGING);\\n\\n  const argData = ns.flags([['daemon', false]]);\\n\\n  const checkForRoots = async () => {\\n    const networkMap = await JSON.parse(ns.read(NETWORK_MAP));\\n    const playerHackLevel = ns.getHackingLevel();\\n    const newRootedNodes = [];\\n    var playerRootLevel = 0;\\n\\n    for (let i in ACCESS_EXES) {\\n      if (ns.fileExists(ACCESS_EXES[i], HOME)) {\\n        playerRootLevel += 1;\\n      }\\n    }\\n\\n    for (let node in networkMap) {\\n      if (node !== 'home' && !networkMap[node].root) {\\n        if (\\n          networkMap[node].ports <= playerRootLevel &&\\n          networkMap[node].hackLevel <= playerHackLevel\\n        ) {\\n          try {\\n            ns.brutessh(node);\\n            ns.ftpcrack(node);\\n            ns.relaysmtp(node);\\n            ns.httpworm(node);\\n            ns.sqlinject(node);\\n          } catch (error) {\\n          }\\n\\n          ns.nuke(node);\\n          newRootedNodes.push(node);\\n        }\\n      }\\n    }\\n\\n    const newNodesNum = newRootedNodes.length;\\n    if (newNodesNum > 0) {\\n      ns.tprint(\\n        `${newNodesNum} new node(s) rooted: ${newRootedNodes.join(', ')}`\\n      );\\n      ns.print(\\n        `${newNodesNum} new node(s) rooted: ${newRootedNodes.join(', ')}`\\n      );\\n    } else {\\n      ns.print(`nuker complete! no new nodes rooted.`);\\n    }\\n  };\\n\\n  if (argData.daemon) {\\n    while (true) {\\n      await checkForRoots();\\n      await ns.sleep(NETMAP_INTERVAL || 30000);\\n    }\\n  } else {\\n    await checkForRoots();\\n  }\\n}\\n\",\"filename\":\"nuker.js\",\"server\":\"home\"}}],[\"deployer-basic.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {\\n  HOME,\\n  NETWORK_MAP,\\n  DISABLE_LOGGING,\\n  SCRIPTS,\\n  HACK_PERCENT,\\n  SLEEP_PADDING,\\n  LOG_LEVEL,\\n  TICK_INTERVAL,\\n  PBAR_LENGTH,\\n  PBAR_ACTIVE_CHAR,\\n  PBAR_INACTIVE_CHAR,\\n  BASE_WIDTH,\\n  SEC_TOLERANCE,\\n  MONEY_TOLERANCE,\\n} from 'config.js';\\n\\nexport async function main(ns) {\\n  ns.disableLog(DISABLE_LOGGING);\\n\\n  var networkMap = {};\\n  var activeTarget = {};\\n  var currentTask = {\\n    active: false,\\n    type: '',\\n    duration: 0,\\n    expires: 0,\\n    tracer: {},\\n  };\\n\\n  ns.atExit(() => {\\n    ns.clearPort(ns.args[0]);\\n    ns.closeTail();\\n  })\\n\\n  const calcHackThreads = (nodeData) => {\\n    const { maxMoney, hackTime, name } = nodeData;\\n    const moneyTarget = maxMoney * HACK_PERCENT;\\n    const threadRam = ns.getScriptRam(SCRIPTS.hack, HOME);\\n\\n    const threads = Math.ceil(ns.hackAnalyzeThreads(name, moneyTarget));\\n    const totalRam = threads * threadRam;\\n    const securityIncrease = ns.hackAnalyzeSecurity(threads, name);\\n\\n    return { threads, threadRam, totalRam, time: hackTime, securityIncrease };\\n  };\\n\\n  const calcGrowThreads = (nodeData) => {\\n    const { currentMoney, maxMoney, growTime, name } = nodeData;\\n    const deltaMult = maxMoney / currentMoney;\\n    const threadRam = ns.getScriptRam(SCRIPTS.grow, HOME);\\n\\n    const threads = Math.ceil(ns.growthAnalyze(name, deltaMult));\\n    const totalRam = threads * threadRam;\\n    const securityIncrease = ns.growthAnalyzeSecurity(threads, name);\\n\\n    return { threads, threadRam, totalRam, time: growTime, securityIncrease };\\n  };\\n\\n  const calcWeakenThreads = (nodeData) => {\\n    const { currentSecurity, minSecurity, weakenTime } = nodeData;\\n    const securityDelta = currentSecurity - minSecurity;\\n    const threadRam = ns.getScriptRam(SCRIPTS.weaken, HOME);\\n    const weakenEffect = ns.weakenAnalyze(1);\\n\\n    const threads = Math.ceil(securityDelta / weakenEffect);\\n    const totalRam = threads * threadRam;\\n\\n    return { threads, threadRam, time: weakenTime, totalRam };\\n  };\\n\\n  const distribute = async (script, threadData) => {\\n    const { threads, threadRam } = threadData;\\n    var threadsRemaining = threads;\\n\\n    // try all servers except for home\\n    for (let node in networkMap) {\\n      if (node !== HOME && networkMap[node].root) {\\n        if (threadsRemaining >= 1) {\\n          const maxRam = ns.getServerMaxRam(node);\\n          const usedRam = ns.getServerUsedRam(node);\\n          const freeRam = maxRam - usedRam;\\n          const possibleThreads = Math.floor(freeRam / threadRam);\\n\\n          if (possibleThreads >= 1) {\\n            const actualThreads = Math.min(possibleThreads, threadsRemaining);\\n\\n            await ns.scp(script, node, HOME);\\n            const pid = ns.exec(script, node, actualThreads, activeTarget.name);\\n            if (LOG_LEVEL > 0) {\\n              ns.print(\\n                `${script}: Sent ${actualThreads}/${threadsRemaining} threads to ${node} (PID ${pid}).`\\n              );\\n            }\\n            threadsRemaining -= actualThreads;\\n            currentTask.tracer = { node, pid, arg: activeTarget.name };\\n          }\\n        } else {\\n          // No threads left to distro, so\\n          break;\\n        }\\n      }\\n    }\\n    // if we have threads left, dump them onto HOME\\n    if (threadsRemaining >= 1) {\\n      const maxRam = ns.getServerMaxRam(HOME);\\n      const usedRam = ns.getServerUsedRam(HOME);\\n      const freeRam = maxRam - usedRam;\\n      const possibleThreads = Math.floor(freeRam / threadRam);\\n\\n      if (possibleThreads >= 1) {\\n        const actualThreads = Math.min(possibleThreads, threadsRemaining);\\n\\n        const pid = ns.exec(script, HOME, actualThreads, activeTarget.name);\\n        if (LOG_LEVEL > 0) {\\n          ns.print(\\n            `OVERFLOW: ${script}: Sent ${actualThreads}/${threadsRemaining} threads to ${HOME}`\\n          );\\n        }\\n        threadsRemaining -= actualThreads;\\n        currentTask.tracer = { node: HOME, pid, arg: activeTarget.name };\\n      }\\n    }\\n\\n    // If we still have threads left, just skip them :(\\n    // TODO: better handling here\\n    if (threadsRemaining >= 1) {\\n      if (LOG_LEVEL > 0) {\\n        ns.print(\\n          `> Distributed ${\\n            threads - threadsRemaining\\n          } ${script} threads (${threadsRemaining}/${threads} remaining).`\\n        );\\n      }\\n    }\\n\\n    if (LOG_LEVEL > 0) {\\n      ns.print(`> Disributed all ${script} threads (${threads} total).`);\\n    }\\n\\n    const result = { threads, threadsRemaining };\\n    return result;\\n  };\\n\\n  const refreshTargetData = () => {\\n    const host = ns.args[1];\\n\\n    const currentMoney = ns.getServerMoneyAvailable(host);\\n    const maxMoney = ns.getServerMaxMoney(host);\\n    const currentSecurity = ns.getServerSecurityLevel(host);\\n    const minSecurity = ns.getServerMinSecurityLevel(host);\\n    const hackTime = ns.getHackTime(host);\\n    const growTime = ns.getGrowTime(host);\\n    const weakenTime = ns.getWeakenTime(host);\\n\\n    activeTarget = {\\n      name: host,\\n      currentMoney,\\n      maxMoney,\\n      currentSecurity,\\n      minSecurity,\\n      hackTime,\\n      growTime,\\n      weakenTime,\\n    };\\n\\n    activeTarget.hackThreadData = calcHackThreads(activeTarget);\\n    activeTarget.growThreadData = calcGrowThreads(activeTarget);\\n    activeTarget.weakenThreadData = calcWeakenThreads(activeTarget);\\n  };\\n\\n  const printStatus = () => {\\n    if (currentTask.type) {\\n      const { currentMoney, maxMoney, minSecurity, currentSecurity, name } =\\n        activeTarget;\\n      const { duration, type, threadInfo } = currentTask;\\n      const { threads, threadsRemaining } = threadInfo;\\n      const timeLeft = Math.max(currentTask.expires - Date.now(), 0);\\n      const progress = Math.abs(100 - Math.round((100 * timeLeft) / duration));\\n      const progressString = `${progress}%`;\\n      const barSubstring = `${PBAR_INACTIVE_CHAR.repeat(PBAR_LENGTH)}`;\\n      const progressBar = `[${barSubstring}] ${progressString.padStart(\\n        4,\\n        ' '\\n      )}`;\\n\\n      // Text\\n      const statusStrings = {\\n        task: { label: 'Task', sub: `${type} ${name}` },\\n        threads: {\\n          label: 'Threads',\\n          sub: `${\\n            threads - threadsRemaining\\n          } deployed | ${threadsRemaining} waiting`,\\n        },\\n        money: {\\n          label: 'Money',\\n          sub: `${ns.formatNumber(currentMoney)} / ${ns.formatNumber(\\n            maxMoney\\n          )}`,\\n        },\\n        security: {\\n          label: 'Security',\\n          sub: `${ns.formatNumber(currentSecurity)} / ${ns.formatNumber(\\n            minSecurity\\n          )}`,\\n        },\\n        baseTime: { label: 'Task Length', sub: `${ns.tFormat(duration || 0)}` },\\n        timeLeft: { label: 'Remaining', sub: `${ns.tFormat(timeLeft || 0)}` },\\n      };\\n\\n      const barFill = () => {\\n        const barProgress = Math.round(progress / (100 / PBAR_LENGTH));\\n        var bar = progressBar;\\n\\n        for (let i = 1; i <= barProgress; i++) {\\n          bar = bar.replace(PBAR_INACTIVE_CHAR, PBAR_ACTIVE_CHAR);\\n        }\\n\\n        return bar;\\n      };\\n\\n      ns.clearLog();\\n      ns.print(`> ${'-'.repeat(BASE_WIDTH - 2)}`);\\n      ns.print(\\n        `> ${statusStrings.task.label}${'.'.repeat(\\n          48 - statusStrings.task.label.length - statusStrings.task.sub.length\\n        )}${statusStrings.task.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.threads.label}${'.'.repeat(\\n          48 -\\n            statusStrings.threads.label.length -\\n            statusStrings.threads.sub.length\\n        )}${statusStrings.threads.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.money.label}${'.'.repeat(\\n          48 - statusStrings.money.label.length - statusStrings.money.sub.length\\n        )}${statusStrings.money.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.security.label}${'.'.repeat(\\n          48 -\\n            statusStrings.security.label.length -\\n            statusStrings.security.sub.length\\n        )}${statusStrings.security.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.baseTime.label}${'.'.repeat(\\n          48 -\\n            statusStrings.baseTime.label.length -\\n            statusStrings.baseTime.sub.length\\n        )}${statusStrings.baseTime.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.timeLeft.label}${'.'.repeat(\\n          48 -\\n            statusStrings.timeLeft.label.length -\\n            statusStrings.timeLeft.sub.length\\n        )}${statusStrings.timeLeft.sub}`\\n      );\\n      ns.print(`> ${barFill()}`);\\n      ns.print(`> ${'-'.repeat(BASE_WIDTH - 2)}`);\\n    }\\n  };\\n\\n  ns.tail();\\n  ns.resizeTail(500, 255);\\n  ns.setTitle(`Deployer-${ns.args[0]} | ${ns.args[1]}`);\\n\\n  while (true) {\\n    if (!currentTask.active) {\\n      networkMap = await JSON.parse(ns.read(NETWORK_MAP));\\n      refreshTargetData();\\n\\n      if (\\n        activeTarget.currentSecurity >\\n        activeTarget.minSecurity * (1 + SEC_TOLERANCE)\\n      ) {\\n        // Weaken\\n        const sleepTime = activeTarget.weakenTime + SLEEP_PADDING;\\n        const result = await distribute(\\n          SCRIPTS.weaken,\\n          activeTarget.weakenThreadData\\n        );\\n\\n        currentTask.type = 'Weaken';\\n        currentTask.threadInfo = result;\\n        currentTask.duration = sleepTime;\\n        currentTask.expires = Date.now() + sleepTime;\\n        currentTask.active = true;\\n      } else if (\\n        activeTarget.currentMoney <\\n        activeTarget.maxMoney * (1 - MONEY_TOLERANCE)\\n      ) {\\n        // Grow\\n        const sleepTime = activeTarget.growTime + SLEEP_PADDING;\\n        const result = await distribute(\\n          SCRIPTS.grow,\\n          activeTarget.growThreadData\\n        );\\n\\n        currentTask.type = 'Grow';\\n        currentTask.threadInfo = result;\\n        currentTask.duration = sleepTime;\\n        currentTask.expires = Date.now() + sleepTime;\\n        currentTask.active = true;\\n      } else {\\n        // Hack\\n        const sleepTime = activeTarget.hackTime + SLEEP_PADDING;\\n        const result = await distribute(\\n          SCRIPTS.hack,\\n          activeTarget.hackThreadData\\n        );\\n\\n        currentTask.type = 'Hack';\\n        currentTask.threadInfo = result;\\n        currentTask.duration = sleepTime;\\n        currentTask.expires = Date.now() + sleepTime;\\n        currentTask.active = true;\\n      }\\n    } else {\\n      currentTask.active = ns.isRunning(\\n        currentTask.tracer.pid,\\n        currentTask.tracer.node,\\n        currentTask.tracer.arg\\n      );\\n    }\\n\\n    printStatus();\\n    await ns.sleep(TICK_INTERVAL);\\n  }\\n}\\n\",\"filename\":\"deployer-basic.js\",\"server\":\"home\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"home\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"home\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"home\"}}],[\"hacknet-mgr.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nexport async function main(ns) {\\n  function myMoney() {\\n    return ns.getServerMoneyAvailable('home');\\n  }\\n\\n  // Don't spend more than this percent of total money\\n  const MONEY_USED = 0.3;\\n  var nodes = 0;\\n  var ref = 0;\\n\\n  ns.disableLog('ALL');\\n\\n  while (true) {\\n    await ns.sleep(5000);\\n\\n    //buy a node if we have more than twice the money needed\\n    if (ns.hacknet.getPurchaseNodeCost() < myMoney() * MONEY_USED) {\\n      ref = ns.hacknet.purchaseNode();\\n      ns.print('bought node hn-' + ref);\\n    }\\n    nodes = ns.hacknet.numNodes();\\n\\n    for (var i = 0; i < nodes; i++) {\\n      //check if nodes level is a multiple of 10\\n      var mod = ns.hacknet.getNodeStats(i).level % 10;\\n\\n      //buy level node to the nearest multiple of 10 if we have double the money needed\\n      if (\\n        ns.hacknet.getLevelUpgradeCost(i, 10 - mod) <\\n        myMoney() * MONEY_USED\\n      ) {\\n        ns.hacknet.upgradeLevel(i, 10 - mod);\\n        ns.print('node hn-' + i + ' leveled up');\\n      }\\n\\n      //same for ram\\n      if (ns.hacknet.getRamUpgradeCost(i) < myMoney() * MONEY_USED) {\\n        ns.hacknet.upgradeRam(i);\\n        ns.print('node hn-' + i + ' ram upgraded');\\n      }\\n\\n      //and cores\\n      if (ns.hacknet.getCoreUpgradeCost(i) < myMoney() * MONEY_USED) {\\n        ns.hacknet.upgradeCore(i);\\n        ns.print('node hn-' + i + ' core upgraded');\\n      }\\n    }\\n  }\\n}\\n\",\"filename\":\"hacknet-mgr.js\",\"server\":\"home\"}}],[\"server-mgr.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { RAM_PRICE_PER_GB } from './config';\\n\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  function myMoney() {\\n    return ns.getServerMoneyAvailable('home');\\n  }\\n\\n  const MONEY_USED = 0.5;\\n\\n  const servers = { total: { ram: 0, cost: 0, nodes: 0 } };\\n  const buyInfo = {\\n    maxServers: ns.getPurchasedServerLimit(),\\n    maxRam: ns.getPurchasedServerMaxRam(),\\n  };\\n\\n  const refreshPurchasedServers = () => {\\n    servers.total.ram = 0;\\n    ns.getPurchasedServers().forEach((server) => {\\n      const ram = ns.getServerMaxRam(server);\\n      servers[server] = { ram };\\n      servers.total.ram += ram;\\n    });\\n    servers.total.cost = servers.total.ram * RAM_PRICE_PER_GB;\\n    servers.total.nodes = Object.keys(servers).length - 1;\\n  };\\n\\n  const refreshBuyInfo = () => {\\n    buyInfo.maxServers = ns.getPurchasedServerLimit() || 0;\\n    buyInfo.maxRam = ns.getPurchasedServerMaxRam() || 2;\\n  };\\n\\n  const isAbleToPurchase = () => {\\n    const numPurchasedServers = Object.keys(servers).length;\\n    return numPurchasedServers < buyInfo.maxServers;\\n  };\\n\\n  const checkPurchases = (maxRam, maxMoney) => {\\n    const best = { ram: -1, cost: -1, ratio: -1 };\\n    for (let ram = maxRam; ram >= 2; ram /= 2) {\\n      const cost = ns.getPurchasedServerCost(ram);\\n\\n      if (cost < maxMoney) {\\n        best.ram = ram;\\n        best.cost = cost;\\n        best.ratio = ram / cost;\\n        break;\\n      }\\n    }\\n\\n    return best;\\n  };\\n\\n  const checkUpgrades = (maxRam, maxMoney) => {\\n    const best = { name: '', ram: -1, cost: -1, ratio: -1 };\\n\\n    for (const server in servers) {\\n      const currentRam = servers[server].ram;\\n      for (let ram = currentRam * 2; ram <= maxRam; ram *= 2) {\\n        const cost = ns.getPurchasedServerUpgradeCost(server, ram);\\n        if (cost < maxMoney) {\\n          best.name = server;\\n          best.ram = ram;\\n          best.cost = cost;\\n          best.ratio = (ram - currentRam) / cost;\\n        } else if (cost > maxMoney) {\\n          break;\\n        }\\n      }\\n    }\\n\\n    return best;\\n  };\\n\\n  refreshPurchasedServers();\\n  ns.clearLog();\\n  ns.print(\\n    `> Total Server Ram: ${ns.formatRam(servers.total.ram, 0)} across ${\\n      servers.total.nodes\\n    } servers`\\n  );\\n  ns.print(`> Total spent: ${ns.formatNumber(servers.total.cost)}`);\\n  ns.tail();\\n\\n  while (true) {\\n    await ns.sleep(5000);\\n    refreshBuyInfo();\\n    refreshPurchasedServers();\\n\\n    const bestAffordable = {};\\n\\n    const upgradeResult = checkUpgrades(buyInfo.maxRam, myMoney() * MONEY_USED);\\n    if (upgradeResult.cost > 0) {\\n      bestAffordable.upgrade = upgradeResult;\\n    }\\n\\n    if (isAbleToPurchase()) {\\n      const purchaseResult = checkPurchases(\\n        buyInfo.maxRam,\\n        myMoney() * MONEY_USED\\n      );\\n\\n      if (purchaseResult.cost > 0) {\\n        bestAffordable.purchased = purchaseResult;\\n      }\\n    }\\n\\n    // If both are affordable, upgrade first. Otherwise,\\n    // purchase a new server.\\n    if (bestAffordable.purchased && bestAffordable.upgrade) {\\n      const { upgrade } = bestAffordable;\\n\\n      ns.upgradePurchasedServer(upgrade.name, upgrade.ram);\\n    } else if (bestAffordable.purchased || bestAffordable.upgrade) {\\n      const option = bestAffordable.purchased\\n        ? bestAffordable.purchased\\n        : bestAffordable.upgrade;\\n\\n      if (option.name) {\\n        ns.upgradePurchasedServer(option.name, option.ram);\\n      } else {\\n        ns.purchaseServer(`pserv-0`, option.ram);\\n      }\\n    }\\n\\n    ns.clearLog();\\n    ns.print(\\n      `> Total Server Ram: ${ns.formatRam(servers.total.ram, 0)} across ${\\n        servers.total.nodes\\n      } servers`\\n    );\\n    ns.print(`> Total spent: ${ns.formatNumber(servers.total.cost)}`);\\n  }\\n}\\n\",\"filename\":\"server-mgr.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\",\"pserv-22\",\"pserv-23\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"network_map.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"network_map.txt\",\"text\":\"{\\n  \\\"home\\\": {\\n    \\\"connections\\\": [\\n      \\\"n00dles\\\",\\n      \\\"foodnstuff\\\",\\n      \\\"sigma-cosmetics\\\",\\n      \\\"joesguns\\\",\\n      \\\"hong-fang-tea\\\",\\n      \\\"harakiri-sushi\\\",\\n      \\\"iron-gym\\\",\\n      \\\"pserv-0\\\",\\n      \\\"pserv-1\\\",\\n      \\\"pserv-2\\\",\\n      \\\"pserv-3\\\",\\n      \\\"pserv-4\\\",\\n      \\\"pserv-5\\\",\\n      \\\"pserv-6\\\",\\n      \\\"pserv-7\\\",\\n      \\\"pserv-8\\\",\\n      \\\"pserv-9\\\",\\n      \\\"pserv-10\\\",\\n      \\\"pserv-11\\\",\\n      \\\"pserv-12\\\",\\n      \\\"pserv-13\\\",\\n      \\\"pserv-14\\\",\\n      \\\"pserv-15\\\",\\n      \\\"pserv-16\\\",\\n      \\\"pserv-17\\\",\\n      \\\"pserv-18\\\",\\n      \\\"pserv-19\\\",\\n      \\\"pserv-20\\\",\\n      \\\"pserv-21\\\",\\n      \\\"pserv-22\\\",\\n      \\\"pserv-23\\\",\\n      \\\"darkweb\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 6838839013.203121,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 1288642.911683212,\\n    \\\"score\\\": 3\\n  },\\n  \\\"n00dles\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 70000,\\n    \\\"maxMoney\\\": 1750000,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 3000,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 13.190104876525723,\\n    \\\"score\\\": 330\\n  },\\n  \\\"foodnstuff\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 50000000,\\n    \\\"maxMoney\\\": 50000000,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5572.939895448673,\\n    \\\"minSecurity\\\": 3,\\n    \\\"growth\\\": 5,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 8971.925220444988,\\n    \\\"score\\\": 8459\\n  },\\n  \\\"sigma-cosmetics\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 39354508.88873398,\\n    \\\"maxMoney\\\": 57500000,\\n    \\\"hackLevel\\\": 5,\\n    \\\"hackTime\\\": 5698.565501983624,\\n    \\\"minSecurity\\\": 3,\\n    \\\"growth\\\": 10,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 6906.037822156295,\\n    \\\"score\\\": 10089\\n  },\\n  \\\"joesguns\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"nectar-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 62500000,\\n    \\\"maxMoney\\\": 62500000,\\n    \\\"hackLevel\\\": 10,\\n    \\\"hackTime\\\": 7178.455213266493,\\n    \\\"minSecurity\\\": 5,\\n    \\\"growth\\\": 20,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 8706.60861469106,\\n    \\\"score\\\": 8450\\n  },\\n  \\\"nectar-net\\\": {\\n    \\\"connections\\\": [\\n      \\\"joesguns\\\",\\n      \\\"silver-helix\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 68750000,\\n    \\\"maxMoney\\\": 68750000,\\n    \\\"hackLevel\\\": 20,\\n    \\\"hackTime\\\": 9940.211926918382,\\n    \\\"minSecurity\\\": 7,\\n    \\\"growth\\\": 25,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 6916.351533091865,\\n    \\\"score\\\": 6493\\n  },\\n  \\\"silver-helix\\\": {\\n    \\\"connections\\\": [\\n      \\\"nectar-net\\\",\\n      \\\"avmnite-02h\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 746139358.513245,\\n    \\\"maxMoney\\\": 1125000000,\\n    \\\"hackLevel\\\": 150,\\n    \\\"hackTime\\\": 46033.67906550733,\\n    \\\"minSecurity\\\": 10,\\n    \\\"growth\\\": 30,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 16208.55368634486,\\n    \\\"score\\\": 18067\\n  },\\n  \\\"avmnite-02h\\\": {\\n    \\\"connections\\\": [\\n      \\\"silver-helix\\\",\\n      \\\"syscore\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 208,\\n    \\\"hackTime\\\": 10772.435364913672,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"syscore\\\": {\\n    \\\"connections\\\": [\\n      \\\"avmnite-02h\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 538989418,\\n    \\\"maxMoney\\\": 13474735450,\\n    \\\"hackLevel\\\": 639,\\n    \\\"hackTime\\\": 1101930.367535961,\\n    \\\"minSecurity\\\": 22,\\n    \\\"growth\\\": 62,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 489.13201222073616,\\n    \\\"score\\\": 3\\n  },\\n  \\\"hong-fang-tea\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"max-hardware\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 48493605.009818934,\\n    \\\"maxMoney\\\": 75000000,\\n    \\\"hackLevel\\\": 30,\\n    \\\"hackTime\\\": 9385.220281402488,\\n    \\\"minSecurity\\\": 5,\\n    \\\"growth\\\": 20,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 5167.018307062288,\\n    \\\"score\\\": 7680\\n  },\\n  \\\"max-hardware\\\": {\\n    \\\"connections\\\": [\\n      \\\"hong-fang-tea\\\",\\n      \\\"omega-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 170361174.5691771,\\n    \\\"maxMoney\\\": 250000000,\\n    \\\"hackLevel\\\": 80,\\n    \\\"hackTime\\\": 16281.16309661855,\\n    \\\"minSecurity\\\": 5,\\n    \\\"growth\\\": 30,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 10463.69805143464,\\n    \\\"score\\\": 13605\\n  },\\n  \\\"omega-net\\\": {\\n    \\\"connections\\\": [\\n      \\\"max-hardware\\\",\\n      \\\"johnson-ortho\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1521886650,\\n    \\\"maxMoney\\\": 1521886650,\\n    \\\"hackLevel\\\": 187,\\n    \\\"hackTime\\\": 58209.17133064529,\\n    \\\"minSecurity\\\": 9,\\n    \\\"growth\\\": 37,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 26145.135125790304,\\n    \\\"score\\\": 17866\\n  },\\n  \\\"johnson-ortho\\\": {\\n    \\\"connections\\\": [\\n      \\\"omega-net\\\",\\n      \\\"I.I.I.I\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1168657101.7701912,\\n    \\\"maxMoney\\\": 1814494275,\\n    \\\"hackLevel\\\": 290,\\n    \\\"hackTime\\\": 156932.73278395098,\\n    \\\"minSecurity\\\": 19,\\n    \\\"growth\\\": 37,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 7446.866444230468,\\n    \\\"score\\\": 5587\\n  },\\n  \\\"I.I.I.I\\\": {\\n    \\\"connections\\\": [\\n      \\\"johnson-ortho\\\",\\n      \\\"rho-construction\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 345,\\n    \\\"hackTime\\\": 14389.650181073413,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"rho-construction\\\": {\\n    \\\"connections\\\": [\\n      \\\"I.I.I.I\\\",\\n      \\\"snap-fitness\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 689459611,\\n    \\\"maxMoney\\\": 17236490275,\\n    \\\"hackLevel\\\": 486,\\n    \\\"hackTime\\\": 646874.1824519241,\\n    \\\"minSecurity\\\": 17,\\n    \\\"growth\\\": 42,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 1065.8326297498213,\\n    \\\"score\\\": 3\\n  },\\n  \\\"snap-fitness\\\": {\\n    \\\"connections\\\": [\\n      \\\"rho-construction\\\",\\n      \\\"deltaone\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 450000000,\\n    \\\"maxMoney\\\": 11250000000,\\n    \\\"hackLevel\\\": 772,\\n    \\\"hackTime\\\": 1146736.3058062026,\\n    \\\"minSecurity\\\": 19,\\n    \\\"growth\\\": 60,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 392.4180282088754,\\n    \\\"score\\\": 3\\n  },\\n  \\\"deltaone\\\": {\\n    \\\"connections\\\": [\\n      \\\"snap-fitness\\\",\\n      \\\"univ-energy\\\",\\n      \\\"solaris\\\",\\n      \\\"zeus-med\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1432611465,\\n    \\\"maxMoney\\\": 35815286625,\\n    \\\"hackLevel\\\": 855,\\n    \\\"hackTime\\\": 1833822.2996815664,\\n    \\\"minSecurity\\\": 27,\\n    \\\"growth\\\": 58,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 781.2160781602261,\\n    \\\"score\\\": 3\\n  },\\n  \\\"univ-energy\\\": {\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1166248175,\\n    \\\"maxMoney\\\": 29156204375,\\n    \\\"hackLevel\\\": 827,\\n    \\\"hackTime\\\": 1926787.3607596576,\\n    \\\"minSecurity\\\": 29,\\n    \\\"growth\\\": 84,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 605.2812047408249,\\n    \\\"score\\\": 3\\n  },\\n  \\\"solaris\\\": {\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\",\\n      \\\"taiyang-digital\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 712865001,\\n    \\\"maxMoney\\\": 17821625025,\\n    \\\"hackLevel\\\": 790,\\n    \\\"hackTime\\\": 1590518.3979960778,\\n    \\\"minSecurity\\\": 25,\\n    \\\"growth\\\": 75,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 448.1966394718547,\\n    \\\"score\\\": 3\\n  },\\n  \\\"taiyang-digital\\\": {\\n    \\\"connections\\\": [\\n      \\\"solaris\\\",\\n      \\\"titan-labs\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 893428265,\\n    \\\"maxMoney\\\": 22335706625,\\n    \\\"hackLevel\\\": 893,\\n    \\\"hackTime\\\": 1820779.2039211076,\\n    \\\"minSecurity\\\": 26,\\n    \\\"growth\\\": 78,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 490.6845723391244,\\n    \\\"score\\\": 3\\n  },\\n  \\\"titan-labs\\\": {\\n    \\\"connections\\\": [\\n      \\\"taiyang-digital\\\",\\n      \\\"helios\\\",\\n      \\\"vitalife\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 867801057,\\n    \\\"maxMoney\\\": 21695026425,\\n    \\\"hackLevel\\\": 821,\\n    \\\"hackTime\\\": 1674400.8174919863,\\n    \\\"minSecurity\\\": 26,\\n    \\\"growth\\\": 67,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 518.2755812911286,\\n    \\\"score\\\": 3\\n  },\\n  \\\"helios\\\": {\\n    \\\"connections\\\": [\\n      \\\"titan-labs\\\",\\n      \\\"omnitek\\\",\\n      \\\"kuai-gong\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 658691587,\\n    \\\"maxMoney\\\": 16467289675,\\n    \\\"hackLevel\\\": 869,\\n    \\\"hackTime\\\": 1978484.489300101,\\n    \\\"minSecurity\\\": 29,\\n    \\\"growth\\\": 72,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 332.92734442058503,\\n    \\\"score\\\": 3\\n  },\\n  \\\"omnitek\\\": {\\n    \\\"connections\\\": [\\n      \\\"helios\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 18936307765,\\n    \\\"maxMoney\\\": 473407694125,\\n    \\\"hackLevel\\\": 1097,\\n    \\\"hackTime\\\": 2843764.5181700788,\\n    \\\"minSecurity\\\": 33,\\n    \\\"growth\\\": 97,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 6658.887416312951,\\n    \\\"score\\\": 3\\n  },\\n  \\\"kuai-gong\\\": {\\n    \\\"connections\\\": [\\n      \\\"helios\\\",\\n      \\\"nwo\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 24740110890,\\n    \\\"maxMoney\\\": 618502772250,\\n    \\\"hackLevel\\\": 1012,\\n    \\\"hackTime\\\": 2543667.7035680963,\\n    \\\"minSecurity\\\": 32,\\n    \\\"growth\\\": 92,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 9726.156783488714,\\n    \\\"score\\\": 3\\n  },\\n  \\\"nwo\\\": {\\n    \\\"connections\\\": [\\n      \\\"kuai-gong\\\",\\n      \\\"fulcrumassets\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 24617822680,\\n    \\\"maxMoney\\\": 615445567000,\\n    \\\"hackLevel\\\": 1278,\\n    \\\"hackTime\\\": 3345844.4958641925,\\n    \\\"minSecurity\\\": 33,\\n    \\\"growth\\\": 83,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 7357.730674701158,\\n    \\\"score\\\": 3\\n  },\\n  \\\"fulcrumassets\\\": {\\n    \\\"connections\\\": [\\n      \\\"nwo\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1000000,\\n    \\\"maxMoney\\\": 25000000,\\n    \\\"hackLevel\\\": 1294,\\n    \\\"hackTime\\\": 3387666.8919867985,\\n    \\\"minSecurity\\\": 33,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0.2951884089800577,\\n    \\\"score\\\": 3\\n  },\\n  \\\"vitalife\\\": {\\n    \\\"connections\\\": [\\n      \\\"titan-labs\\\",\\n      \\\".\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 711884756,\\n    \\\"maxMoney\\\": 17797118900,\\n    \\\"hackLevel\\\": 892,\\n    \\\"hackTime\\\": 2077812.6800912905,\\n    \\\"minSecurity\\\": 29,\\n    \\\"growth\\\": 62,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 342.612576591227,\\n    \\\"score\\\": 3\\n  },\\n  \\\".\\\": {\\n    \\\"connections\\\": [\\n      \\\"vitalife\\\",\\n      \\\"b-and-a\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 548,\\n    \\\"hackTime\\\": 19749.464835675066,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"b-and-a\\\": {\\n    \\\"connections\\\": [\\n      \\\".\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 17816694823,\\n    \\\"maxMoney\\\": 445417370575,\\n    \\\"hackLevel\\\": 935,\\n    \\\"hackTime\\\": 2128348.075406106,\\n    \\\"minSecurity\\\": 29,\\n    \\\"growth\\\": 70,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 8371.137704813827,\\n    \\\"score\\\": 3\\n  },\\n  \\\"zeus-med\\\": {\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1421757178,\\n    \\\"maxMoney\\\": 35543929450,\\n    \\\"hackLevel\\\": 814,\\n    \\\"hackTime\\\": 1939566.426241565,\\n    \\\"minSecurity\\\": 30,\\n    \\\"growth\\\": 73,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 733.0283504417218,\\n    \\\"score\\\": 3\\n  },\\n  \\\"harakiri-sushi\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 100000000,\\n    \\\"maxMoney\\\": 100000000,\\n    \\\"hackLevel\\\": 40,\\n    \\\"hackTime\\\": 11906.709441572231,\\n    \\\"minSecurity\\\": 5,\\n    \\\"growth\\\": 40,\\n    \\\"ports\\\": 0,\\n    \\\"moneyPerSec\\\": 8398.62604279654,\\n    \\\"score\\\": 7858\\n  },\\n  \\\"iron-gym\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"zer0\\\",\\n      \\\"CSEC\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 494400923.1100806,\\n    \\\"maxMoney\\\": 500000000,\\n    \\\"hackLevel\\\": 100,\\n    \\\"hackTime\\\": 39673.18965519432,\\n    \\\"minSecurity\\\": 10,\\n    \\\"growth\\\": 20,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 12461.839529591485,\\n    \\\"score\\\": 9896\\n  },\\n  \\\"zer0\\\": {\\n    \\\"connections\\\": [\\n      \\\"iron-gym\\\",\\n      \\\"neo-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 187500000,\\n    \\\"maxMoney\\\": 187500000,\\n    \\\"hackLevel\\\": 75,\\n    \\\"hackTime\\\": 21122.422284144457,\\n    \\\"minSecurity\\\": 8,\\n    \\\"growth\\\": 40,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 8876.822813108269,\\n    \\\"score\\\": 7696\\n  },\\n  \\\"neo-net\\\": {\\n    \\\"connections\\\": [\\n      \\\"zer0\\\",\\n      \\\"computek\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 125000000,\\n    \\\"maxMoney\\\": 125000000,\\n    \\\"hackLevel\\\": 50,\\n    \\\"hackTime\\\": 18569.249490548496,\\n    \\\"minSecurity\\\": 8,\\n    \\\"growth\\\": 25,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 6731.559079090588,\\n    \\\"score\\\": 5944\\n  },\\n  \\\"computek\\\": {\\n    \\\"connections\\\": [\\n      \\\"neo-net\\\",\\n      \\\"summit-uni\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 5899885050,\\n    \\\"maxMoney\\\": 5899885050,\\n    \\\"hackLevel\\\": 358,\\n    \\\"hackTime\\\": 217767.9492650725,\\n    \\\"minSecurity\\\": 20,\\n    \\\"growth\\\": 46,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 27092.531614092186,\\n    \\\"score\\\": 10385\\n  },\\n  \\\"summit-uni\\\": {\\n    \\\"connections\\\": [\\n      \\\"computek\\\",\\n      \\\"aevum-police\\\",\\n      \\\"millenium-fitness\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 274776218,\\n    \\\"maxMoney\\\": 6869405450,\\n    \\\"hackLevel\\\": 460,\\n    \\\"hackTime\\\": 721858.7815606369,\\n    \\\"minSecurity\\\": 20,\\n    \\\"growth\\\": 40,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 380.6509320367927,\\n    \\\"score\\\": 3\\n  },\\n  \\\"aevum-police\\\": {\\n    \\\"connections\\\": [\\n      \\\"summit-uni\\\",\\n      \\\"global-pharm\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 350311962,\\n    \\\"maxMoney\\\": 8757799050,\\n    \\\"hackLevel\\\": 440,\\n    \\\"hackTime\\\": 864963.1925357156,\\n    \\\"minSecurity\\\": 25,\\n    \\\"growth\\\": 38,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 405.00216081221873,\\n    \\\"score\\\": 3\\n  },\\n  \\\"global-pharm\\\": {\\n    \\\"connections\\\": [\\n      \\\"aevum-police\\\",\\n      \\\"omnia\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1519852949,\\n    \\\"maxMoney\\\": 37996323725,\\n    \\\"hackLevel\\\": 803,\\n    \\\"hackTime\\\": 1743814.3777232561,\\n    \\\"minSecurity\\\": 27,\\n    \\\"growth\\\": 81,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 871.5680799606305,\\n    \\\"score\\\": 3\\n  },\\n  \\\"omnia\\\": {\\n    \\\"connections\\\": [\\n      \\\"global-pharm\\\",\\n      \\\"defcomm\\\",\\n      \\\"icarus\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 913008979,\\n    \\\"maxMoney\\\": 22825224475,\\n    \\\"hackLevel\\\": 948,\\n    \\\"hackTime\\\": 2132836.5901414864,\\n    \\\"minSecurity\\\": 28,\\n    \\\"growth\\\": 61,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 428.0726349220376,\\n    \\\"score\\\": 3\\n  },\\n  \\\"defcomm\\\": {\\n    \\\"connections\\\": [\\n      \\\"omnia\\\",\\n      \\\"infocomm\\\",\\n      \\\"nova-med\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 863985734,\\n    \\\"maxMoney\\\": 21599643350,\\n    \\\"hackLevel\\\": 987,\\n    \\\"hackTime\\\": 2507020.300905106,\\n    \\\"minSecurity\\\": 32,\\n    \\\"growth\\\": 65,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 344.62654079349755,\\n    \\\"score\\\": 3\\n  },\\n  \\\"infocomm\\\": {\\n    \\\"connections\\\": [\\n      \\\"defcomm\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 730665645,\\n    \\\"maxMoney\\\": 18266641125,\\n    \\\"hackLevel\\\": 901,\\n    \\\"hackTime\\\": 1860832.597177416,\\n    \\\"minSecurity\\\": 26,\\n    \\\"growth\\\": 46,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 392.655226541228,\\n    \\\"score\\\": 3\\n  },\\n  \\\"nova-med\\\": {\\n    \\\"connections\\\": [\\n      \\\"defcomm\\\",\\n      \\\"microdyne\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1195817920,\\n    \\\"maxMoney\\\": 29895448000,\\n    \\\"hackLevel\\\": 775,\\n    \\\"hackTime\\\": 1376257.8269512875,\\n    \\\"minSecurity\\\": 22,\\n    \\\"growth\\\": 74,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 868.8909131576012,\\n    \\\"score\\\": 3\\n  },\\n  \\\"microdyne\\\": {\\n    \\\"connections\\\": [\\n      \\\"nova-med\\\",\\n      \\\"fulcrumtech\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 577602434,\\n    \\\"maxMoney\\\": 14440060850,\\n    \\\"hackLevel\\\": 817,\\n    \\\"hackTime\\\": 1515269.7686088132,\\n    \\\"minSecurity\\\": 23,\\n    \\\"growth\\\": 85,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 381.1878557639961,\\n    \\\"score\\\": 3\\n  },\\n  \\\"fulcrumtech\\\": {\\n    \\\"connections\\\": [\\n      \\\"microdyne\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1636465454,\\n    \\\"maxMoney\\\": 40911636350,\\n    \\\"hackLevel\\\": 1143,\\n    \\\"hackTime\\\": 2510109.455164162,\\n    \\\"minSecurity\\\": 28,\\n    \\\"growth\\\": 98,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 651.9498385352182,\\n    \\\"score\\\": 3\\n  },\\n  \\\"icarus\\\": {\\n    \\\"connections\\\": [\\n      \\\"omnia\\\",\\n      \\\"zb-def\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 942169434,\\n    \\\"maxMoney\\\": 23554235850,\\n    \\\"hackLevel\\\": 862,\\n    \\\"hackTime\\\": 1985349.276542448,\\n    \\\"minSecurity\\\": 29,\\n    \\\"growth\\\": 91,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 474.5610483414886,\\n    \\\"score\\\": 3\\n  },\\n  \\\"zb-def\\\": {\\n    \\\"connections\\\": [\\n      \\\"icarus\\\",\\n      \\\"applied-energetics\\\",\\n      \\\"run4theh111z\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 936523803,\\n    \\\"maxMoney\\\": 23413095075,\\n    \\\"hackLevel\\\": 795,\\n    \\\"hackTime\\\": 1369657.0699874924,\\n    \\\"minSecurity\\\": 22,\\n    \\\"growth\\\": 74,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 683.7651727001652,\\n    \\\"score\\\": 3\\n  },\\n  \\\"applied-energetics\\\": {\\n    \\\"connections\\\": [\\n      \\\"zb-def\\\",\\n      \\\"stormtech\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 924145525,\\n    \\\"maxMoney\\\": 23103638125,\\n    \\\"hackLevel\\\": 787,\\n    \\\"hackTime\\\": 1397485.8613468525,\\n    \\\"minSecurity\\\": 22,\\n    \\\"growth\\\": 74,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 661.2915025196304,\\n    \\\"score\\\": 3\\n  },\\n  \\\"stormtech\\\": {\\n    \\\"connections\\\": [\\n      \\\"applied-energetics\\\",\\n      \\\"4sigma\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1189190331,\\n    \\\"maxMoney\\\": 29729758275,\\n    \\\"hackLevel\\\": 936,\\n    \\\"hackTime\\\": 2031765.799511855,\\n    \\\"minSecurity\\\": 27,\\n    \\\"growth\\\": 92,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 585.2989214040864,\\n    \\\"score\\\": 3\\n  },\\n  \\\"4sigma\\\": {\\n    \\\"connections\\\": [\\n      \\\"stormtech\\\",\\n      \\\"blade\\\",\\n      \\\"clarkinc\\\",\\n      \\\"powerhouse-fitness\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 16925551706,\\n    \\\"maxMoney\\\": 423138792650,\\n    \\\"hackLevel\\\": 957,\\n    \\\"hackTime\\\": 1496074.7673580968,\\n    \\\"minSecurity\\\": 20,\\n    \\\"growth\\\": 90,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 11313.30604277797,\\n    \\\"score\\\": 3\\n  },\\n  \\\"blade\\\": {\\n    \\\"connections\\\": [\\n      \\\"4sigma\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 10457612179,\\n    \\\"maxMoney\\\": 261440304475,\\n    \\\"hackLevel\\\": 907,\\n    \\\"hackTime\\\": 2328192.5932419677,\\n    \\\"minSecurity\\\": 32,\\n    \\\"growth\\\": 80,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 4491.729854890551,\\n    \\\"score\\\": 3\\n  },\\n  \\\"clarkinc\\\": {\\n    \\\"connections\\\": [\\n      \\\"4sigma\\\",\\n      \\\"ecorp\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 19998611100,\\n    \\\"maxMoney\\\": 499965277500,\\n    \\\"hackLevel\\\": 1167,\\n    \\\"hackTime\\\": 1453460.280399835,\\n    \\\"minSecurity\\\": 16,\\n    \\\"growth\\\": 50,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 13759.310364159759,\\n    \\\"score\\\": 3\\n  },\\n  \\\"ecorp\\\": {\\n    \\\"connections\\\": [\\n      \\\"clarkinc\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 32375002193,\\n    \\\"maxMoney\\\": 809375054825,\\n    \\\"hackLevel\\\": 1328,\\n    \\\"hackTime\\\": 3476539.483747336,\\n    \\\"minSecurity\\\": 33,\\n    \\\"growth\\\": 99,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 9312.421833363798,\\n    \\\"score\\\": 3\\n  },\\n  \\\"powerhouse-fitness\\\": {\\n    \\\"connections\\\": [\\n      \\\"4sigma\\\",\\n      \\\"megacorp\\\",\\n      \\\"The-Cave\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 900000000,\\n    \\\"maxMoney\\\": 22500000000,\\n    \\\"hackLevel\\\": 1060,\\n    \\\"hackTime\\\": 1544577.1295280633,\\n    \\\"minSecurity\\\": 18,\\n    \\\"growth\\\": 51,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 582.6837538860813,\\n    \\\"score\\\": 3\\n  },\\n  \\\"megacorp\\\": {\\n    \\\"connections\\\": [\\n      \\\"powerhouse-fitness\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 55793762361,\\n    \\\"maxMoney\\\": 1394844059025,\\n    \\\"hackLevel\\\": 1306,\\n    \\\"hackTime\\\": 3419033.689078753,\\n    \\\"minSecurity\\\": 33,\\n    \\\"growth\\\": 99,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 16318.576368293534,\\n    \\\"score\\\": 3\\n  },\\n  \\\"The-Cave\\\": {\\n    \\\"connections\\\": [\\n      \\\"powerhouse-fitness\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 925,\\n    \\\"hackTime\\\": 29703.40633707815,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"run4theh111z\\\": {\\n    \\\"connections\\\": [\\n      \\\"zb-def\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 516,\\n    \\\"hackTime\\\": 18904.56794430929,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"millenium-fitness\\\": {\\n    \\\"connections\\\": [\\n      \\\"summit-uni\\\",\\n      \\\"galactic-cyber\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 250000000,\\n    \\\"maxMoney\\\": 6250000000,\\n    \\\"hackLevel\\\": 478,\\n    \\\"hackTime\\\": 611071.6766802992,\\n    \\\"minSecurity\\\": 16,\\n    \\\"growth\\\": 36,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 409.11730904981073,\\n    \\\"score\\\": 3\\n  },\\n  \\\"galactic-cyber\\\": {\\n    \\\"connections\\\": [\\n      \\\"millenium-fitness\\\",\\n      \\\"unitalife\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 778122629,\\n    \\\"maxMoney\\\": 19453065725,\\n    \\\"hackLevel\\\": 828,\\n    \\\"hackTime\\\": 1338844.7364804966,\\n    \\\"minSecurity\\\": 20,\\n    \\\"growth\\\": 87,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 581.1895941313544,\\n    \\\"score\\\": 3\\n  },\\n  \\\"unitalife\\\": {\\n    \\\"connections\\\": [\\n      \\\"galactic-cyber\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1084928479,\\n    \\\"maxMoney\\\": 27123211975,\\n    \\\"hackLevel\\\": 780,\\n    \\\"hackTime\\\": 1591046.4585531813,\\n    \\\"minSecurity\\\": 26,\\n    \\\"growth\\\": 76,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 681.8961653618715,\\n    \\\"score\\\": 3\\n  },\\n  \\\"CSEC\\\": {\\n    \\\"connections\\\": [\\n      \\\"iron-gym\\\",\\n      \\\"phantasy\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 57,\\n    \\\"hackTime\\\": 6785.578158781407,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 1,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"phantasy\\\": {\\n    \\\"connections\\\": [\\n      \\\"CSEC\\\",\\n      \\\"the-hub\\\",\\n      \\\"netlink\\\",\\n      \\\"crush-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 600000000,\\n    \\\"maxMoney\\\": 600000000,\\n    \\\"hackLevel\\\": 100,\\n    \\\"hackTime\\\": 27559.48047523748,\\n    \\\"minSecurity\\\": 7,\\n    \\\"growth\\\": 35,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 21771.09254795667,\\n    \\\"score\\\": 18000\\n  },\\n  \\\"the-hub\\\": {\\n    \\\"connections\\\": [\\n      \\\"phantasy\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 2914262752.075818,\\n    \\\"maxMoney\\\": 4735676475,\\n    \\\"hackLevel\\\": 301,\\n    \\\"hackTime\\\": 124061.1215224183,\\n    \\\"minSecurity\\\": 14,\\n    \\\"growth\\\": 54,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 23490.540116947115,\\n    \\\"score\\\": 18985\\n  },\\n  \\\"netlink\\\": {\\n    \\\"connections\\\": [\\n      \\\"phantasy\\\",\\n      \\\"zb-institute\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 275000000,\\n    \\\"maxMoney\\\": 6875000000,\\n    \\\"hackLevel\\\": 416,\\n    \\\"hackTime\\\": 697251.1595996086,\\n    \\\"minSecurity\\\": 21,\\n    \\\"growth\\\": 55,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 394.4059414084255,\\n    \\\"score\\\": 3\\n  },\\n  \\\"zb-institute\\\": {\\n    \\\"connections\\\": [\\n      \\\"netlink\\\",\\n      \\\"lexo-corp\\\",\\n      \\\"alpha-ent\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 959947010,\\n    \\\"maxMoney\\\": 23998675250,\\n    \\\"hackLevel\\\": 728,\\n    \\\"hackTime\\\": 1581435.7564138956,\\n    \\\"minSecurity\\\": 27,\\n    \\\"growth\\\": 82,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 607.0098049235971,\\n    \\\"score\\\": 3\\n  },\\n  \\\"lexo-corp\\\": {\\n    \\\"connections\\\": [\\n      \\\"zb-institute\\\",\\n      \\\"aerocorp\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 724167685,\\n    \\\"maxMoney\\\": 18104192125,\\n    \\\"hackLevel\\\": 741,\\n    \\\"hackTime\\\": 1433499.5913413188,\\n    \\\"minSecurity\\\": 24,\\n    \\\"growth\\\": 61,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 505.17467139449946,\\n    \\\"score\\\": 3\\n  },\\n  \\\"aerocorp\\\": {\\n    \\\"connections\\\": [\\n      \\\"lexo-corp\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1185766033,\\n    \\\"maxMoney\\\": 29644150825,\\n    \\\"hackLevel\\\": 873,\\n    \\\"hackTime\\\": 2010616.9741998552,\\n    \\\"minSecurity\\\": 29,\\n    \\\"growth\\\": 60,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 589.7523238964434,\\n    \\\"score\\\": 3\\n  },\\n  \\\"alpha-ent\\\": {\\n    \\\"connections\\\": [\\n      \\\"zb-institute\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 705237074,\\n    \\\"maxMoney\\\": 17630926850,\\n    \\\"hackLevel\\\": 561,\\n    \\\"hackTime\\\": 968067.0163101958,\\n    \\\"minSecurity\\\": 22,\\n    \\\"growth\\\": 57,\\n    \\\"ports\\\": 4,\\n    \\\"moneyPerSec\\\": 728.5002609509653,\\n    \\\"score\\\": 3\\n  },\\n  \\\"crush-fitness\\\": {\\n    \\\"connections\\\": [\\n      \\\"phantasy\\\",\\n      \\\"rothman-uni\\\",\\n      \\\"catalyst\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1071601800,\\n    \\\"maxMoney\\\": 1071601800,\\n    \\\"hackLevel\\\": 234,\\n    \\\"hackTime\\\": 85598.6163064954,\\n    \\\"minSecurity\\\": 13,\\n    \\\"growth\\\": 33,\\n    \\\"ports\\\": 2,\\n    \\\"moneyPerSec\\\": 12518.914980623169,\\n    \\\"score\\\": 7526\\n  },\\n  \\\"rothman-uni\\\": {\\n    \\\"connections\\\": [\\n      \\\"crush-fitness\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 233488805,\\n    \\\"maxMoney\\\": 5837220125,\\n    \\\"hackLevel\\\": 384,\\n    \\\"hackTime\\\": 512218.7403905031,\\n    \\\"minSecurity\\\": 17,\\n    \\\"growth\\\": 36,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 455.838075783783,\\n    \\\"score\\\": 3\\n  },\\n  \\\"catalyst\\\": {\\n    \\\"connections\\\": [\\n      \\\"crush-fitness\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 316438492,\\n    \\\"maxMoney\\\": 7910962300,\\n    \\\"hackLevel\\\": 420,\\n    \\\"hackTime\\\": 692815.4509199382,\\n    \\\"minSecurity\\\": 21,\\n    \\\"growth\\\": 27,\\n    \\\"ports\\\": 3,\\n    \\\"moneyPerSec\\\": 456.7428332896226,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-0\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-1\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-2\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-3\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-4\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-5\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-6\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-7\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-8\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-9\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-10\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-11\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-12\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-13\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-14\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-15\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-16\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-17\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-18\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-19\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-20\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-21\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-22\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"pserv-23\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  },\\n  \\\"darkweb\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 5307.008598891294,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"moneyPerSec\\\": 0,\\n    \\\"score\\\": 3\\n  }\\n}\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"netmap.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30195.21000007479,\"ramUsage\":4.55,\"server\":\"home\",\"scriptKey\":\"netmap.js*[]\",\"title\":\"netmap.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"hacknet-mgr.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30195.21000007479,\"ramUsage\":5.7,\"server\":\"home\",\"scriptKey\":\"hacknet-mgr.js*[]\",\"title\":\"hacknet-mgr.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"server-mgr.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30195.21000007479,\"ramUsage\":6.95,\"server\":\"home\",\"scriptKey\":\"server-mgr.js*[]\",\"title\":\"server-mgr.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[11,\"foodnstuff\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":9815370.986918516,\"onlineMoneyMade\":9577776003.93947,\"onlineRunningTime\":30195.21000007479,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[11,\\\"foodnstuff\\\"]\",\"title\":\"Deployer-11 | foodnstuff\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[12,\"joesguns\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2705244.543535678,\"onlineMoneyMade\":9446694368.125408,\"onlineRunningTime\":29517.410000072323,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[12,\\\"joesguns\\\"]\",\"title\":\"Deployer-12 | joesguns\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[13,\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":984514.0696703194,\"onlineMoneyMade\":9459035624.330845,\"onlineRunningTime\":29516.21000007232,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[13,\\\"harakiri-sushi\\\"]\",\"title\":\"Deployer-13 | harakiri-sushi\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[14,\"phantasy\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":602409.033323444,\"onlineMoneyMade\":23039033260.645214,\"onlineRunningTime\":29348.210000071707,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[14,\\\"phantasy\\\"]\",\"title\":\"Deployer-14 | phantasy\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[15,\"omega-net\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":421552.33204593876,\"onlineMoneyMade\":26706924047.11429,\"onlineRunningTime\":29347.210000071704,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[15,\\\"omega-net\\\"]\",\"title\":\"Deployer-15 | omega-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[16,\"max-hardware\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":326978.13355257164,\"onlineMoneyMade\":5623709968.140039,\"onlineRunningTime\":10518.410000003205,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[16,\\\"max-hardware\\\"]\",\"title\":\"Deployer-16 | max-hardware\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[17,\"silver-helix\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":242084.5861333288,\"onlineMoneyMade\":7932963492.270012,\"onlineRunningTime\":10513.810000003188,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[17,\\\"silver-helix\\\"]\",\"title\":\"Deployer-17 | silver-helix\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[18,\"the-hub\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":192033.9386209044,\"onlineMoneyMade\":11575078760.487595,\"onlineRunningTime\":10485.010000003083,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[18,\\\"the-hub\\\"]\",\"title\":\"Deployer-18 | the-hub\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[19,\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":745435.9676276,\"onlineMoneyMade\":2921025392.430833,\"onlineRunningTime\":10483.010000003076,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[19,\\\"hong-fang-tea\\\"]\",\"title\":\"Deployer-19 | hong-fang-tea\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[20,\"iron-gym\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":455850.5968068367,\"onlineMoneyMade\":5233751893.574545,\"onlineRunningTime\":10344.01000000257,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[20,\\\"iron-gym\\\"]\",\"title\":\"Deployer-20 | iron-gym\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[21,\"nectar-net\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":773176.9793653863,\"onlineMoneyMade\":2807584251.012422,\"onlineRunningTime\":10343.210000002568,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[21,\\\"nectar-net\\\"]\",\"title\":\"Deployer-21 | nectar-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[22,\"zer0\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":287901.28433482844,\"onlineMoneyMade\":3151975340.0343246,\"onlineRunningTime\":10342.610000002565,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[22,\\\"zer0\\\"]\",\"title\":\"Deployer-22 | zer0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[23,\"neo-net\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":452920.30383650697,\"onlineMoneyMade\":2352150068.051384,\"onlineRunningTime\":8926.009999997412,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[23,\\\"neo-net\\\"]\",\"title\":\"Deployer-23 | neo-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[24,\"computek\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":262193.7873242121,\"onlineMoneyMade\":4147229459.868904,\"onlineRunningTime\":8924.809999997407,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[24,\\\"computek\\\"]\",\"title\":\"Deployer-24 | computek\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[25,\"crush-fitness\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":204630.08232130462,\"onlineMoneyMade\":2852559217.6339803,\"onlineRunningTime\":8923.809999997404,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[25,\\\"crush-fitness\\\"]\",\"title\":\"Deployer-25 | crush-fitness\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[26,\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1518203.5291915436,\"onlineMoneyMade\":3229336349.883245,\"onlineRunningTime\":8911.209999997358,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[26,\\\"sigma-cosmetics\\\"]\",\"title\":\"Deployer-26 | sigma-cosmetics\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[27,\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":254524.40667317802,\"onlineMoneyMade\":2580907369.7291408,\"onlineRunningTime\":8910.609999997356,\"ramUsage\":9.75,\"server\":\"home\",\"scriptKey\":\"deployer-basic.js*[27,\\\"johnson-ortho\\\"]\",\"title\":\"Deployer-27 | johnson-ortho\",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"11.4.7.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":32375002193,\"moneyMax\":809375054825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1328,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"18.5.7.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":55793762361,\"moneyMax\":1394844059025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1306,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-73769.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[71,184,197,17,46,55,41,124,21,4,95,198,150,151,150,21,53,28,58,55,54,145,104,142,159,178,51,10,18,63,25,135,149,36,36,95,106,98,61],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"80.5.9.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":17816694823,\"moneyMax\":445417370575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":935,\"serverGrowth\":70,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"2.2.7.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":10457612179,\"moneyMax\":261440304475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":907,\"serverGrowth\":80,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"29.3.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"kuai-gong\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":24617822680,\"moneyMax\":615445567000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1278,\"serverGrowth\":83,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"85.8.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"ecorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":47,\"minDifficulty\":16,\"moneyAvailable\":19998611100,\"moneyMax\":499965277500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1167,\"serverGrowth\":50,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-64310.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[13,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"55.6.1.6\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":98,\"hackDifficulty\":98,\"minDifficulty\":33,\"moneyAvailable\":18936307765,\"moneyMax\":473407694125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1097,\"serverGrowth\":97,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"97.4.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"stormtech\",\"blade\",\"clarkinc\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":16925551706,\"moneyMax\":423138792650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":957,\"serverGrowth\":90,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"49.4.8.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"helios\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":95,\"hackDifficulty\":95,\"minDifficulty\":32,\"moneyAvailable\":24740110890,\"moneyMax\":618502772250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1012,\"serverGrowth\":92,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"61.8.5.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":83,\"hackDifficulty\":83,\"minDifficulty\":28,\"moneyAvailable\":1636465454,\"moneyMax\":40911636350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1143,\"serverGrowth\":98,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-24141.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"01100000000000000110110000001100\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-661178.cct\",\"type\":\"Encryption II: Vigenère Cipher\",\"data\":[\"FLASHMOUSESHELLENTERPOPUP\",\"SPAMMER\"],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"92.4.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1294,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"60.2.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1189190331,\"moneyMax\":29729758275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":92,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"77.8.7.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"infocomm\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":863985734,\"moneyMax\":21599643350,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":987,\"serverGrowth\":65,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"44.9.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":730665645,\"moneyMax\":18266641125,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":901,\"serverGrowth\":46,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"16.3.3.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\"omnitek\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":658691587,\"moneyMax\":16467289675,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":869,\"serverGrowth\":72,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"8.2.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":711884756,\"moneyMax\":17797118900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":892,\"serverGrowth\":62,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"64.9.9.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":942169434,\"moneyMax\":23554235850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":91,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"79.3.5.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":88,\"hackDifficulty\":88,\"minDifficulty\":29,\"moneyAvailable\":1166248175,\"moneyMax\":29156204375,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":827,\"serverGrowth\":84,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"33.9.2.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"taiyang-digital\",\"helios\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":867801057,\"moneyMax\":21695026425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":67,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"84.1.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":577602434,\"moneyMax\":14440060850,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":817,\"serverGrowth\":85,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-564121.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[178,26,14,94,61,171,185,11,121,200,87,141,30,37,1,183],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"42.9.6.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"solaris\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":893428265,\"moneyMax\":22335706625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":893,\"serverGrowth\":78,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"2.2.1.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"millenium-fitness\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":778122629,\"moneyMax\":19453065725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":828,\"serverGrowth\":87,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"45.0.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1185766033,\"moneyMax\":29644150825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":873,\"serverGrowth\":60,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"0.3.2.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"defcomm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":913008979,\"moneyMax\":22825224475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":948,\"serverGrowth\":61,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-623604.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":292417156,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-191290-Netburners.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"CLOUD DEBUG TABLE SHIFT CACHE\",16],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-102226.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"2651474034\",-50],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-913044.cct\",\"type\":\"Generate IP Addresses\",\"data\":\"171135125189\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"36.8.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":936523803,\"moneyMax\":23413095075,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":795,\"serverGrowth\":74,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-841447.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[200,59,79,81,134,10],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"78.7.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\",\"stormtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":924145525,\"moneyMax\":23103638125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":787,\"serverGrowth\":74,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"62.7.9.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":712865001,\"moneyMax\":17821625025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":790,\"serverGrowth\":75,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-137585.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[6,[[2,4],[1,2],[0,1],[2,3]]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"28.1.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"solaris\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1432611465,\"moneyMax\":35815286625,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":58,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"1.0.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":1519852949,\"moneyMax\":37996323725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":81,\"runningScripts\":[]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"85.0.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"microdyne\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":1195817920,\"moneyMax\":29895448000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":74,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"66.2.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":1421757178,\"moneyMax\":35543929450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":814,\"serverGrowth\":73,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-151075.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[-10,3,9,-4,7,3,7,-8,7,3,4,7,-9,-6,8,-8,-2,3,-9,5,-5,8,0,-2,-2,-3,-2,-1,0,7,-5,7,4,7,-6,-10,8,-9,5,1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"19.4.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":1084928479,\"moneyMax\":27123211975,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":780,\"serverGrowth\":76,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"74.8.7.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":724167685,\"moneyMax\":18104192125,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":741,\"serverGrowth\":61,\"runningScripts\":[]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"45.6.5.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"I.I.I.I\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":689459611,\"moneyMax\":17236490275,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":486,\"serverGrowth\":42,\"runningScripts\":[]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-568356.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[97,30,115,165,133,65,72,66,85,185,193,200,26,17,85,39],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"44.3.6.5\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":705237074,\"moneyMax\":17630926850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":561,\"serverGrowth\":57,\"runningScripts\":[]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-369924.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[82,50,168,86,143,17,68,200,133,46,67,56,166,100,133,34,169,145,131,41,69,25,63,83,143,165,10,159,181,5,199,73,123,29,65,84,113,40,38,51,68,34,68,99,100,187,120],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"43.0.0.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":350311962,\"moneyMax\":8757799050,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":440,\"serverGrowth\":38,\"runningScripts\":[]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"82.6.9.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":50,\"hackDifficulty\":50,\"minDifficulty\":17,\"moneyAvailable\":233488805,\"moneyMax\":5837220125,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":384,\"serverGrowth\":36,\"runningScripts\":[]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"51.8.0.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"netlink\",\"lexo-corp\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":82,\"hackDifficulty\":82,\"minDifficulty\":27,\"moneyAvailable\":959947010,\"moneyMax\":23998675250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":728,\"serverGrowth\":82,\"runningScripts\":[]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"25.7.1.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"computek\",\"aevum-police\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":59,\"minDifficulty\":20,\"moneyAvailable\":274776218,\"moneyMax\":6869405450,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":460,\"serverGrowth\":40,\"runningScripts\":[]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-796827.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"MODEM LINUX INBOX POPUP FRAME\",3],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-329199.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[5],[7,5],[4,5,1],[4,6,4,9],[7,2,4,9,3],[2,4,9,2,2,9],[1,1,2,1,2,1,6],[5,1,8,3,5,2,1,7],[1,7,5,9,5,7,7,1,7],[2,2,3,3,4,5,8,4,6,6],[8,8,8,3,1,4,1,1,2,8,8]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"59.1.8.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":538989418,\"moneyMax\":13474735450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":639,\"serverGrowth\":62,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"1.0.9.0\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":316438492,\"moneyMax\":7910962300,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":420,\"serverGrowth\":27,\"runningScripts\":[]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"69.8.1.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":43,\"hackDifficulty\":14.946,\"minDifficulty\":14,\"moneyAvailable\":2914262752.075818,\"moneyMax\":4735676475,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":301,\"serverGrowth\":54,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":11,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\"]\",\"title\":\"grow.js the-hub\",\"threads\":19,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"the-hub\",\"scriptKey\":\"weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"weaken.js hong-fang-tea\",\"threads\":6,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"67.1.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":22.48,\"minDifficulty\":20,\"moneyAvailable\":5899885050,\"moneyMax\":5899885050,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":358,\"serverGrowth\":46,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"42.0.2.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"zb-institute\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":63,\"hackDifficulty\":63,\"minDifficulty\":21,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":416,\"serverGrowth\":55,\"runningScripts\":[]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"32.1.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omega-net\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":19.806,\"minDifficulty\":19,\"moneyAvailable\":1168657101.7701912,\"moneyMax\":1814494275,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":290,\"serverGrowth\":37,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"44.4.7.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":70000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"weaken.js*[\\\"joesguns\\\"]\",\"title\":\"weaken.js joesguns\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"99.8.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3,\"minDifficulty\":3,\"moneyAvailable\":50000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"weaken.js*[\\\"joesguns\\\"]\",\"title\":\"weaken.js joesguns\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"17.2.3.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.166,\"minDifficulty\":3,\"moneyAvailable\":39354508.88873398,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"weaken.js*[\\\"joesguns\\\"]\",\"title\":\"weaken.js joesguns\",\"threads\":9,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-583517.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9J0O6OaJ0b661n992gv821e621g532IL694IrJP\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"62.7.9.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.187999999999998,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"weaken.js*[\\\"joesguns\\\"]\",\"title\":\"weaken.js joesguns\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"ramUsage\":1.7,\"server\":\"joesguns\",\"scriptKey\":\"hack.js*[\\\"zer0\\\"]\",\"title\":\"hack.js zer0\",\"threads\":1,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"79.2.3.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":187500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"weaken.js hong-fang-tea\",\"threads\":7,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-270086.cct\",\"type\":\"Algorithmic Stock Trader III\",\"data\":[128,132,171,116,130,161,101,66,169,11,115,95,200,44,188,101,176,107,167,25,96,3,14,109,30,158,126,131,142],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"35.2.5.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"joesguns\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.823999999999998,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"weaken.js*[\\\"joesguns\\\"]\",\"title\":\"weaken.js joesguns\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"ramUsage\":1.7,\"server\":\"nectar-net\",\"scriptKey\":\"hack.js*[\\\"zer0\\\"]\",\"title\":\"hack.js zer0\",\"threads\":5,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-530321.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,2],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"96.9.7.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"computek\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8,\"minDifficulty\":8,\"moneyAvailable\":125000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\"]\",\"title\":\"grow.js the-hub\",\"threads\":3,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"76.0.5.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.290000000000001,\"minDifficulty\":10,\"moneyAvailable\":746139358.513245,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"weaken.js*[\\\"joesguns\\\"]\",\"title\":\"weaken.js joesguns\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\"]\",\"title\":\"grow.js the-hub\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"scriptKey\":\"hack.js*[\\\"zer0\\\"]\",\"title\":\"hack.js zer0\",\"threads\":17,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"9.0.6.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":7.534000000000001,\"minDifficulty\":5,\"moneyAvailable\":75000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"grow.js*[\\\"silver-helix\\\"]\",\"title\":\"grow.js silver-helix\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":6,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"31.1.3.5\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.273999999999999,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":142.81000000000043,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"weaken.js iron-gym\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\"]\",\"title\":\"grow.js the-hub\",\"threads\":4,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"80.2.9.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"CSEC\",\"the-hub\",\"netlink\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.438,\"minDifficulty\":7,\"moneyAvailable\":600000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":11,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\"]\",\"title\":\"grow.js the-hub\",\"threads\":7,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"82.0.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.208,\"minDifficulty\":5,\"moneyAvailable\":170361174.5691771,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"grow.js*[\\\"silver-helix\\\"]\",\"title\":\"grow.js silver-helix\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":6,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-906921.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"VVjSAEI8I8VjSAEI8IAEIAEI8IAcKIAEI8IA81sqQt8x3tpjfHBx3tpjfH4FhmY6eNvZi\",\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-616861.cct\",\"type\":\"HammingCodes: Encoded Binary to Integer\",\"data\":\"0110000010010000\",\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"31.0.4.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"max-hardware\",\"johnson-ortho\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":26,\"hackDifficulty\":10.72,\"minDifficulty\":9,\"moneyAvailable\":1521886650,\"moneyMax\":1521886650,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":187,\"serverGrowth\":37,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":142.81000000000043,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"weaken.js iron-gym\",\"threads\":11,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":7,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-223565.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[22,26],[8,11],[24,25]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"91.0.3.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"phantasy\",\"rothman-uni\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":13,\"minDifficulty\":13,\"moneyAvailable\":1071601800,\"moneyMax\":1071601800,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":234,\"serverGrowth\":33,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"87.0.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\",\"CSEC\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":13.026,\"minDifficulty\":10,\"moneyAvailable\":494400923.1100806,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\"]\",\"title\":\"grow.js the-hub\",\"threads\":11,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"scriptKey\":\"hack.js*[\\\"neo-net\\\"]\",\"title\":\"hack.js neo-net\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"weaken.js hong-fang-tea\",\"threads\":4,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"52.3.4.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":478,\"serverGrowth\":36,\"runningScripts\":[]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"15.2.8.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"megacorp\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":55,\"hackDifficulty\":55,\"minDifficulty\":18,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1060,\"serverGrowth\":51,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"54.9.4.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"rho-construction\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":772,\"serverGrowth\":60,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-785972-Netburners.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[160,[1,2,3,7,8,9,13,16,18,19,20]],\"reward\":{\"type\":0,\"name\":\"Netburners\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"12.2.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":516,\"serverGrowth\":1,\"runningScripts\":[]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-336311.cct\",\"type\":\"HammingCodes: Integer to Encoded Binary\",\"data\":95250,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-19374.cct\",\"type\":\"Array Jumping Game\",\"data\":[8,1,9,8,9],\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-109723.cct\",\"type\":\"Algorithmic Stock Trader II\",\"data\":[143,48,99,145,25,189,99,141,111,3,130,57,68,141,152,37,73,43,31,184,118,128,106,82,30],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"32.9.2.4\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"rho-construction\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":345,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":142.81000000000043,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"weaken.js iron-gym\",\"threads\":45,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.01000000000062,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"weaken.js*[\\\"phantasy\\\"]\",\"title\":\"weaken.js phantasy\",\"threads\":29,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"grow.js*[\\\"silver-helix\\\"]\",\"title\":\"grow.js silver-helix\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"ramUsage\":1.7,\"server\":\"I.I.I.I\",\"scriptKey\":\"hack.js*[\\\"neo-net\\\"]\",\"title\":\"hack.js neo-net\",\"threads\":40,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"86.6.0.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"silver-helix\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":208,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"grow.js*[\\\"silver-helix\\\"]\",\"title\":\"grow.js silver-helix\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\"]\",\"title\":\"grow.js the-hub\",\"threads\":30,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"scriptKey\":\"hack.js*[\\\"zer0\\\"]\",\"title\":\"hack.js zer0\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":21,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"60.0.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"vitalife\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":548,\"serverGrowth\":1,\"runningScripts\":[]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"90.0.0.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":57,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"74.8.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"0.4.4.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"79.1.7.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"73.5.5.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":495.6099999999804,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"grow.js*[\\\"johnson-ortho\\\"]\",\"title\":\"grow.js johnson-ortho\",\"threads\":741,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":73.0100000000005,\"ramUsage\":1.7,\"server\":\"pserv-0\",\"scriptKey\":\"hack.js*[\\\"crush-fitness\\\"]\",\"title\":\"hack.js crush-fitness\",\"threads\":233,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":68.01000000000043,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"grow.js*[\\\"silver-helix\\\"]\",\"title\":\"grow.js silver-helix\",\"threads\":404,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":43.81000000000009,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"grow.js*[\\\"max-hardware\\\"]\",\"title\":\"grow.js max-hardware\",\"threads\":263,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":33.60999999999994,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"weaken.js harakiri-sushi\",\"threads\":26,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":30.209999999999926,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"weaken.js*[\\\"computek\\\"]\",\"title\":\"weaken.js computek\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":24.00999999999995,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"grow.js*[\\\"the-hub\\\"]\",\"title\":\"grow.js the-hub\",\"threads\":341,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.00999999999997,\"ramUsage\":1.7,\"server\":\"pserv-0\",\"scriptKey\":\"hack.js*[\\\"zer0\\\"]\",\"title\":\"hack.js zer0\",\"threads\":80,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.40999999999999,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"weaken.js*[\\\"omega-net\\\"]\",\"title\":\"weaken.js omega-net\",\"threads\":35,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":12.009999999999991,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"weaken.js nectar-net\",\"threads\":37,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.41,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"grow.js sigma-cosmetics\",\"threads\":986,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":5.410000000000003,\"ramUsage\":1.7,\"server\":\"pserv-0\",\"scriptKey\":\"hack.js*[\\\"neo-net\\\"]\",\"title\":\"hack.js neo-net\",\"threads\":56,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.7,\"server\":\"pserv-0\",\"scriptKey\":\"hack.js*[\\\"foodnstuff\\\"]\",\"title\":\"hack.js foodnstuff\",\"threads\":82,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.0100000000000007,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"weaken.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"weaken.js hong-fang-tea\",\"threads\":34,\"temporary\":false}}]}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"53.4.0.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-1\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-1\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"24.9.1.1\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-2\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-2\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"54.9.0.5\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-3\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-3\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"11.0.5.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-4\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-4\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"9.3.1.8\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-5\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"60.5.5.7\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-6\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"53.3.9.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-7\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"52.0.4.5\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"95.7.7.2\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"52.7.4.0\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"16.2.1.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"40.2.7.6\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"45.0.0.9\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"66.7.5.4\",\"isConnectedTo\":false,\"maxRam\":65536,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"18.9.2.4\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"73.8.1.0\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"56.1.2.5\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"64.6.1.6\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"80.1.0.9\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"8.4.9.0\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"15.1.2.0\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-22\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-22\",\"httpPortOpen\":false,\"ip\":\"62.6.0.4\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-22\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-23\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-23\",\"httpPortOpen\":false,\"ip\":\"53.4.6.9\",\"isConnectedTo\":false,\"maxRam\":131072,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-23\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.9042,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0449,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":474.7680744009005}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":15052.892578111621}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":45.3101,\"isBanned\":false,\"isMember\":true,\"playerReputation\":12476.579694827522}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":10.1226,\"isBanned\":false,\"isMember\":true,\"playerReputation\":34864.69439304031}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":16.310299999999998,\"isBanned\":false,\"isMember\":true,\"playerReputation\":7634.132301177664}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"sa\":\"scan-analyze\",\"go\":\"run startup.js\",\"netmap\":\"run netmap.js\"}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":22025.6841826953,\"lastPrice\":22055.009711451905,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.41,\"b\":false,\"otlkMag\":19.583988854372404,\"otlkMagForecast\":30.25733216429081,\"cap\":598271439,\"spreadPerc\":0.4,\"shareTxForMovement\":51101,\"shareTxUntilMovement\":51101,\"totalShares\":94600000,\"maxShares\":18900000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":21212.184763247315,\"lastPrice\":21178.48525512879,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.49,\"b\":true,\"otlkMag\":19.09583531922938,\"otlkMagForecast\":67.7546084018467,\"cap\":357867525,\"spreadPerc\":0.5,\"shareTxForMovement\":55334,\"shareTxUntilMovement\":55334,\"totalShares\":76400000,\"maxShares\":15300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":15716.493381334094,\"lastPrice\":15679.832196718005,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":16.06275426897474,\"otlkMagForecast\":64.75083202544863,\"cap\":514172451,\"spreadPerc\":0.3,\"shareTxForMovement\":77459,\"shareTxUntilMovement\":77459,\"totalShares\":67900000,\"maxShares\":13600000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":15587.601289600256,\"lastPrice\":15625.56539224435,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":12.341627049498115,\"otlkMagForecast\":37.931932115112396,\"cap\":164147620,\"spreadPerc\":0.1,\"shareTxForMovement\":39170,\"shareTxUntilMovement\":39170,\"totalShares\":95300000,\"maxShares\":19100000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":50081.66881368805,\"lastPrice\":49984.27816420651,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":11.833279946634075,\"otlkMagForecast\":61.5683417614374,\"cap\":1036623693,\"spreadPerc\":0.4,\"shareTxForMovement\":74082,\"shareTxUntilMovement\":74082,\"totalShares\":42900000,\"maxShares\":8600000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":103516.92147169431,\"lastPrice\":103866.52618101887,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.04,\"b\":true,\"otlkMag\":17.455093088251232,\"otlkMagForecast\":65.1034267583466,\"cap\":658681794,\"spreadPerc\":0.3,\"shareTxForMovement\":50871,\"shareTxUntilMovement\":50871,\"totalShares\":32000000,\"maxShares\":6400000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":39315.581508485295,\"lastPrice\":39209.89820160248,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":false,\"otlkMag\":11.143301279135436,\"otlkMagForecast\":38.80151832036558,\"cap\":528307103,\"spreadPerc\":0.1,\"shareTxForMovement\":78088,\"shareTxUntilMovement\":78088,\"totalShares\":74100000,\"maxShares\":14800000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":19580.74367640904,\"lastPrice\":19500.951751919984,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.26,\"b\":true,\"otlkMag\":17.084074222915287,\"otlkMagForecast\":70.81471627886279,\"cap\":668458336,\"spreadPerc\":0.7,\"shareTxForMovement\":36945,\"shareTxUntilMovement\":36945,\"totalShares\":62600000,\"maxShares\":12500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":29174.036091438407,\"lastPrice\":29252.669516942577,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.83,\"b\":true,\"otlkMag\":7.378018160006499,\"otlkMagForecast\":57.73824591045938,\"cap\":122729202,\"spreadPerc\":0.4,\"shareTxForMovement\":85622,\"shareTxUntilMovement\":85622,\"totalShares\":53400000,\"maxShares\":10700000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":16210.7168689257,\"lastPrice\":16246.51362894835,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.68,\"b\":true,\"otlkMag\":8.019691392522624,\"otlkMagForecast\":59.62407581708223,\"cap\":129136696,\"spreadPerc\":0.4,\"shareTxForMovement\":91044,\"shareTxUntilMovement\":91044,\"totalShares\":59000000,\"maxShares\":11800000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":14435.78066488543,\"lastPrice\":14407.708316498707,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":true,\"otlkMag\":8.014324334358271,\"otlkMagForecast\":59.510963922417325,\"cap\":40764230,\"spreadPerc\":0.6,\"shareTxForMovement\":57652,\"shareTxUntilMovement\":57652,\"totalShares\":59000000,\"maxShares\":11800000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":15293.394498123413,\"lastPrice\":15258.708961610066,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":7.344486600456333,\"otlkMagForecast\":43.92836087485243,\"cap\":25787314,\"spreadPerc\":0.7,\"shareTxForMovement\":78819,\"shareTxUntilMovement\":78819,\"totalShares\":81200000,\"maxShares\":16200000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":19196.259606381267,\"lastPrice\":19233.662090909304,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.6,\"b\":false,\"otlkMag\":6.293895235822028,\"otlkMagForecast\":42.60496112599173,\"cap\":20857876,\"spreadPerc\":0.3,\"shareTxForMovement\":38198,\"shareTxUntilMovement\":38198,\"totalShares\":57600000,\"maxShares\":11500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":22212.936140486094,\"lastPrice\":22171.177213207226,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.58,\"b\":false,\"otlkMag\":10.932772445526346,\"otlkMagForecast\":39.7519826376038,\"cap\":192737594,\"spreadPerc\":0.9,\"shareTxForMovement\":47600,\"shareTxUntilMovement\":47600,\"totalShares\":35800000,\"maxShares\":7200000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":11934.789513587548,\"lastPrice\":11912.738981746541,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":5.457438889129835,\"otlkMagForecast\":43.574349301340455,\"cap\":258028492,\"spreadPerc\":0.9,\"shareTxForMovement\":107643,\"shareTxUntilMovement\":107643,\"totalShares\":42100000,\"maxShares\":8400000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":13506.665136514259,\"lastPrice\":13538.245215810075,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.72,\"b\":true,\"otlkMag\":1.3284220108700657,\"otlkMagForecast\":55.62961055212568,\"cap\":231537970,\"spreadPerc\":1,\"shareTxForMovement\":74481,\"shareTxUntilMovement\":74481,\"totalShares\":42500000,\"maxShares\":8500000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":29251.850835420035,\"lastPrice\":29323.094655877936,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":false,\"otlkMag\":7.3073380441828695,\"otlkMagForecast\":40.37224662133059,\"cap\":233457861,\"spreadPerc\":0.5,\"shareTxForMovement\":46653,\"shareTxUntilMovement\":46653,\"totalShares\":25600000,\"maxShares\":5100000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":16512.47074459824,\"lastPrice\":16479.291780703745,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.62,\"b\":true,\"otlkMag\":11.167110496124767,\"otlkMagForecast\":60.772381542666764,\"cap\":387670444,\"spreadPerc\":1,\"shareTxForMovement\":104184,\"shareTxUntilMovement\":104184,\"totalShares\":32400000,\"maxShares\":6500000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":21706.02684061292,\"lastPrice\":21757.482812183633,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":6.034279178252016,\"otlkMagForecast\":44.44638063356278,\"cap\":80346418,\"spreadPerc\":0.7,\"shareTxForMovement\":90226,\"shareTxUntilMovement\":90226,\"totalShares\":30200000,\"maxShares\":6000000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":1207.1774496496337,\"lastPrice\":1216.7818396177763,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.45,\"b\":true,\"otlkMag\":2.8115084770629144,\"otlkMagForecast\":51.066725606013996,\"cap\":53024180,\"spreadPerc\":1.1,\"shareTxForMovement\":26664,\"shareTxUntilMovement\":26664,\"totalShares\":111300000,\"maxShares\":22300000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":5213.093441553649,\"lastPrice\":5191.010557369451,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.31,\"b\":false,\"otlkMag\":6.309874180470146,\"otlkMagForecast\":45.55919707438655,\"cap\":27801675,\"spreadPerc\":0.9,\"shareTxForMovement\":67931,\"shareTxUntilMovement\":67931,\"totalShares\":63200000,\"maxShares\":12600000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":5120.181671575976,\"lastPrice\":5111.384420208147,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":true,\"otlkMag\":1.6748403196116142,\"otlkMagForecast\":50.94560814461715,\"cap\":100559030,\"spreadPerc\":0.6,\"shareTxForMovement\":110146,\"shareTxUntilMovement\":110146,\"totalShares\":41200000,\"maxShares\":8200000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":1291.1432284369255,\"lastPrice\":1298.5226050692277,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.76,\"b\":false,\"otlkMag\":11.376943285939667,\"otlkMagForecast\":41.886709177228994,\"cap\":79311498,\"spreadPerc\":0.7,\"shareTxForMovement\":49867,\"shareTxUntilMovement\":49867,\"totalShares\":49000000,\"maxShares\":9800000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":2898.517085062234,\"lastPrice\":2884.0938495113733,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.54,\"b\":false,\"otlkMag\":5.094121936042707,\"otlkMagForecast\":46.2959998100131,\"cap\":105405878,\"spreadPerc\":1.1,\"shareTxForMovement\":73355,\"shareTxUntilMovement\":73355,\"totalShares\":45500000,\"maxShares\":9100000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":4774.980586839884,\"lastPrice\":4789.556375102119,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.94,\"b\":false,\"otlkMag\":5.051859717874053,\"otlkMagForecast\":46.325705729716724,\"cap\":61668895,\"spreadPerc\":0.5,\"shareTxForMovement\":78863,\"shareTxUntilMovement\":78863,\"totalShares\":34800000,\"maxShares\":7000000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":5521.171984130922,\"lastPrice\":5460.702607542477,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.41,\"b\":true,\"otlkMag\":7.573029456007686,\"otlkMagForecast\":52.24506102705974,\"cap\":31041150,\"spreadPerc\":1.1,\"shareTxForMovement\":52921,\"shareTxUntilMovement\":52921,\"totalShares\":18100000,\"maxShares\":3600000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":4389.167970611881,\"lastPrice\":4373.828228246362,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.08,\"b\":true,\"otlkMag\":5.359108310008869,\"otlkMagForecast\":53.650063632407154,\"cap\":48648774,\"spreadPerc\":0.6,\"shareTxForMovement\":89510,\"shareTxUntilMovement\":89510,\"totalShares\":18300000,\"maxShares\":3700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":4512.835369619838,\"lastPrice\":4523.533427361478,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":false,\"otlkMag\":5.1118325224362255,\"otlkMagForecast\":44.18348895129132,\"cap\":87144954,\"spreadPerc\":0.6,\"shareTxForMovement\":145196,\"shareTxUntilMovement\":145196,\"totalShares\":12500000,\"maxShares\":2500000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":4034.4457947932897,\"lastPrice\":4063.1377792331186,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.19,\"b\":true,\"otlkMag\":5.4174954465509115,\"otlkMagForecast\":53.4780652370597,\"cap\":51483914,\"spreadPerc\":1.4,\"shareTxForMovement\":56010,\"shareTxUntilMovement\":56010,\"totalShares\":9200000,\"maxShares\":1800000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":477.179376483545,\"lastPrice\":482.09154790999384,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.17,\"b\":false,\"otlkMag\":6.661465931075606,\"otlkMagForecast\":42.632537972274946,\"cap\":16995240,\"spreadPerc\":1.2,\"shareTxForMovement\":30815,\"shareTxUntilMovement\":30815,\"totalShares\":56500000,\"maxShares\":11300000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":1714.8113677149822,\"lastPrice\":1722.830205588353,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.44,\"b\":true,\"otlkMag\":18.004485514971105,\"otlkMagForecast\":67.18488168709708,\"cap\":19809349,\"spreadPerc\":1.1,\"shareTxForMovement\":56310,\"shareTxUntilMovement\":56310,\"totalShares\":85300000,\"maxShares\":17100000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":13486.901537339785,\"lastPrice\":13454.569422656508,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":8.757617297662888,\"otlkMagForecast\":58.87103890134864,\"cap\":200710061,\"spreadPerc\":0.7,\"shareTxForMovement\":102666,\"shareTxUntilMovement\":102666,\"totalShares\":23500000,\"maxShares\":4700000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":18253.43721781777,\"lastPrice\":18294.930260558514,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":12.132225357221389,\"otlkMagForecast\":38.08817386829393,\"cap\":241907771,\"spreadPerc\":0.8,\"shareTxForMovement\":127572,\"shareTxUntilMovement\":127572,\"totalShares\":31200000,\"maxShares\":6200000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":26,\"lastUpdate\":1700609295588,\"ticksUntilCycle\":41}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":true,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1700609300869","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}