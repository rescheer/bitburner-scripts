{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hp\":{\"current\":10,\"max\":10},\"skills\":{\"hacking\":806,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0},\"exp\":{\"hacking\":308554314.6957707,\"strength\":0,\"defense\":0,\"dexterity\":0,\"agility\":0,\"charisma\":0,\"intelligence\":0},\"mults\":{\"hacking_chance\":1.3940466873846602,\"hacking_speed\":1.3870844057936733,\"hacking_money\":2.1811614836630726,\"hacking_grow\":1.4368652725053184,\"hacking\":1.8964225263057854,\"strength\":1.3219160507048926,\"defense\":1.1494922180042546,\"dexterity\":1.8321756462769816,\"agility\":1.2069668289044675,\"charisma\":1.3793906616051055,\"hacking_exp\":2.0446018081641686,\"strength_exp\":1.2644414398046802,\"defense_exp\":1.2644414398046802,\"dexterity_exp\":1.2644414398046802,\"agility_exp\":1.2644414398046802,\"charisma_exp\":1.2644414398046802,\"company_rep\":1.1494922180042546,\"faction_rep\":1.1494922180042546,\"crime_money\":1.1494922180042546,\"crime_success\":1.1494922180042546,\"hacknet_node_money\":2.8991271387021684,\"hacknet_node_purchase_cost\":0.665511247503868,\"hacknet_node_ram_cost\":0.8699493431423112,\"hacknet_node_core_cost\":0.8699493431423112,\"hacknet_node_level_cost\":0.7394569416709645,\"work_money\":1.1494922180042546,\"bladeburner_max_stamina\":1,\"bladeburner_stamina_gain\":1,\"bladeburner_analysis\":1,\"bladeburner_success_chance\":1},\"augmentations\":[{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":14,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"BitWire\"},{\"level\":1,\"name\":\"CashRoot Starter Kit\"},{\"level\":1,\"name\":\"Hacknet Node Cache Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Hacknet Node NIC Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Wired Reflexes\"},{\"level\":1,\"name\":\"Augmented Targeting I\"},{\"level\":1,\"name\":\"Hacknet Node Core Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node Kernel Direct-Neural Interface\"},{\"level\":1,\"name\":\"Hacknet Node CPU Architecture Neural-Upload\"},{\"level\":1,\"name\":\"Speech Processor Implant\"},{\"level\":1,\"name\":\"Augmented Targeting II\"},{\"level\":1,\"name\":\"Neural-Retention Enhancement\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen I\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen II\"},{\"level\":1,\"name\":\"Artificial Synaptic Potentiation\"},{\"level\":1,\"name\":\"Neuralstimulator\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen III\"},{\"level\":1,\"name\":\"Embedded Netburner Module\"},{\"level\":1,\"name\":\"Enhanced Myelin Sheathing\"},{\"level\":1,\"name\":\"Cranial Signal Processors - Gen IV\"},{\"level\":1,\"name\":\"The Black Hand\"},{\"level\":1,\"name\":\"DataJack\"}],\"queuedAugmentations\":[],\"city\":\"Sector-12\",\"bitNodeN\":1,\"corporation\":null,\"gang\":null,\"bladeburner\":null,\"currentServer\":\"home\",\"factions\":[\"BitRunners\",\"The Black Hand\",\"NiteSec\",\"Sector-12\",\"CyberSec\"],\"factionInvitations\":[],\"hacknetNodes\":[],\"has4SData\":true,\"has4SDataTixApi\":false,\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0,\"Company Favor\":0}}},\"hasTixApiAccess\":false,\"hasWseAccount\":true,\"jobs\":{},\"karma\":0,\"numPeopleKilled\":0,\"location\":\"Alpha Enterprises\",\"money\":5454047193633.508,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":5457288033633.509,\"hacknet\":0,\"hacknet_expenses\":0,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":5454046193633.508,\"work\":0,\"servers\":-2928640000,\"other\":-313200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-10377600,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":6302694453957.491,\"hacknet\":63567544584.459435,\"hacknet_expenses\":-186225801690.09634,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":-1200000000,\"total\":5455785094481.158,\"work\":343681.6693468301,\"servers\":-217323800676.05194,\"other\":-881800000,\"augmentations\":-504835467732.09546}},\"playtimeSinceLastAug\":94803200,\"playtimeSinceLastBitnode\":334656600,\"lastAugReset\":1700688070809,\"lastNodeReset\":-1,\"purchasedServers\":[\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\"],\"scriptProdSinceLastAug\":5457164721918.948,\"sleeves\":[],\"sleevesFromCovenant\":0,\"sourceFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"exploits\":[],\"achievements\":[{\"ID\":\"NS2\",\"unlockedOn\":1700448523331},{\"ID\":\"FIRST_HACKNET_NODE\",\"unlockedOn\":1700448763331},{\"ID\":\"BRUTESSH.EXE\",\"unlockedOn\":1700453323330},{\"ID\":\"CYBERSEC\",\"unlockedOn\":1700454163326},{\"ID\":\"FTPCRACK.EXE\",\"unlockedOn\":1700458483330},{\"ID\":\"HACKNET_NODE_10M\",\"unlockedOn\":1700468506642},{\"ID\":\"TOR\",\"unlockedOn\":1700473244712},{\"ID\":\"INSTALL_1\",\"unlockedOn\":1700481930808},{\"ID\":\"FROZE\",\"unlockedOn\":1700559259316},{\"ID\":\"RELAYSMTP.EXE\",\"unlockedOn\":1700573137106},{\"ID\":\"MAX_HACKNET_NODE\",\"unlockedOn\":1700581755373},{\"ID\":\"THE_BLACK_HAND\",\"unlockedOn\":1700598615372},{\"ID\":\"NITESEC\",\"unlockedOn\":1700599695385},{\"ID\":\"HTTPWORM.EXE\",\"unlockedOn\":1700599995381},{\"ID\":\"SQLINJECT.EXE\",\"unlockedOn\":1700599995395},{\"ID\":\"4S\",\"unlockedOn\":1700600115369},{\"ID\":\"30_HACKNET_NODE\",\"unlockedOn\":1700644911385},{\"ID\":\"BITRUNNERS\",\"unlockedOn\":1700689671376}],\"terminalCommandHistory\":[\"backdoor \",\"go\",\"home\",\"go\",\"sa 5\",\"home\",\"sa 5\",\"go\",\"hoome\",\"home\",\"go\",\"connect darkweb \",\"buy -l\",\"buy HTTPWorm.exe \",\"buy SQLInject.exe \",\"buy DeepscanV2.exe \",\"clear\",\"sa 10\",\"home\",\"go\",\"backdoor \",\"home\",\"go\",\"ls\",\"go\",\"clear\",\"go\",\"run tasks/netmap.js \",\"run server-mgr.js \",\"go\",\"run tasks/netmap.js \",\"run ./tasks/netmap.js \",\"run /tasks/netmap.js \",\"go\",\"ls\",\"rm weaken.js \",\"rm server-mgr.js \",\"rm deployer-basic.js \",\"rm grow.js \",\"rm hack\",\"rm hack.js\",\"rm hacknet-mgr.js \",\"rm netmap\",\"rm netmap.js\",\"ls\",\"rm overview.js \",\"rm nuker.js \",\"ls\",\"go\",\"clear\"],\"lastUpdate\":1700782874417,\"lastSave\":1700782836219,\"totalPlaytime\":334656600,\"currentWork\":{\"ctor\":\"FactionWork\",\"data\":{\"type\":\"FACTION\",\"singularity\":false,\"cyclesWorked\":1147,\"factionWorkType\":\"hacking\",\"factionName\":\"The Black Hand\"}},\"focus\":false,\"entropy\":0,\"identifier\":\"64592dbed27ac\"}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":2,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"33.8.5.9\",\"isConnectedTo\":true,\"maxRam\":8192,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\",\"csec-test.msg\",\"j2.msg\",\"nitesec-test.msg\",\"j3.msg\",\"j4.msg\",\"19dfj3l1nd.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"relaySMTP.exe\",\"AutoLink.exe\",\"DeepscanV1.exe\",\"HTTPWorm.exe\",\"SQLInject.exe\",\"DeepscanV2.exe\"],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"startup.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns */\\nimport { NETWORK_MAP, HOME, SCRIPTS, EMPTY_PORT_STRING, PORTS } from './config';\\n\\nexport async function main(ns) {\\n  const networkMap = await JSON.parse(ns.read(NETWORK_MAP));\\n  const newTargets = [];\\n\\n  // Functions\\n  const getTarget = () => {\\n    const bestTarget = { host: '', score: 0 };\\n    const indexPort = PORTS.DEPLOYER.index;\\n    const portMin = PORTS.DEPLOYER.min;\\n    const portMax = PORTS.DEPLOYER.max;\\n    const indexPortData = ns.peek(indexPort);\\n    const deployerTargetList = [];\\n\\n    const playerHackLevel = ns.getHackingLevel();\\n\\n    if (typeof indexPortData === 'number' && indexPortData > 0) {\\n      var found = 0;\\n      for (let p = portMin; p <= portMax; p++) {\\n        const port = ns.getPortHandle(p);\\n\\n        if (!port.empty()) {\\n          deployerTargetList.push(port.peek());\\n          if (found >= indexPortData) {\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    for (let node in networkMap) {\\n      if (\\n        node !== HOME &&\\n        !deployerTargetList.includes(node) &&\\n        networkMap[node].root &&\\n        networkMap[node].maxMoney > 0 &&\\n        networkMap[node].hackLevel <= playerHackLevel\\n      ) {\\n        const currentNodeScore = networkMap[node].score;\\n        if (currentNodeScore > bestTarget.score) {\\n          bestTarget.host = node;\\n          bestTarget.score = currentNodeScore;\\n        }\\n      }\\n    }\\n\\n    return bestTarget.host;\\n  };\\n\\n  const getFreePort = (min) => {\\n    let result;\\n    for (let p = min; p <= PORTS.DEPLOYER.max; p++) {\\n      if (ns.peek(p) === EMPTY_PORT_STRING) {\\n        result = p;\\n        break;\\n      }\\n    }\\n    return result;\\n  };\\n\\n  // overview\\n  if (ns.run(SCRIPTS.overview, { preventDuplicates: true })) {\\n    ns.tprint(`Overview started.`);\\n  }\\n\\n  // netmap & nuker\\n  if (ns.run(SCRIPTS.netmap, { preventDuplicates: true })) {\\n    ns.tprint(`Netmapper started.`);\\n  }\\n\\n  // hacknet manager\\n  /* if (ns.run(SCRIPTS.hacknet, { preventDuplicates: true })) {\\n    ns.tprint(`Hacknet manager started.`);\\n  } */\\n\\n  // server manager\\n  if (ns.run(SCRIPTS.server, { preventDuplicates: true })) {\\n    ns.tprint(`Server manager started.`);\\n  }\\n\\n  // Deployers\\n  while (getTarget()) {\\n    const deployerTarget = getTarget();\\n    const indexPortData = ns.peek(PORTS.DEPLOYER.index);\\n    const firstFreePort = getFreePort(PORTS.DEPLOYER.min);\\n\\n    if (firstFreePort && ns.tryWritePort(firstFreePort, deployerTarget)) {\\n      ns.run(SCRIPTS.deployer, 1, firstFreePort, deployerTarget);\\n      newTargets.push(deployerTarget);\\n\\n      if (typeof indexPortData === 'number') {\\n        ns.clearPort(PORTS.DEPLOYER.index);\\n        ns.tryWritePort(PORTS.DEPLOYER.index, indexPortData + 1);\\n      } else {\\n        ns.tryWritePort(PORTS.DEPLOYER.index, 1);\\n      }\\n    }\\n  }\\n\\n  if (newTargets.length) {\\n    ns.tprint(`Started ${newTargets.length} new deployers.`);\\n  } else {\\n    ns.tprint(`No new targets found.`);\\n  }\\n}\\n\",\"filename\":\"startup.js\",\"server\":\"home\"}}],[\"config.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"// netmap\\nexport const NETWORK_MAP = 'network_map.txt';\\nexport const NETMAP_INTERVAL = 30 * 1000;\\n\\n// GAME INFO\\nexport const ACCESS_EXES = [\\n  'BruteSSH.exe',\\n  'FTPCrack.exe',\\n  'relaySMTP.exe',\\n  'HTTPWorm.exe',\\n  'SQLInject.exe',\\n];\\nexport const RAM_PRICE_PER_GB = 55000;\\nexport const EMPTY_PORT_STRING = 'NULL PORT DATA';\\nexport const HOME = 'home';\\n\\n// PLAYER INFO\\nexport const SCRIPTS = {\\n  hack: '/workers/hack.js',\\n  grow: '/workers/grow.js',\\n  weaken: '/workers/weaken.js',\\n  nuker: '/tasks/nuker.js',\\n  netmap: '/tasks/netmap.js',\\n  deployer: '/tasks/deployer-basic.js',\\n  hacknet: '/tasks/hacknet-mgr.js',\\n  server: '/tasks/server-mgr.js',\\n  overview: '/ui/overview.js',\\n};\\n\\n// Ports\\nexport const PORTS = {\\n  STATUS: 1,\\n  MISSING_RAM: 2,\\n  HACKNET: 3,\\n  PSERVERS: 4,\\n  DEPLOYER: { index: 100, min: 101, max: 200 },\\n};\\n\\n// DEPLOYER SETTINGS\\nexport const HACK_PERCENT = 0.35;\\nexport const SLEEP_PADDING = 100;\\nexport const TICK_INTERVAL = 500;\\nexport const BASE_WIDTH = 50;\\nexport const SEC_TOLERANCE = 0.1;\\nexport const MONEY_TOLERANCE = 0.15;\\n\\n// PROGRESS BARS\\nexport const PBAR_LENGTH = BASE_WIDTH - 9;\\nexport const PBAR_INACTIVE_CHAR = ' ';\\nexport const PBAR_ACTIVE_CHAR = '+';\\n\\n// DEBUG\\nexport const DISABLE_LOGGING = 'ALL';\\nexport const LOG_LEVEL = 'NONE';\\n\",\"filename\":\"config.js\",\"server\":\"home\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"home\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"home\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"home\"}}],[\"tasks/hacknet-mgr.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  function myMoney() {\\n    return ns.getServerMoneyAvailable('home');\\n  }\\n\\n  // Don't spend more than this percent of total money\\n  const MONEY_USED = 0.25;\\n  var nodes = 0;\\n  var ref = 0;\\n\\n  ns.disableLog('ALL');\\n\\n  while (true) {\\n    await ns.sleep(5000);\\n\\n    //buy a node if we have more than twice the money needed\\n    if (ns.hacknet.getPurchaseNodeCost() < myMoney() * MONEY_USED) {\\n      ref = ns.hacknet.purchaseNode();\\n      ns.print('bought node hn-' + ref);\\n    }\\n    nodes = ns.hacknet.numNodes();\\n\\n    for (var i = 0; i < nodes; i++) {\\n      //check if nodes level is a multiple of 10\\n      var mod = ns.hacknet.getNodeStats(i).level % 10;\\n\\n      //buy level node to the nearest multiple of 10 if we have double the money needed\\n      if (\\n        ns.hacknet.getLevelUpgradeCost(i, 10 - mod) <\\n        myMoney() * MONEY_USED\\n      ) {\\n        ns.hacknet.upgradeLevel(i, 10 - mod);\\n        ns.print('node hn-' + i + ' leveled up');\\n      }\\n\\n      //same for ram\\n      if (ns.hacknet.getRamUpgradeCost(i) < myMoney() * MONEY_USED) {\\n        ns.hacknet.upgradeRam(i);\\n        ns.print('node hn-' + i + ' ram upgraded');\\n      }\\n\\n      //and cores\\n      if (ns.hacknet.getCoreUpgradeCost(i) < myMoney() * MONEY_USED) {\\n        ns.hacknet.upgradeCore(i);\\n        ns.print('node hn-' + i + ' core upgraded');\\n      }\\n    }\\n  }\\n}\\n\",\"filename\":\"tasks/hacknet-mgr.js\",\"server\":\"home\"}}],[\"tasks/netmap.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {\\n  HOME,\\n  NETWORK_MAP,\\n  NETMAP_INTERVAL,\\n  DISABLE_LOGGING,\\n  SCRIPTS,\\n} from '/config.js';\\n\\nexport async function main(ns) {\\n  ns.disableLog(DISABLE_LOGGING);\\n\\n  const argData = ns.flags([\\n    ['daemon', true],\\n    ['nuke', true],\\n  ]);\\n\\n  const scanHost = (host, currentData = {}) => {\\n    const myConnections = ns.scan(host);\\n    const currentMoney = ns.getServerMoneyAvailable(host);\\n    const maxMoney = ns.getServerMaxMoney(host);\\n    const hackTime = ns.getHackTime(host);\\n    const growth = ns.getServerGrowth(host);\\n    const score = (maxMoney / hackTime) * (ns.hackAnalyzeChance(host) ^ 2);\\n\\n    let newData = {\\n      ...currentData,\\n      [host]: {\\n        connections: myConnections,\\n        root: ns.hasRootAccess(host),\\n        currentMoney,\\n        maxMoney,\\n        hackLevel: ns.getServerRequiredHackingLevel(host),\\n        hackTime,\\n        minSecurity: ns.getServerMinSecurityLevel(host),\\n        growth,\\n        ports: ns.getServerNumPortsRequired(host),\\n        score,\\n      },\\n    };\\n\\n    myConnections\\n      .filter((node) => !newData[node]) // prevent infinite looping...\\n      .forEach((node) => {\\n        newData = scanHost(node, newData);\\n      });\\n\\n    return newData;\\n  };\\n\\n  const run = async () => {\\n    const data = scanHost(HOME);\\n    await ns.write(NETWORK_MAP, JSON.stringify(data, null, 2), 'w');\\n    ns.print(`netmap complete! ${Object.keys(data).length} nodes profiled.`);\\n  };\\n\\n  if (argData.daemon) {\\n    while (true) {\\n      await run();\\n      if (argData.nuke) {\\n        ns.run(SCRIPTS.nuker, { preventDuplicates: true });\\n      }\\n      await ns.sleep(NETMAP_INTERVAL || 30000);\\n    }\\n  } else {\\n    await run();\\n    if (argData.nuke) {\\n      ns.run(SCRIPTS.nuker, { preventDuplicates: true });\\n    }\\n  }\\n}\\n\",\"filename\":\"tasks/netmap.js\",\"server\":\"home\"}}],[\"tasks/nuker.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n  HOME,\\n  NETWORK_MAP,\\n  NETMAP_INTERVAL,\\n  ACCESS_EXES,\\n  DISABLE_LOGGING,\\n} from '/config.js';\\n/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  ns.disableLog(DISABLE_LOGGING);\\n\\n  const argData = ns.flags([['daemon', false]]);\\n\\n  const checkForRoots = async () => {\\n    const networkMap = await JSON.parse(ns.read(NETWORK_MAP));\\n    const playerHackLevel = ns.getHackingLevel();\\n    const playerExes = [];\\n    const newRootedNodes = [];\\n    var playerRootLevel = 0;\\n\\n    for (let i in ACCESS_EXES) {\\n      if (ns.fileExists(ACCESS_EXES[i], HOME)) {\\n        playerRootLevel += 1;\\n        playerExes.push(ACCESS_EXES[i]);\\n      }\\n    }\\n\\n    for (let node in networkMap) {\\n      if (node !== 'home' && !networkMap[node].root) {\\n        if (\\n          networkMap[node].ports <= playerRootLevel &&\\n          networkMap[node].hackLevel <= playerHackLevel\\n        ) {\\n          if (playerExes.includes(ACCESS_EXES[0])) {\\n            ns.brutessh(node);\\n          }\\n          if (playerExes.includes(ACCESS_EXES[1])) {\\n            ns.ftpcrack(node);\\n          }\\n          if (playerExes.includes(ACCESS_EXES[2])) {\\n            ns.relaysmtp(node);\\n          }\\n          if (playerExes.includes(ACCESS_EXES[3])) {\\n            ns.httpworm(node);\\n          }\\n          if (playerExes.includes(ACCESS_EXES[4])) {\\n            ns.sqlinject(node);\\n          }\\n\\n          ns.nuke(node);\\n          newRootedNodes.push(node);\\n        }\\n      }\\n    }\\n\\n    const newNodesNum = newRootedNodes.length;\\n    if (newNodesNum > 0) {\\n      ns.tprint(\\n        `${newNodesNum} new node(s) rooted: ${newRootedNodes.join(', ')}`\\n      );\\n      ns.toast(`${newNodesNum} new node(s) rooted!`, 'success');\\n    }\\n  };\\n\\n  if (argData.daemon) {\\n    while (true) {\\n      await checkForRoots();\\n      await ns.sleep(NETMAP_INTERVAL || 30000);\\n    }\\n  } else {\\n    await checkForRoots();\\n  }\\n}\\n\",\"filename\":\"tasks/nuker.js\",\"server\":\"home\"}}],[\"tasks/server-mgr.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { RAM_PRICE_PER_GB, PORTS } from '/config.js';\\n\\nexport async function main(ns) {\\n  ns.disableLog('ALL');\\n\\n  const MONEY_USED = 0.75;\\n  const servers = { total: { ram: 0, cost: 0, nodes: 0 } };\\n  const buyInfo = {\\n    maxServers: ns.getPurchasedServerLimit(),\\n    maxRam: ns.getPurchasedServerMaxRam(),\\n  };\\n\\n  const myMoney = () => {\\n    return ns.getServerMoneyAvailable('home');\\n  };\\n\\n  const getRamNeeded = () => {\\n    const port = ns.getPortHandle(PORTS.MISSING_RAM);\\n\\n    if (!port.empty()) {\\n      return Number(port.peek());\\n    } else {\\n      return 0;\\n    }\\n  };\\n\\n  const updateRamNeeded = (ramAdded) => {\\n    const port = ns.getPortHandle(PORTS.MISSING_RAM);\\n\\n    if (!port.empty()) {\\n      const oldValue = port.read();\\n      const newValue = Math.max(oldValue - ramAdded, 0);\\n      port.clear();\\n      if (newValue > 0) {\\n        port.tryWrite(newValue);\\n      }\\n    }\\n  };\\n\\n  const refreshPurchasedServers = () => {\\n    servers.total.ram = 0;\\n    ns.getPurchasedServers().forEach((server) => {\\n      if (server !== 'total') {\\n        const ram = ns.getServerMaxRam(server);\\n        servers[server] = { ram };\\n        servers.total.ram += ram;\\n      }\\n    });\\n    servers.total.cost = servers.total.ram * RAM_PRICE_PER_GB;\\n    // Subtract 1 to ignore the 'total' key\\n    servers.total.nodes = Object.keys(servers).length - 1;\\n  };\\n\\n  const refreshBuyInfo = () => {\\n    buyInfo.maxServers = ns.getPurchasedServerLimit() || 0;\\n    buyInfo.maxRam = ns.getPurchasedServerMaxRam() || 2;\\n  };\\n\\n  const isAbleToPurchase = () => {\\n    // Subtract 1 for the 'total' key\\n    const numPurchasedServers = Object.keys(servers).length - 1;\\n    return numPurchasedServers < buyInfo.maxServers;\\n  };\\n\\n  const checkPurchases = (maxRam, maxMoney) => {\\n    const best = { ram: -1, cost: -1, ratio: -1 };\\n    for (let ram = maxRam; ram >= 2; ram /= 2) {\\n      const cost = ns.getPurchasedServerCost(ram);\\n\\n      if (cost < maxMoney) {\\n        best.ram = ram;\\n        best.cost = cost;\\n        best.ratio = ram / cost;\\n        break;\\n      }\\n    }\\n\\n    return best;\\n  };\\n\\n  const checkUpgrades = (maxRam, maxMoney) => {\\n    const best = { name: '', ram: -1, cost: -1, ratio: -1 };\\n\\n    for (const server in servers) {\\n      if (server !== 'total') {\\n        const currentRam = servers[server].ram;\\n        for (let ram = currentRam * 2; ram <= maxRam; ram *= 2) {\\n          const cost = ns.getPurchasedServerUpgradeCost(server, ram);\\n          if (cost < maxMoney) {\\n            best.name = server;\\n            best.ram = ram;\\n            best.cost = cost;\\n            best.ratio = (ram - currentRam) / cost;\\n          } else if (cost > maxMoney) {\\n            break;\\n          }\\n        }\\n      }\\n    }\\n\\n    return best;\\n  };\\n\\n  ns.clearPort(PORTS.MISSING_RAM);\\n  refreshPurchasedServers();\\n  ns.clearLog();\\n  ns.print(\\n    `> Total Server Ram: ${ns.formatRam(servers.total.ram, 0)} across ${\\n      servers.total.nodes\\n    } servers`\\n  );\\n  ns.print(`> Ram Requested: ${ns.formatRam(getRamNeeded())}`);\\n  ns.print(`> Total spent: ${ns.formatNumber(servers.total.cost)}`);\\n  // ns.tail();\\n\\n  while (true) {\\n    await ns.sleep(5000);\\n    refreshBuyInfo();\\n    refreshPurchasedServers();\\n\\n    if (getRamNeeded() > 0) {\\n      const bestAffordable = {};\\n\\n      const upgradeResult = checkUpgrades(\\n        buyInfo.maxRam,\\n        myMoney() * MONEY_USED\\n      );\\n      if (upgradeResult.cost > 0) {\\n        bestAffordable.upgrade = upgradeResult;\\n      }\\n\\n      if (isAbleToPurchase()) {\\n        const purchaseResult = checkPurchases(\\n          buyInfo.maxRam,\\n          myMoney() * MONEY_USED\\n        );\\n\\n        if (purchaseResult.cost > 0) {\\n          bestAffordable.purchased = purchaseResult;\\n        }\\n      }\\n\\n      // If both are affordable, upgrade first. Otherwise,\\n      // purchase a new server.\\n      if (bestAffordable.purchased && bestAffordable.upgrade) {\\n        const { upgrade } = bestAffordable;\\n\\n        updateRamNeeded(upgrade.ram - ns.getServerMaxRam(upgrade.name));\\n        ns.upgradePurchasedServer(upgrade.name, upgrade.ram);\\n      } else if (bestAffordable.purchased || bestAffordable.upgrade) {\\n        const option = bestAffordable.purchased\\n          ? bestAffordable.purchased\\n          : bestAffordable.upgrade;\\n\\n        if (option.name) {\\n          updateRamNeeded(option.ram - ns.getServerMaxRam(option.name));\\n          ns.upgradePurchasedServer(option.name, option.ram);\\n        } else {\\n          ns.purchaseServer(`pserv-0`, option.ram);\\n          updateRamNeeded(option.ram);\\n        }\\n      }\\n    }\\n\\n    ns.clearLog();\\n    ns.print(\\n      `> Total Server Ram: ${ns.formatRam(servers.total.ram, 0)} in ${\\n        servers.total.nodes\\n      }/${buyInfo.maxServers} servers.`\\n    );\\n    ns.print(`> Ram Requested: ${ns.formatRam(getRamNeeded())}`);\\n    ns.print(`> Total spent: ${ns.formatNumber(servers.total.cost)}`);\\n  }\\n}\\n\",\"filename\":\"tasks/server-mgr.js\",\"server\":\"home\"}}],[\"tasks/deployer-basic.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport {\\n  HOME,\\n  NETWORK_MAP,\\n  DISABLE_LOGGING,\\n  SCRIPTS,\\n  HACK_PERCENT,\\n  SLEEP_PADDING,\\n  LOG_LEVEL,\\n  TICK_INTERVAL,\\n  PBAR_LENGTH,\\n  PBAR_ACTIVE_CHAR,\\n  PBAR_INACTIVE_CHAR,\\n  BASE_WIDTH,\\n  SEC_TOLERANCE,\\n  MONEY_TOLERANCE,\\n  PORTS,\\n} from '/config.js';\\n\\nexport async function main(ns) {\\n  ns.disableLog(DISABLE_LOGGING);\\n\\n  var networkMap = {};\\n  var activeTarget = {};\\n  var currentTask = {\\n    active: false,\\n    type: '',\\n    duration: 0,\\n    expires: 0,\\n    tracer: {},\\n  };\\n\\n  ns.atExit(() => {\\n    const indexPort = PORTS.DEPLOYER.index;\\n    const oldValue = ns.readPort(indexPort);\\n    ns.clearPort(indexPort);\\n    ns.tryWritePort(indexPort, oldValue - 1);\\n    ns.clearPort(ns.args[0]);\\n    ns.closeTail();\\n  });\\n\\n  const addMissingRam = (val) => {\\n    const port = ns.getPortHandle(PORTS.MISSING_RAM);\\n\\n    if (port.empty()) {\\n      port.tryWrite(val);\\n    } else {\\n      const oldValue = port.peek();\\n      if (oldValue < val) {\\n        port.clear();\\n        port.tryWrite(val);\\n      }\\n    }\\n  };\\n\\n  const calcHackThreads = (nodeData) => {\\n    const { maxMoney, hackTime, name } = nodeData;\\n    const moneyTarget = maxMoney * HACK_PERCENT;\\n    const threadRam = ns.getScriptRam(SCRIPTS.hack, HOME);\\n\\n    const threads = Math.ceil(ns.hackAnalyzeThreads(name, moneyTarget));\\n    const totalRam = threads * threadRam;\\n    const securityIncrease = ns.hackAnalyzeSecurity(threads, name);\\n\\n    return { threads, threadRam, totalRam, time: hackTime, securityIncrease };\\n  };\\n\\n  const calcGrowThreads = (nodeData) => {\\n    const { currentMoney, maxMoney, growTime, name } = nodeData;\\n    const deltaMult = maxMoney / currentMoney;\\n    const threadRam = ns.getScriptRam(SCRIPTS.grow, HOME);\\n\\n    const threads = Math.ceil(ns.growthAnalyze(name, deltaMult));\\n    const totalRam = threads * threadRam;\\n    const securityIncrease = ns.growthAnalyzeSecurity(threads, name);\\n\\n    return { threads, threadRam, totalRam, time: growTime, securityIncrease };\\n  };\\n\\n  const calcWeakenThreads = (nodeData) => {\\n    const { currentSecurity, minSecurity, weakenTime } = nodeData;\\n    const securityDelta = currentSecurity - minSecurity;\\n    const threadRam = ns.getScriptRam(SCRIPTS.weaken, HOME);\\n    const weakenEffect = ns.weakenAnalyze(1);\\n\\n    const threads = Math.ceil(securityDelta / weakenEffect);\\n    const totalRam = threads * threadRam;\\n\\n    return { threads, threadRam, time: weakenTime, totalRam };\\n  };\\n\\n  const distribute = async (script, threadData) => {\\n    const { threads, threadRam } = threadData;\\n    var threadsRemaining = threads;\\n\\n    // try all servers except for home\\n    for (let node in networkMap) {\\n      if (node !== HOME && networkMap[node].root) {\\n        if (threadsRemaining >= 1) {\\n          const maxRam = ns.getServerMaxRam(node);\\n          const usedRam = ns.getServerUsedRam(node);\\n          const freeRam = maxRam - usedRam;\\n          const possibleThreads = Math.floor(freeRam / threadRam);\\n\\n          if (possibleThreads >= 1) {\\n            const actualThreads = Math.min(possibleThreads, threadsRemaining);\\n\\n            await ns.scp(script, node, HOME);\\n            const pid = ns.exec(script, node, actualThreads, activeTarget.name);\\n            if (LOG_LEVEL > 0) {\\n              ns.print(\\n                `${script}: Sent ${actualThreads}/${threadsRemaining} threads to ${node} (PID ${pid}).`\\n              );\\n            }\\n            threadsRemaining -= actualThreads;\\n            currentTask.tracer = { node, pid, arg: activeTarget.name };\\n          }\\n        } else {\\n          // No threads left to distro, so\\n          break;\\n        }\\n      }\\n    }\\n\\n    // if we have threads left, dump them onto HOME\\n    // This is good for early game but could be problematic later\\n    if (threadsRemaining >= 1) {\\n      const maxRam = ns.getServerMaxRam(HOME);\\n      const usedRam = ns.getServerUsedRam(HOME);\\n      const freeRam = maxRam - usedRam;\\n      const possibleThreads = Math.floor(freeRam / threadRam);\\n\\n      // Send low RAM signal, we don't want to use home Ram too much\\n      addMissingRam(threadsRemaining * threadRam);\\n\\n      if (possibleThreads >= 1) {\\n        const actualThreads = Math.min(possibleThreads, threadsRemaining);\\n\\n        const pid = ns.exec(script, HOME, actualThreads, activeTarget.name);\\n        if (LOG_LEVEL > 0) {\\n          ns.print(\\n            `OVERFLOW: ${script}: Sent ${actualThreads}/${threadsRemaining} threads to ${HOME}`\\n          );\\n        }\\n        threadsRemaining -= actualThreads;\\n        currentTask.tracer = { node: HOME, pid, arg: activeTarget.name };\\n      }\\n    }\\n\\n    // If we still have threads left, just skip them and request\\n    // the deficit RAM from the server manager\\n    if (threadsRemaining >= 1) {\\n      // Send low RAM signal\\n      addMissingRam(threadsRemaining * threadRam);\\n\\n      if (LOG_LEVEL > 0) {\\n        ns.print(\\n          `> Distributed ${\\n            threads - threadsRemaining\\n          } ${script} threads (${threadsRemaining}/${threads} remaining).`\\n        );\\n      }\\n    }\\n\\n    if (LOG_LEVEL > 0) {\\n      ns.print(`> Disributed all ${script} threads (${threads} total).`);\\n    }\\n\\n    const result = { threads, threadsRemaining };\\n    return result;\\n  };\\n\\n  const refreshTargetData = () => {\\n    const host = ns.args[1];\\n\\n    const currentMoney = ns.getServerMoneyAvailable(host);\\n    const maxMoney = ns.getServerMaxMoney(host);\\n    const currentSecurity = ns.getServerSecurityLevel(host);\\n    const minSecurity = ns.getServerMinSecurityLevel(host);\\n    const hackTime = ns.getHackTime(host);\\n    const growTime = ns.getGrowTime(host);\\n    const weakenTime = ns.getWeakenTime(host);\\n\\n    activeTarget = {\\n      name: host,\\n      currentMoney,\\n      maxMoney,\\n      currentSecurity,\\n      minSecurity,\\n      hackTime,\\n      growTime,\\n      weakenTime,\\n    };\\n\\n    activeTarget.hackThreadData = calcHackThreads(activeTarget);\\n    activeTarget.growThreadData = calcGrowThreads(activeTarget);\\n    activeTarget.weakenThreadData = calcWeakenThreads(activeTarget);\\n  };\\n\\n  const printStatus = () => {\\n    if (currentTask.type) {\\n      const { currentMoney, maxMoney, minSecurity, currentSecurity, name } =\\n        activeTarget;\\n      const { duration, type, threadInfo } = currentTask;\\n      const { threads, threadsRemaining } = threadInfo;\\n      const timeLeft = Math.max(currentTask.expires - Date.now(), 0);\\n      const progress = Math.abs(100 - Math.round((100 * timeLeft) / duration));\\n      const progressString = `${progress}%`;\\n      const barSubstring = `${PBAR_INACTIVE_CHAR.repeat(PBAR_LENGTH)}`;\\n      const progressBar = `[${barSubstring}] ${progressString.padStart(\\n        4,\\n        ' '\\n      )}`;\\n\\n      // Text\\n      const statusStrings = {\\n        task: { label: 'Task', sub: `${type} ${name}` },\\n        threads: {\\n          label: 'Threads',\\n          sub: `${\\n            threads - threadsRemaining\\n          } deployed | ${threadsRemaining} waiting`,\\n        },\\n        money: {\\n          label: 'Money',\\n          sub: `${ns.formatNumber(currentMoney)} / ${ns.formatNumber(\\n            maxMoney\\n          )}`,\\n        },\\n        security: {\\n          label: 'Security',\\n          sub: `${ns.formatNumber(currentSecurity)} / ${ns.formatNumber(\\n            minSecurity\\n          )}`,\\n        },\\n        baseTime: { label: 'Task Length', sub: `${ns.tFormat(duration || 0)}` },\\n        timeLeft: { label: 'Remaining', sub: `${ns.tFormat(timeLeft || 0)}` },\\n      };\\n\\n      const barFill = () => {\\n        const barProgress = Math.round(progress / (100 / PBAR_LENGTH));\\n        var bar = progressBar;\\n\\n        for (let i = 1; i <= barProgress; i++) {\\n          bar = bar.replace(PBAR_INACTIVE_CHAR, PBAR_ACTIVE_CHAR);\\n        }\\n\\n        return bar;\\n      };\\n\\n      ns.clearLog();\\n      ns.print(`> ${'-'.repeat(BASE_WIDTH - 2)}`);\\n      ns.print(\\n        `> ${statusStrings.task.label}${'.'.repeat(\\n          48 - statusStrings.task.label.length - statusStrings.task.sub.length\\n        )}${statusStrings.task.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.threads.label}${'.'.repeat(\\n          48 -\\n            statusStrings.threads.label.length -\\n            statusStrings.threads.sub.length\\n        )}${statusStrings.threads.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.money.label}${'.'.repeat(\\n          48 - statusStrings.money.label.length - statusStrings.money.sub.length\\n        )}${statusStrings.money.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.security.label}${'.'.repeat(\\n          48 -\\n            statusStrings.security.label.length -\\n            statusStrings.security.sub.length\\n        )}${statusStrings.security.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.baseTime.label}${'.'.repeat(\\n          48 -\\n            statusStrings.baseTime.label.length -\\n            statusStrings.baseTime.sub.length\\n        )}${statusStrings.baseTime.sub}`\\n      );\\n      ns.print(\\n        `> ${statusStrings.timeLeft.label}${'.'.repeat(\\n          48 -\\n            statusStrings.timeLeft.label.length -\\n            statusStrings.timeLeft.sub.length\\n        )}${statusStrings.timeLeft.sub}`\\n      );\\n      ns.print(`> ${barFill()}`);\\n      ns.print(`> ${'-'.repeat(BASE_WIDTH - 2)}`);\\n    }\\n  };\\n\\n  /* ns.tail();\\n  ns.resizeTail(500, 255);\\n  ns.setTitle(`Deployer-${ns.args[0]} | ${ns.args[1]}`); */\\n\\n  while (true) {\\n    if (!currentTask.active) {\\n      networkMap = await JSON.parse(ns.read(NETWORK_MAP));\\n      var sleepTime = SLEEP_PADDING;\\n      var result;\\n      refreshTargetData();\\n\\n      if (\\n        activeTarget.currentSecurity >\\n        activeTarget.minSecurity * (1 + SEC_TOLERANCE)\\n      ) {\\n        // Weaken\\n        sleepTime += activeTarget.weakenTime;\\n        currentTask.type = 'Weaken';\\n        result = await distribute(\\n          SCRIPTS.weaken,\\n          activeTarget.weakenThreadData\\n        );\\n      } else if (\\n        activeTarget.currentMoney <\\n        activeTarget.maxMoney * (1 - MONEY_TOLERANCE)\\n      ) {\\n        // Grow\\n        sleepTime += activeTarget.growTime;\\n        currentTask.type = 'Grow';\\n        result = await distribute(SCRIPTS.grow, activeTarget.growThreadData);\\n      } else {\\n        // Hack\\n        sleepTime += activeTarget.hackTime;\\n        currentTask.type = 'Hack';\\n        result = await distribute(SCRIPTS.hack, activeTarget.hackThreadData);\\n      }\\n      currentTask.threadInfo = result;\\n      currentTask.duration = sleepTime;\\n      currentTask.expires = Date.now() + sleepTime;\\n      currentTask.active = true;\\n    } else {\\n      currentTask.active = ns.isRunning(\\n        currentTask.tracer.pid,\\n        currentTask.tracer.node,\\n        currentTask.tracer.arg\\n      );\\n    }\\n    if (ns.getRunningScript().tailProperties) {\\n      printStatus();\\n    }\\n    await ns.sleep(TICK_INTERVAL);\\n  }\\n}\\n\",\"filename\":\"tasks/deployer-basic.js\",\"server\":\"home\"}}],[\"ui/overview.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\nimport { PORTS, EMPTY_PORT_STRING } from '/config.js';\\n\\nexport async function main(ns) {\\n  const doc = eval('document');\\n  const hookHeaders = doc.getElementById('overview-extra-hook-0');\\n  const hookValues = doc.getElementById('overview-extra-hook-1');\\n  while (true) {\\n    try {\\n      const headers = [];\\n      const values = [];\\n\\n      headers.push('Deploys');\\n      var numDeploys = ns.peek(PORTS.DEPLOYER.index);\\n      numDeploys = numDeploys === EMPTY_PORT_STRING ? 0 : numDeploys;\\n      values.push(numDeploys);\\n\\n      headers.push('Income');\\n      values.push(ns.formatNumber(ns.getTotalScriptIncome()[0], 1) + '/s');\\n\\n      headers.push('-');\\n      values.push('-');\\n\\n      headers.push('RamDfct');\\n      var missingRam = ns.peek(PORTS.MISSING_RAM);\\n      missingRam = missingRam === EMPTY_PORT_STRING ? 0 : missingRam;\\n      values.push(ns.formatRam(missingRam));\\n\\n      hookHeaders.innerText = headers.join(' \\\\n');\\n      hookValues.innerText = values.join('\\\\n');\\n    } catch (err) {\\n      ns.print('ERROR: Update Skipped: ' + String(err));\\n    }\\n    await ns.sleep(1000);\\n  }\\n}\\n\",\"filename\":\"ui/overview.js\",\"server\":\"home\"}}]]},\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"pserv-0\",\"pserv-1\",\"pserv-2\",\"pserv-3\",\"pserv-4\",\"pserv-5\",\"pserv-6\",\"pserv-7\",\"pserv-8\",\"darkweb\",\"pserv-9\",\"pserv-10\",\"pserv-11\",\"pserv-12\",\"pserv-13\",\"pserv-14\",\"pserv-15\",\"pserv-16\",\"pserv-17\",\"pserv-18\",\"pserv-19\",\"pserv-20\",\"pserv-21\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[[\"network_map.txt\",{\"ctor\":\"TextFile\",\"data\":{\"filename\":\"network_map.txt\",\"text\":\"{\\n  \\\"home\\\": {\\n    \\\"connections\\\": [\\n      \\\"n00dles\\\",\\n      \\\"foodnstuff\\\",\\n      \\\"sigma-cosmetics\\\",\\n      \\\"joesguns\\\",\\n      \\\"hong-fang-tea\\\",\\n      \\\"harakiri-sushi\\\",\\n      \\\"iron-gym\\\",\\n      \\\"pserv-0\\\",\\n      \\\"pserv-1\\\",\\n      \\\"pserv-2\\\",\\n      \\\"pserv-3\\\",\\n      \\\"pserv-4\\\",\\n      \\\"pserv-5\\\",\\n      \\\"pserv-6\\\",\\n      \\\"pserv-7\\\",\\n      \\\"pserv-8\\\",\\n      \\\"darkweb\\\",\\n      \\\"pserv-9\\\",\\n      \\\"pserv-10\\\",\\n      \\\"pserv-11\\\",\\n      \\\"pserv-12\\\",\\n      \\\"pserv-13\\\",\\n      \\\"pserv-14\\\",\\n      \\\"pserv-15\\\",\\n      \\\"pserv-16\\\",\\n      \\\"pserv-17\\\",\\n      \\\"pserv-18\\\",\\n      \\\"pserv-19\\\",\\n      \\\"pserv-20\\\",\\n      \\\"pserv-21\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 5452044817640.14,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"n00dles\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"max-hardware\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1136009.3131881105,\\n    \\\"maxMoney\\\": 1750000,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2117.014502847143,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 3000,\\n    \\\"ports\\\": 0,\\n    \\\"score\\\": 2479.9074323484083\\n  },\\n  \\\"max-hardware\\\": {\\n    \\\"connections\\\": [\\n      \\\"n00dles\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 172490094.9147464,\\n    \\\"maxMoney\\\": 250000000,\\n    \\\"hackLevel\\\": 80,\\n    \\\"hackTime\\\": 6392.417356053434,\\n    \\\"minSecurity\\\": 5,\\n    \\\"growth\\\": 30,\\n    \\\"ports\\\": 1,\\n    \\\"score\\\": 117326.50705132257\\n  },\\n  \\\"foodnstuff\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"CSEC\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 34075875.29317472,\\n    \\\"maxMoney\\\": 50000000,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2137.9646190173444,\\n    \\\"minSecurity\\\": 3,\\n    \\\"growth\\\": 5,\\n    \\\"ports\\\": 0,\\n    \\\"score\\\": 70160.1881835366\\n  },\\n  \\\"CSEC\\\": {\\n    \\\"connections\\\": [\\n      \\\"foodnstuff\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 60,\\n    \\\"hackTime\\\": 2737.201107664514,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 1,\\n    \\\"score\\\": 0\\n  },\\n  \\\"sigma-cosmetics\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 57500000,\\n    \\\"maxMoney\\\": 57500000,\\n    \\\"hackLevel\\\": 5,\\n    \\\"hackTime\\\": 2426.84461284163,\\n    \\\"minSecurity\\\": 3,\\n    \\\"growth\\\": 10,\\n    \\\"ports\\\": 0,\\n    \\\"score\\\": 71079.95258007768\\n  },\\n  \\\"joesguns\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 43171771.147359446,\\n    \\\"maxMoney\\\": 62500000,\\n    \\\"hackLevel\\\": 10,\\n    \\\"hackTime\\\": 2640.556853170821,\\n    \\\"minSecurity\\\": 5,\\n    \\\"growth\\\": 20,\\n    \\\"ports\\\": 0,\\n    \\\"score\\\": 71007.74966266949\\n  },\\n  \\\"hong-fang-tea\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"nectar-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 75000000,\\n    \\\"maxMoney\\\": 75000000,\\n    \\\"hackLevel\\\": 30,\\n    \\\"hackTime\\\": 4204.551455304052,\\n    \\\"minSecurity\\\": 5,\\n    \\\"growth\\\": 20,\\n    \\\"ports\\\": 0,\\n    \\\"score\\\": 53513.43713873734\\n  },\\n  \\\"nectar-net\\\": {\\n    \\\"connections\\\": [\\n      \\\"hong-fang-tea\\\",\\n      \\\"neo-net\\\",\\n      \\\"silver-helix\\\",\\n      \\\"phantasy\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 47348359.887623124,\\n    \\\"maxMoney\\\": 68750000,\\n    \\\"hackLevel\\\": 20,\\n    \\\"hackTime\\\": 3597.524471196606,\\n    \\\"minSecurity\\\": 7,\\n    \\\"growth\\\": 25,\\n    \\\"ports\\\": 0,\\n    \\\"score\\\": 57331.090212541974\\n  },\\n  \\\"neo-net\\\": {\\n    \\\"connections\\\": [\\n      \\\"nectar-net\\\",\\n      \\\"computek\\\",\\n      \\\"johnson-ortho\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 124598240.53755637,\\n    \\\"maxMoney\\\": 125000000,\\n    \\\"hackLevel\\\": 50,\\n    \\\"hackTime\\\": 6995.65436939642,\\n    \\\"minSecurity\\\": 8,\\n    \\\"growth\\\": 25,\\n    \\\"ports\\\": 1,\\n    \\\"score\\\": 53604.70660764715\\n  },\\n  \\\"computek\\\": {\\n    \\\"connections\\\": [\\n      \\\"neo-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 3877732582.697792,\\n    \\\"maxMoney\\\": 5746652375,\\n    \\\"hackLevel\\\": 326,\\n    \\\"hackTime\\\": 76759.03588673208,\\n    \\\"minSecurity\\\": 20,\\n    \\\"growth\\\": 57,\\n    \\\"ports\\\": 3,\\n    \\\"score\\\": 149732.2708294547\\n  },\\n  \\\"johnson-ortho\\\": {\\n    \\\"connections\\\": [\\n      \\\"neo-net\\\",\\n      \\\"catalyst\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 2028131778.726211,\\n    \\\"maxMoney\\\": 2053627950,\\n    \\\"hackLevel\\\": 275,\\n    \\\"hackTime\\\": 66487.14128999945,\\n    \\\"minSecurity\\\": 19,\\n    \\\"growth\\\": 38,\\n    \\\"ports\\\": 2,\\n    \\\"score\\\": 61775.19171842911\\n  },\\n  \\\"catalyst\\\": {\\n    \\\"connections\\\": [\\n      \\\"johnson-ortho\\\",\\n      \\\"lexo-corp\\\",\\n      \\\"alpha-ent\\\",\\n      \\\"millenium-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 5149369019.502605,\\n    \\\"maxMoney\\\": 8090405475,\\n    \\\"hackLevel\\\": 414,\\n    \\\"hackTime\\\": 98889.64372848984,\\n    \\\"minSecurity\\\": 22,\\n    \\\"growth\\\": 25,\\n    \\\"ports\\\": 3,\\n    \\\"score\\\": 163624.92916271221\\n  },\\n  \\\"lexo-corp\\\": {\\n    \\\"connections\\\": [\\n      \\\"catalyst\\\",\\n      \\\"aerocorp\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 17543486682.468075,\\n    \\\"maxMoney\\\": 17570530725,\\n    \\\"hackLevel\\\": 729,\\n    \\\"hackTime\\\": 210841.7796383694,\\n    \\\"minSecurity\\\": 24,\\n    \\\"growth\\\": 64,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 166670.29423804465\\n  },\\n  \\\"aerocorp\\\": {\\n    \\\"connections\\\": [\\n      \\\"lexo-corp\\\",\\n      \\\"deltaone\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1161572940,\\n    \\\"maxMoney\\\": 29039323500,\\n    \\\"hackLevel\\\": 855,\\n    \\\"hackTime\\\": 803210.6096510156,\\n    \\\"minSecurity\\\": 30,\\n    \\\"growth\\\": 64,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 72308.11732583363\\n  },\\n  \\\"deltaone\\\": {\\n    \\\"connections\\\": [\\n      \\\"aerocorp\\\",\\n      \\\"icarus\\\",\\n      \\\"zeus-med\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1598169506,\\n    \\\"maxMoney\\\": 39954237650,\\n    \\\"hackLevel\\\": 891,\\n    \\\"hackTime\\\": 799420.6388865571,\\n    \\\"minSecurity\\\": 28,\\n    \\\"growth\\\": 64,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 99957.98383601593\\n  },\\n  \\\"icarus\\\": {\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\",\\n      \\\"taiyang-digital\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 938454369,\\n    \\\"maxMoney\\\": 23461359225,\\n    \\\"hackLevel\\\": 891,\\n    \\\"hackTime\\\": 855701.7047387668,\\n    \\\"minSecurity\\\": 30,\\n    \\\"growth\\\": 85,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 54835.36866895085\\n  },\\n  \\\"taiyang-digital\\\": {\\n    \\\"connections\\\": [\\n      \\\"icarus\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 895359471,\\n    \\\"maxMoney\\\": 22383986775,\\n    \\\"hackLevel\\\": 947,\\n    \\\"hackTime\\\": 769774.645351237,\\n    \\\"minSecurity\\\": 26,\\n    \\\"growth\\\": 80,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 58157.24617634428\\n  },\\n  \\\"zeus-med\\\": {\\n    \\\"connections\\\": [\\n      \\\"deltaone\\\",\\n      \\\"nova-med\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1417164268,\\n    \\\"maxMoney\\\": 35429106700,\\n    \\\"hackLevel\\\": 843,\\n    \\\"hackTime\\\": 694343.6994419437,\\n    \\\"minSecurity\\\": 26,\\n    \\\"growth\\\": 79,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 102050.63206730328\\n  },\\n  \\\"nova-med\\\": {\\n    \\\"connections\\\": [\\n      \\\"zeus-med\\\",\\n      \\\"microdyne\\\",\\n      \\\"applied-energetics\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1110835337,\\n    \\\"maxMoney\\\": 27770883425,\\n    \\\"hackLevel\\\": 815,\\n    \\\"hackTime\\\": 559810.2650002328,\\n    \\\"minSecurity\\\": 22,\\n    \\\"growth\\\": 67,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 99215.34191584875\\n  },\\n  \\\"microdyne\\\": {\\n    \\\"connections\\\": [\\n      \\\"nova-med\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 605421130,\\n    \\\"maxMoney\\\": 15135528250,\\n    \\\"hackLevel\\\": 823,\\n    \\\"hackTime\\\": 625934.7271434667,\\n    \\\"minSecurity\\\": 24,\\n    \\\"growth\\\": 80,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 48361.36291422245\\n  },\\n  \\\"applied-energetics\\\": {\\n    \\\"connections\\\": [\\n      \\\"nova-med\\\",\\n      \\\"fulcrumtech\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 21072103238.56555,\\n    \\\"maxMoney\\\": 21129133325,\\n    \\\"hackLevel\\\": 796,\\n    \\\"hackTime\\\": 202187.52878548027,\\n    \\\"minSecurity\\\": 23,\\n    \\\"growth\\\": 73,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 209005.3076163553\\n  },\\n  \\\"fulcrumtech\\\": {\\n    \\\"connections\\\": [\\n      \\\"applied-energetics\\\",\\n      \\\"omnitek\\\",\\n      \\\"4sigma\\\",\\n      \\\"kuai-gong\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1734368856,\\n    \\\"maxMoney\\\": 43359221400,\\n    \\\"hackLevel\\\": 999,\\n    \\\"hackTime\\\": 917099.2311229954,\\n    \\\"minSecurity\\\": 29,\\n    \\\"growth\\\": 95,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 94557.31708968131\\n  },\\n  \\\"omnitek\\\": {\\n    \\\"connections\\\": [\\n      \\\"fulcrumtech\\\",\\n      \\\"b-and-a\\\",\\n      \\\"blade\\\",\\n      \\\"clarkinc\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 21910608767,\\n    \\\"maxMoney\\\": 547765219175,\\n    \\\"hackLevel\\\": 958,\\n    \\\"hackTime\\\": 980402.2705860212,\\n    \\\"minSecurity\\\": 32,\\n    \\\"growth\\\": 99,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 1117429.519716598\\n  },\\n  \\\"b-and-a\\\": {\\n    \\\"connections\\\": [\\n      \\\"omnitek\\\",\\n      \\\"ecorp\\\",\\n      \\\"megacorp\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 23139914561,\\n    \\\"maxMoney\\\": 578497864025,\\n    \\\"hackLevel\\\": 926,\\n    \\\"hackTime\\\": 781997.3010666157,\\n    \\\"minSecurity\\\": 27,\\n    \\\"growth\\\": 69,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 1479539.2854577634\\n  },\\n  \\\"ecorp\\\": {\\n    \\\"connections\\\": [\\n      \\\"b-and-a\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 58662023977,\\n    \\\"maxMoney\\\": 1466550599425,\\n    \\\"hackLevel\\\": 1105,\\n    \\\"hackTime\\\": 1153782.9053634326,\\n    \\\"minSecurity\\\": 33,\\n    \\\"growth\\\": 99,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 2542160.3884190815\\n  },\\n  \\\"megacorp\\\": {\\n    \\\"connections\\\": [\\n      \\\"b-and-a\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 43357592148,\\n    \\\"maxMoney\\\": 1083939803700,\\n    \\\"hackLevel\\\": 1187,\\n    \\\"hackTime\\\": 1239246.746101973,\\n    \\\"minSecurity\\\": 33,\\n    \\\"growth\\\": 99,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 1749352.672677192\\n  },\\n  \\\"blade\\\": {\\n    \\\"connections\\\": [\\n      \\\"omnitek\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 13731401960,\\n    \\\"maxMoney\\\": 343285049000,\\n    \\\"hackLevel\\\": 900,\\n    \\\"hackTime\\\": 921173.4496947883,\\n    \\\"minSecurity\\\": 32,\\n    \\\"growth\\\": 66,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 745321.1968142164\\n  },\\n  \\\"clarkinc\\\": {\\n    \\\"connections\\\": [\\n      \\\"omnitek\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 23188435922,\\n    \\\"maxMoney\\\": 579710898050,\\n    \\\"hackLevel\\\": 984,\\n    \\\"hackTime\\\": 592582.9844162314,\\n    \\\"minSecurity\\\": 19,\\n    \\\"growth\\\": 65,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 1956556.0041218125\\n  },\\n  \\\"4sigma\\\": {\\n    \\\"connections\\\": [\\n      \\\"fulcrumtech\\\",\\n      \\\"nwo\\\",\\n      \\\"powerhouse-fitness\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 18791989299,\\n    \\\"maxMoney\\\": 469799732475,\\n    \\\"hackLevel\\\": 1229,\\n    \\\"hackTime\\\": 920741.8141355029,\\n    \\\"minSecurity\\\": 24,\\n    \\\"growth\\\": 88,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 1020480.9323580061\\n  },\\n  \\\"nwo\\\": {\\n    \\\"connections\\\": [\\n      \\\"4sigma\\\",\\n      \\\"The-Cave\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 27261643910,\\n    \\\"maxMoney\\\": 681541097750,\\n    \\\"hackLevel\\\": 1204,\\n    \\\"hackTime\\\": 1256964.8594258165,\\n    \\\"minSecurity\\\": 33,\\n    \\\"growth\\\": 76,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 1084423.4707744003\\n  },\\n  \\\"The-Cave\\\": {\\n    \\\"connections\\\": [\\n      \\\"nwo\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 925,\\n    \\\"hackTime\\\": 11843.658638932993,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"powerhouse-fitness\\\": {\\n    \\\"connections\\\": [\\n      \\\"4sigma\\\",\\n      \\\"fulcrumassets\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 900000000,\\n    \\\"maxMoney\\\": 22500000000,\\n    \\\"hackLevel\\\": 1078,\\n    \\\"hackTime\\\": 637641.5257270165,\\n    \\\"minSecurity\\\": 19,\\n    \\\"growth\\\": 58,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 70572.56810351643\\n  },\\n  \\\"fulcrumassets\\\": {\\n    \\\"connections\\\": [\\n      \\\"powerhouse-fitness\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1000000,\\n    \\\"maxMoney\\\": 25000000,\\n    \\\"hackLevel\\\": 1357,\\n    \\\"hackTime\\\": 1416427.8793404102,\\n    \\\"minSecurity\\\": 33,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 35.30006767678391\\n  },\\n  \\\"kuai-gong\\\": {\\n    \\\"connections\\\": [\\n      \\\"fulcrumtech\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 23709006038,\\n    \\\"maxMoney\\\": 592725150950,\\n    \\\"hackLevel\\\": 1212,\\n    \\\"hackTime\\\": 1227024.090386594,\\n    \\\"minSecurity\\\": 32,\\n    \\\"growth\\\": 97,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 966118.1970164127\\n  },\\n  \\\"alpha-ent\\\": {\\n    \\\"connections\\\": [\\n      \\\"catalyst\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 14801536866.751307,\\n    \\\"maxMoney\\\": 18576571825,\\n    \\\"hackLevel\\\": 506,\\n    \\\"hackTime\\\": 108027.89490339349,\\n    \\\"minSecurity\\\": 18,\\n    \\\"growth\\\": 51,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 343921.7591273539\\n  },\\n  \\\"millenium-fitness\\\": {\\n    \\\"connections\\\": [\\n      \\\"catalyst\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 4702465188.739711,\\n    \\\"maxMoney\\\": 6250000000,\\n    \\\"hackLevel\\\": 518,\\n    \\\"hackTime\\\": 95848.5711870883,\\n    \\\"minSecurity\\\": 17,\\n    \\\"growth\\\": 31,\\n    \\\"ports\\\": 3,\\n    \\\"score\\\": 130414.04629393022\\n  },\\n  \\\"silver-helix\\\": {\\n    \\\"connections\\\": [\\n      \\\"nectar-net\\\",\\n      \\\"crush-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 742869689.2543241,\\n    \\\"maxMoney\\\": 1125000000,\\n    \\\"hackLevel\\\": 150,\\n    \\\"hackTime\\\": 18067.632849899383,\\n    \\\"minSecurity\\\": 10,\\n    \\\"growth\\\": 30,\\n    \\\"ports\\\": 2,\\n    \\\"score\\\": 186798.12834578357\\n  },\\n  \\\"crush-fitness\\\": {\\n    \\\"connections\\\": [\\n      \\\"silver-helix\\\",\\n      \\\"zb-institute\\\",\\n      \\\"summit-uni\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1310373528.9848716,\\n    \\\"maxMoney\\\": 1334955275,\\n    \\\"hackLevel\\\": 238,\\n    \\\"hackTime\\\": 44825.87921663359,\\n    \\\"minSecurity\\\": 15,\\n    \\\"growth\\\": 29,\\n    \\\"ports\\\": 2,\\n    \\\"score\\\": 59561.81109347373\\n  },\\n  \\\"zb-institute\\\": {\\n    \\\"connections\\\": [\\n      \\\"crush-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 20482553214.055798,\\n    \\\"maxMoney\\\": 21613028125,\\n    \\\"hackLevel\\\": 760,\\n    \\\"hackTime\\\": 180048.87778354454,\\n    \\\"minSecurity\\\": 22,\\n    \\\"growth\\\": 83,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 240079.5649610576\\n  },\\n  \\\"summit-uni\\\": {\\n    \\\"connections\\\": [\\n      \\\"crush-fitness\\\",\\n      \\\"rho-construction\\\",\\n      \\\"aevum-police\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 5790624406.788269,\\n    \\\"maxMoney\\\": 8717699000,\\n    \\\"hackLevel\\\": 432,\\n    \\\"hackTime\\\": 101451.28496818732,\\n    \\\"minSecurity\\\": 20,\\n    \\\"growth\\\": 51,\\n    \\\"ports\\\": 3,\\n    \\\"score\\\": 171859.80449106506\\n  },\\n  \\\"rho-construction\\\": {\\n    \\\"connections\\\": [\\n      \\\"summit-uni\\\",\\n      \\\"global-pharm\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 11934362358.556053,\\n    \\\"maxMoney\\\": 14265567700,\\n    \\\"hackLevel\\\": 506,\\n    \\\"hackTime\\\": 84620.99335131116,\\n    \\\"minSecurity\\\": 14,\\n    \\\"growth\\\": 57,\\n    \\\"ports\\\": 3,\\n    \\\"score\\\": 337163.7967135483\\n  },\\n  \\\"global-pharm\\\": {\\n    \\\"connections\\\": [\\n      \\\"rho-construction\\\",\\n      \\\"omnia\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 33531130264.381355,\\n    \\\"maxMoney\\\": 43003143700,\\n    \\\"hackLevel\\\": 774,\\n    \\\"hackTime\\\": 253892.24705039244,\\n    \\\"minSecurity\\\": 27,\\n    \\\"growth\\\": 82,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 338751.13714255916\\n  },\\n  \\\"omnia\\\": {\\n    \\\"connections\\\": [\\n      \\\"global-pharm\\\",\\n      \\\"univ-energy\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 916582110,\\n    \\\"maxMoney\\\": 22914552750,\\n    \\\"hackLevel\\\": 863,\\n    \\\"hackTime\\\": 819791.7317455219,\\n    \\\"minSecurity\\\": 30,\\n    \\\"growth\\\": 69,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 55903.351699363295\\n  },\\n  \\\"univ-energy\\\": {\\n    \\\"connections\\\": [\\n      \\\"omnia\\\",\\n      \\\"zb-def\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1198340488,\\n    \\\"maxMoney\\\": 29958512200,\\n    \\\"hackLevel\\\": 895,\\n    \\\"hackTime\\\": 755888.6135781235,\\n    \\\"minSecurity\\\": 27,\\n    \\\"growth\\\": 85,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 79267.00220601667\\n  },\\n  \\\"zb-def\\\": {\\n    \\\"connections\\\": [\\n      \\\"univ-energy\\\",\\n      \\\"run4theh111z\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 18089432528.870934,\\n    \\\"maxMoney\\\": 22635613800,\\n    \\\"hackLevel\\\": 779,\\n    \\\"hackTime\\\": 178166.2308616929,\\n    \\\"minSecurity\\\": 19,\\n    \\\"growth\\\": 70,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 254095.44435580054\\n  },\\n  \\\"run4theh111z\\\": {\\n    \\\"connections\\\": [\\n      \\\"zb-def\\\",\\n      \\\"stormtech\\\",\\n      \\\"helios\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 518,\\n    \\\"hackTime\\\": 7558.886135781237,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 0\\n  },\\n  \\\"stormtech\\\": {\\n    \\\"connections\\\": [\\n      \\\"run4theh111z\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1045713518,\\n    \\\"maxMoney\\\": 26142837950,\\n    \\\"hackLevel\\\": 880,\\n    \\\"hackTime\\\": 724726.6317370198,\\n    \\\"minSecurity\\\": 26,\\n    \\\"growth\\\": 83,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 72145.37676735027\\n  },\\n  \\\"helios\\\": {\\n    \\\"connections\\\": [\\n      \\\"run4theh111z\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 702576056,\\n    \\\"maxMoney\\\": 17564401400,\\n    \\\"hackLevel\\\": 845,\\n    \\\"hackTime\\\": 793840.9597055488,\\n    \\\"minSecurity\\\": 30,\\n    \\\"growth\\\": 75,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 44251.688415057295\\n  },\\n  \\\"aevum-police\\\": {\\n    \\\"connections\\\": [\\n      \\\"summit-uni\\\",\\n      \\\"galactic-cyber\\\",\\n      \\\"snap-fitness\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 7026931911.829486,\\n    \\\"maxMoney\\\": 7184307700,\\n    \\\"hackLevel\\\": 443,\\n    \\\"hackTime\\\": 139099.1069446884,\\n    \\\"minSecurity\\\": 26,\\n    \\\"growth\\\": 47,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 103297.68260635606\\n  },\\n  \\\"galactic-cyber\\\": {\\n    \\\"connections\\\": [\\n      \\\"aevum-police\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 752686753,\\n    \\\"maxMoney\\\": 18817168825,\\n    \\\"hackLevel\\\": 853,\\n    \\\"hackTime\\\": 522952.79931587336,\\n    \\\"minSecurity\\\": 19,\\n    \\\"growth\\\": 76,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 71965.07543172773\\n  },\\n  \\\"snap-fitness\\\": {\\n    \\\"connections\\\": [\\n      \\\"aevum-police\\\",\\n      \\\"unitalife\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 11185242349.063612,\\n    \\\"maxMoney\\\": 11250000000,\\n    \\\"hackLevel\\\": 741,\\n    \\\"hackTime\\\": 181310.64327260532,\\n    \\\"minSecurity\\\": 20,\\n    \\\"growth\\\": 46,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 124096.41041409057\\n  },\\n  \\\"unitalife\\\": {\\n    \\\"connections\\\": [\\n      \\\"snap-fitness\\\",\\n      \\\"defcomm\\\",\\n      \\\"solaris\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 1086486454,\\n    \\\"maxMoney\\\": 27162161350,\\n    \\\"hackLevel\\\": 821,\\n    \\\"hackTime\\\": 633061.9777199624,\\n    \\\"minSecurity\\\": 24,\\n    \\\"growth\\\": 70,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 85812.01306016611\\n  },\\n  \\\"defcomm\\\": {\\n    \\\"connections\\\": [\\n      \\\"unitalife\\\",\\n      \\\"infocomm\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 924598692,\\n    \\\"maxMoney\\\": 23114967300,\\n    \\\"hackLevel\\\": 990,\\n    \\\"hackTime\\\": 940123.3035170811,\\n    \\\"minSecurity\\\": 30,\\n    \\\"growth\\\": 48,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 49174.33109789949\\n  },\\n  \\\"infocomm\\\": {\\n    \\\"connections\\\": [\\n      \\\"defcomm\\\",\\n      \\\"titan-labs\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 751735663,\\n    \\\"maxMoney\\\": 18793391575,\\n    \\\"hackLevel\\\": 877,\\n    \\\"hackTime\\\": 685331.9911797866,\\n    \\\"minSecurity\\\": 25,\\n    \\\"growth\\\": 57,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 54844.63535008053\\n  },\\n  \\\"titan-labs\\\": {\\n    \\\"connections\\\": [\\n      \\\"infocomm\\\",\\n      \\\"vitalife\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 867876030,\\n    \\\"maxMoney\\\": 21696900750,\\n    \\\"hackLevel\\\": 835,\\n    \\\"hackTime\\\": 617449.4037097067,\\n    \\\"minSecurity\\\": 23,\\n    \\\"growth\\\": 62,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 70279.12123533535\\n  },\\n  \\\"vitalife\\\": {\\n    \\\"connections\\\": [\\n      \\\"titan-labs\\\",\\n      \\\".\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 779829891,\\n    \\\"maxMoney\\\": 19495747275,\\n    \\\"hackLevel\\\": 897,\\n    \\\"hackTime\\\": 757573.045028994,\\n    \\\"minSecurity\\\": 27,\\n    \\\"growth\\\": 73,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 51468.95709377795\\n  },\\n  \\\".\\\": {\\n    \\\"connections\\\": [\\n      \\\"vitalife\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 526,\\n    \\\"hackTime\\\": 7643.107708324758,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 0\\n  },\\n  \\\"solaris\\\": {\\n    \\\"connections\\\": [\\n      \\\"unitalife\\\"\\n    ],\\n    \\\"root\\\": false,\\n    \\\"currentMoney\\\": 880464797,\\n    \\\"maxMoney\\\": 22011619925,\\n    \\\"hackLevel\\\": 839,\\n    \\\"hackTime\\\": 664560.8458512402,\\n    \\\"minSecurity\\\": 25,\\n    \\\"growth\\\": 80,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 66244.10710445986\\n  },\\n  \\\"phantasy\\\": {\\n    \\\"connections\\\": [\\n      \\\"nectar-net\\\",\\n      \\\"the-hub\\\",\\n      \\\"avmnite-02h\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 600000000,\\n    \\\"maxMoney\\\": 600000000,\\n    \\\"hackLevel\\\": 100,\\n    \\\"hackTime\\\": 9474.926911146396,\\n    \\\"minSecurity\\\": 7,\\n    \\\"growth\\\": 35,\\n    \\\"ports\\\": 2,\\n    \\\"score\\\": 189975.08021750144\\n  },\\n  \\\"the-hub\\\": {\\n    \\\"connections\\\": [\\n      \\\"phantasy\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 4695288424.660667,\\n    \\\"maxMoney\\\": 4735821625,\\n    \\\"hackLevel\\\": 288,\\n    \\\"hackTime\\\": 44765.4502383336,\\n    \\\"minSecurity\\\": 12,\\n    \\\"growth\\\": 50,\\n    \\\"ports\\\": 2,\\n    \\\"score\\\": 211583.78167922975\\n  },\\n  \\\"avmnite-02h\\\": {\\n    \\\"connections\\\": [\\n      \\\"phantasy\\\",\\n      \\\"syscore\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 218,\\n    \\\"hackTime\\\": 4400.577165399103,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 2,\\n    \\\"score\\\": 0\\n  },\\n  \\\"syscore\\\": {\\n    \\\"connections\\\": [\\n      \\\"avmnite-02h\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 11939289496.562025,\\n    \\\"maxMoney\\\": 12003424825,\\n    \\\"hackLevel\\\": 561,\\n    \\\"hackTime\\\": 144948.9689304164,\\n    \\\"minSecurity\\\": 21,\\n    \\\"growth\\\": 69,\\n    \\\"ports\\\": 4,\\n    \\\"score\\\": 165622.76935908824\\n  },\\n  \\\"harakiri-sushi\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 100000000,\\n    \\\"maxMoney\\\": 100000000,\\n    \\\"hackLevel\\\": 40,\\n    \\\"hackTime\\\": 4614.499959659653,\\n    \\\"minSecurity\\\": 5,\\n    \\\"growth\\\": 40,\\n    \\\"ports\\\": 0,\\n    \\\"score\\\": 65012.46128998272\\n  },\\n  \\\"iron-gym\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\",\\n      \\\"zer0\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 483285564.6750419,\\n    \\\"maxMoney\\\": 500000000,\\n    \\\"hackLevel\\\": 100,\\n    \\\"hackTime\\\": 15132.511046757583,\\n    \\\"minSecurity\\\": 10,\\n    \\\"growth\\\": 20,\\n    \\\"ports\\\": 1,\\n    \\\"score\\\": 99124.32876243646\\n  },\\n  \\\"zer0\\\": {\\n    \\\"connections\\\": [\\n      \\\"iron-gym\\\",\\n      \\\"omega-net\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 187348319.23931146,\\n    \\\"maxMoney\\\": 187500000,\\n    \\\"hackLevel\\\": 75,\\n    \\\"hackTime\\\": 9102.772837469698,\\n    \\\"minSecurity\\\": 8,\\n    \\\"growth\\\": 40,\\n    \\\"ports\\\": 1,\\n    \\\"score\\\": 61794.35761426277\\n  },\\n  \\\"omega-net\\\": {\\n    \\\"connections\\\": [\\n      \\\"zer0\\\",\\n      \\\"netlink\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 1558460763.2424927,\\n    \\\"maxMoney\\\": 1576100175,\\n    \\\"hackLevel\\\": 210,\\n    \\\"hackTime\\\": 24213.702106263012,\\n    \\\"minSecurity\\\": 10,\\n    \\\"growth\\\": 35,\\n    \\\"ports\\\": 2,\\n    \\\"score\\\": 195273.75468028898\\n  },\\n  \\\"netlink\\\": {\\n    \\\"connections\\\": [\\n      \\\"omega-net\\\",\\n      \\\"rothman-uni\\\",\\n      \\\"I.I.I.I\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 6856117806.706135,\\n    \\\"maxMoney\\\": 6875000000,\\n    \\\"hackLevel\\\": 389,\\n    \\\"hackTime\\\": 108926.66541479169,\\n    \\\"minSecurity\\\": 23,\\n    \\\"growth\\\": 56,\\n    \\\"ports\\\": 3,\\n    \\\"score\\\": 126231.71697802492\\n  },\\n  \\\"rothman-uni\\\": {\\n    \\\"connections\\\": [\\n      \\\"netlink\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 5734727900,\\n    \\\"maxMoney\\\": 5734727900,\\n    \\\"hackLevel\\\": 391,\\n    \\\"hackTime\\\": 67966.80904262348,\\n    \\\"minSecurity\\\": 16,\\n    \\\"growth\\\": 40,\\n    \\\"ports\\\": 3,\\n    \\\"score\\\": 168750.83532032894\\n  },\\n  \\\"I.I.I.I\\\": {\\n    \\\"connections\\\": [\\n      \\\"netlink\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 354,\\n    \\\"hackTime\\\": 5832.343898639002,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 3,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-0\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-1\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-2\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-3\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-4\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-5\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-6\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-7\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-8\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"darkweb\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-9\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-10\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-11\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-12\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-13\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-14\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-15\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-16\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-17\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-18\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-19\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-20\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  },\\n  \\\"pserv-21\\\": {\\n    \\\"connections\\\": [\\n      \\\"home\\\"\\n    ],\\n    \\\"root\\\": true,\\n    \\\"currentMoney\\\": 0,\\n    \\\"maxMoney\\\": 0,\\n    \\\"hackLevel\\\": 1,\\n    \\\"hackTime\\\": 2116.067010156028,\\n    \\\"minSecurity\\\": 1,\\n    \\\"growth\\\": 1,\\n    \\\"ports\\\": 5,\\n    \\\"score\\\": 0\\n  }\\n}\"}}]]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"ui/overview.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":1.7,\"server\":\"home\",\"scriptKey\":\"ui/overview.js*[]\",\"title\":\"ui/overview.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"tasks/netmap.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":4.55,\"server\":\"home\",\"scriptKey\":\"tasks/netmap.js*[]\",\"title\":\"tasks/netmap.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[],\"dataMap\":{},\"filename\":\"tasks/server-mgr.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":6.95,\"server\":\"home\",\"scriptKey\":\"tasks/server-mgr.js*[]\",\"title\":\"tasks/server-mgr.js \",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[101,\"rho-construction\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1697581.561813342,\"onlineMoneyMade\":596714972342.0281,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[101,\\\"rho-construction\\\"]\",\"title\":\"tasks/deployer-basic.js 101 rho-construction\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[102,\"alpha-ent\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2005357.8232883553,\"onlineMoneyMade\":586620312961.722,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[102,\\\"alpha-ent\\\"]\",\"title\":\"tasks/deployer-basic.js 102 alpha-ent\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[103,\"the-hub\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2714698.3780108257,\"onlineMoneyMade\":449325527640.4189,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[103,\\\"the-hub\\\"]\",\"title\":\"tasks/deployer-basic.js 103 the-hub\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[104,\"omega-net\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3300998.78289149,\"onlineMoneyMade\":195380496918.25195,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[104,\\\"omega-net\\\"]\",\"title\":\"tasks/deployer-basic.js 104 omega-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[105,\"summit-uni\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2424653.4145666356,\"onlineMoneyMade\":299277854907.54877,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[105,\\\"summit-uni\\\"]\",\"title\":\"tasks/deployer-basic.js 105 summit-uni\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[106,\"phantasy\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5248985.5905930875,\"onlineMoneyMade\":190067795127.06668,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[106,\\\"phantasy\\\"]\",\"title\":\"tasks/deployer-basic.js 106 phantasy\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[107,\"rothman-uni\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2516395.975575097,\"onlineMoneyMade\":257271808276.58618,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[107,\\\"rothman-uni\\\"]\",\"title\":\"tasks/deployer-basic.js 107 rothman-uni\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[108,\"silver-helix\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":5143833.764201037,\"onlineMoneyMade\":188741107788.48828,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[108,\\\"silver-helix\\\"]\",\"title\":\"tasks/deployer-basic.js 108 silver-helix\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[109,\"catalyst\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3983159.065671765,\"onlineMoneyMade\":216522175893.35062,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[109,\\\"catalyst\\\"]\",\"title\":\"tasks/deployer-basic.js 109 catalyst\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[110,\"computek\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2964723.021272616,\"onlineMoneyMade\":286302275643.0638,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[110,\\\"computek\\\"]\",\"title\":\"tasks/deployer-basic.js 110 computek\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[111,\"netlink\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2952367.697006091,\"onlineMoneyMade\":249058958345.26535,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[111,\\\"netlink\\\"]\",\"title\":\"tasks/deployer-basic.js 111 netlink\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[112,\"syscore\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1837881.9334293646,\"onlineMoneyMade\":288071608598.6386,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[112,\\\"syscore\\\"]\",\"title\":\"tasks/deployer-basic.js 112 syscore\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[113,\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":2380569.141600244,\"onlineMoneyMade\":174801226359.52393,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[113,\\\"millenium-fitness\\\"]\",\"title\":\"tasks/deployer-basic.js 113 millenium-fitness\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[114,\"max-hardware\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":7220976.432443351,\"onlineMoneyMade\":115519949412.63615,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[114,\\\"max-hardware\\\"]\",\"title\":\"tasks/deployer-basic.js 114 max-hardware\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[115,\"aevum-police\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":3076527.879718368,\"onlineMoneyMade\":180660181381.64594,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[115,\\\"aevum-police\\\"]\",\"title\":\"tasks/deployer-basic.js 115 aevum-police\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[116,\"iron-gym\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":10419961.44379737,\"onlineMoneyMade\":115489469738.48541,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[116,\\\"iron-gym\\\"]\",\"title\":\"tasks/deployer-basic.js 116 iron-gym\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[117,\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":41588550.21525527,\"onlineMoneyMade\":71344926834.41718,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[117,\\\"sigma-cosmetics\\\"]\",\"title\":\"tasks/deployer-basic.js 117 sigma-cosmetics\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[118,\"joesguns\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24360960.28585828,\"onlineMoneyMade\":68861813905.94814,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[118,\\\"joesguns\\\"]\",\"title\":\"tasks/deployer-basic.js 118 joesguns\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[119,\"foodnstuff\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":87686097.60086973,\"onlineMoneyMade\":66790112211.68869,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[119,\\\"foodnstuff\\\"]\",\"title\":\"tasks/deployer-basic.js 119 foodnstuff\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[120,\"zer0\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6274330.906768051,\"onlineMoneyMade\":68048117998.28423,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[120,\\\"zer0\\\"]\",\"title\":\"tasks/deployer-basic.js 120 zer0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[121,\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8473131.471799342,\"onlineMoneyMade\":69750588962.39914,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[121,\\\"harakiri-sushi\\\"]\",\"title\":\"tasks/deployer-basic.js 121 harakiri-sushi\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[122,\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4112153.453784238,\"onlineMoneyMade\":112431206445.01326,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[122,\\\"johnson-ortho\\\"]\",\"title\":\"tasks/deployer-basic.js 122 johnson-ortho\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[123,\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17281904.77642617,\"onlineMoneyMade\":58498733146.599846,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[123,\\\"hong-fang-tea\\\"]\",\"title\":\"tasks/deployer-basic.js 123 hong-fang-tea\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[124,\"crush-fitness\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":4738081.308609849,\"onlineMoneyMade\":100604070806.56494,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[124,\\\"crush-fitness\\\"]\",\"title\":\"tasks/deployer-basic.js 124 crush-fitness\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[125,\"nectar-net\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":17730519.0375666,\"onlineMoneyMade\":56018165764.61353,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[125,\\\"nectar-net\\\"]\",\"title\":\"tasks/deployer-basic.js 125 nectar-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[126,\"neo-net\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12078827.652534587,\"onlineMoneyMade\":58481767121.167725,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[126,\\\"neo-net\\\"]\",\"title\":\"tasks/deployer-basic.js 126 neo-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[127,\"n00dles\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1486054.2148467689,\"onlineMoneyMade\":2880851106.5850935,\"onlineRunningTime\":87093.00999929366,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[127,\\\"n00dles\\\"]\",\"title\":\"tasks/deployer-basic.js 127 n00dles\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[128,\"global-pharm\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":605356.144847794,\"onlineMoneyMade\":44254705103.36408,\"onlineRunningTime\":13495.810000014037,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[128,\\\"global-pharm\\\"]\",\"title\":\"tasks/deployer-basic.js 128 global-pharm\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[129,\"zb-def\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":581125.0065537428,\"onlineMoneyMade\":34554749147.64923,\"onlineRunningTime\":13495.810000014037,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[129,\\\"zb-def\\\"]\",\"title\":\"tasks/deployer-basic.js 129 zb-def\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[130,\"zb-institute\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":458747.92107833753,\"onlineMoneyMade\":33061670982.651566,\"onlineRunningTime\":13495.810000014037,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[130,\\\"zb-institute\\\"]\",\"title\":\"tasks/deployer-basic.js 130 zb-institute\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[131,\"applied-energetics\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":1111695.8021793617,\"onlineMoneyMade\":14990311273.903261,\"onlineRunningTime\":13495.810000014037,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[131,\\\"applied-energetics\\\"]\",\"title\":\"tasks/deployer-basic.js 131 applied-energetics\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[132,\"lexo-corp\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":472994.9109378056,\"onlineMoneyMade\":27193965193.399826,\"onlineRunningTime\":13495.810000014037,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[132,\\\"lexo-corp\\\"]\",\"title\":\"tasks/deployer-basic.js 132 lexo-corp\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[133,\"snap-fitness\"],\"dataMap\":{},\"filename\":\"tasks/deployer-basic.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":471047.2743703939,\"onlineMoneyMade\":19592382149.259552,\"onlineRunningTime\":13495.810000014037,\"ramUsage\":10.05,\"server\":\"home\",\"scriptKey\":\"tasks/deployer-basic.js*[133,\\\"snap-fitness\\\"]\",\"title\":\"tasks/deployer-basic.js 133 snap-fitness\",\"threads\":1,\"temporary\":false}}]}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-734680.cct\",\"type\":\"Encryption I: Caesar Cipher\",\"data\":[\"INBOX DEBUG PASTE POPUP PRINT\",16],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"29.8.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":58662023977,\"moneyMax\":1466550599425,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1105,\"serverGrowth\":99,\"runningScripts\":[]}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-879546.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[10,11],[6,15],[23,31],[19,29],[10,15],[2,10],[9,15],[17,26],[11,16],[23,27]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"48.7.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":43357592148,\"moneyMax\":1083939803700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1187,\"serverGrowth\":99,\"runningScripts\":[]}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"69.5.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":23139914561,\"moneyMax\":578497864025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":926,\"serverGrowth\":69,\"runningScripts\":[]}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"76.7.5.0\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":13731401960,\"moneyMax\":343285049000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":900,\"serverGrowth\":66,\"runningScripts\":[]}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"57.4.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":27261643910,\"moneyMax\":681541097750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1204,\"serverGrowth\":76,\"runningScripts\":[]}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"97.0.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":23188435922,\"moneyMax\":579710898050,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":984,\"serverGrowth\":65,\"runningScripts\":[]}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-701644.cct\",\"type\":\"Compression III: LZ Compression\",\"data\":\"qEV1NnNnNrNnNINnqNrNnNrNnh6XBCnh6h6h6h6h6hhhhhhhhh88hh8hh88hTjhh880L\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"42.8.1.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"b-and-a\",\"blade\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":21910608767,\"moneyMax\":547765219175,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":958,\"serverGrowth\":99,\"runningScripts\":[]}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"88.4.8.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\",\"nwo\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":18791989299,\"moneyMax\":469799732475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1229,\"serverGrowth\":88,\"runningScripts\":[]}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-598398-TheBlackHand.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[7,[147,110,7,165,173]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"90.1.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"fulcrumtech\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":96,\"hackDifficulty\":96,\"minDifficulty\":32,\"moneyAvailable\":23709006038,\"moneyMax\":592725150950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1212,\"serverGrowth\":97,\"runningScripts\":[]}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"76.5.0.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\",\"4sigma\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":87,\"hackDifficulty\":87,\"minDifficulty\":29,\"moneyAvailable\":1734368856,\"moneyMax\":43359221400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":999,\"serverGrowth\":95,\"runningScripts\":[]}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-803045.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[130,127,178,47],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"83.3.9.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1357,\"serverGrowth\":1,\"runningScripts\":[]}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-211620.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[8,[[3,6],[4,6],[0,2],[4,6],[2,7],[5,6],[0,4]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"22.4.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1045713518,\"moneyMax\":26142837950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":880,\"serverGrowth\":83,\"runningScripts\":[]}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-487689.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":776792711,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"73.5.6.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\",\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":924598692,\"moneyMax\":23114967300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":990,\"serverGrowth\":48,\"runningScripts\":[]}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"27.8.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"defcomm\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":74,\"hackDifficulty\":74,\"minDifficulty\":25,\"moneyAvailable\":751735663,\"moneyMax\":18793391575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":877,\"serverGrowth\":57,\"runningScripts\":[]}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"39.8.3.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":702576056,\"moneyMax\":17564401400,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":845,\"serverGrowth\":75,\"runningScripts\":[]}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"5.7.1.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"titan-labs\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":779829891,\"moneyMax\":19495747275,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":897,\"serverGrowth\":73,\"runningScripts\":[]}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-577403.cct\",\"type\":\"Subarray with Maximum Sum\",\"data\":[6,-2,-8,-9,-6,7,-8,-6,-4,-8,-8,-5,0,8,-6,-2,0,-1,-7],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"65.9.0.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":938454369,\"moneyMax\":23461359225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":85,\"runningScripts\":[]}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"74.9.1.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"omnia\",\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":80,\"hackDifficulty\":80,\"minDifficulty\":27,\"moneyAvailable\":1198340488,\"moneyMax\":29958512200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":895,\"serverGrowth\":85,\"runningScripts\":[]}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"10.8.4.1\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"infocomm\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":867876030,\"moneyMax\":21696900750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":835,\"serverGrowth\":62,\"runningScripts\":[]}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"72.6.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":72,\"minDifficulty\":24,\"moneyAvailable\":605421130,\"moneyMax\":15135528250,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":823,\"serverGrowth\":80,\"runningScripts\":[]}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-308268-Sector12.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[22,41,10,22,37,49,43,27,32,15,27,48,41,32],[44,6,35,39,43,9,39,19,18,12,19,5,1,50],[35,33,29,45,50,36,38,49,48,31,25,14,22,1],[37,36,10,36,26,10,2,15,5,34,22,7,48,24],[27,5,25,28,46,16,41,42,45,34,45,9,48,11],[17,8,29,34,44,34,23,36,38,48,12,11,11,50],[23,27,5,30,26,9,44,9,34,14,21,14,9,14],[9,11,19,38,15,34,22,13,33,44,17,46,15,42],[1,24,36,8,2,30,39,32,2,35,25,8,16,41],[19,33,23,35,1,4,49,9,13,47,9,38,5,21],[8,37,22,4,9,35,21,40,13,21,20,41,32,1],[47,46,7,9,38,26,14,13,8,24,31,20,29,25],[36,41,9,38,4,17,44,13,22,15,44,6,18,9]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-76849-TheBlackHand.cct\",\"type\":\"Unique Paths in a Grid II\",\"data\":[[0,0,0,1,1,0,0,0,0,0],[0,0,0,0,0,0,1,0,0,0],[0,0,0,0,0,0,0,0,1,0],[0,0,1,1,1,0,0,0,0,1],[1,1,1,0,0,0,0,0,0,0],[1,0,1,1,1,1,0,1,0,0]],\"reward\":{\"type\":0,\"name\":\"The Black Hand\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"90.1.9.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":77,\"hackDifficulty\":77,\"minDifficulty\":26,\"moneyAvailable\":895359471,\"moneyMax\":22383986775,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":947,\"serverGrowth\":80,\"runningScripts\":[]}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"96.6.7.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":58,\"hackDifficulty\":58,\"minDifficulty\":19,\"moneyAvailable\":752686753,\"moneyMax\":18817168825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":853,\"serverGrowth\":76,\"runningScripts\":[]}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"78.2.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":1161572940,\"moneyMax\":29039323500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":855,\"serverGrowth\":64,\"runningScripts\":[]}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"78.5.8.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"global-pharm\",\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":90,\"hackDifficulty\":90,\"minDifficulty\":30,\"moneyAvailable\":916582110,\"moneyMax\":22914552750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":863,\"serverGrowth\":69,\"runningScripts\":[]}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-def\",\"httpPortOpen\":true,\"ip\":\"26.1.8.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"univ-energy\",\"run4theh111z\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":21.468,\"minDifficulty\":19,\"moneyAvailable\":18089432528.870934,\"moneyMax\":22635613800,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":779,\"serverGrowth\":70,\"runningScripts\":[]}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"applied-energetics\",\"httpPortOpen\":true,\"ip\":\"7.3.5.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nova-med\",\"fulcrumtech\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":68,\"hackDifficulty\":23.876,\"minDifficulty\":23,\"moneyAvailable\":21072103238.56555,\"moneyMax\":21129133325,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":796,\"serverGrowth\":73,\"runningScripts\":[]}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-987522.cct\",\"type\":\"Merge Overlapping Intervals\",\"data\":[[12,19],[15,18],[10,17],[17,20],[25,32],[23,24],[20,28],[3,13],[25,35],[8,15],[24,27],[14,23],[21,24],[25,27],[5,7],[14,16],[22,26],[17,27],[6,16]],\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-462008-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"(())))((a)(a(()\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"76.2.0.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":880464797,\"moneyMax\":22011619925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":839,\"serverGrowth\":80,\"runningScripts\":[]}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-684230.cct\",\"type\":\"Find Largest Prime Factor\",\"data\":864180185,\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"86.9.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aerocorp\",\"icarus\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1598169506,\"moneyMax\":39954237650,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":891,\"serverGrowth\":64,\"runningScripts\":[]}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-958358.cct\",\"type\":\"Total Ways to Sum II\",\"data\":[192,[1,2,3,4,5,7,10,11,20,22]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"global-pharm\",\"httpPortOpen\":true,\"ip\":\"68.5.9.9\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"global-pharm\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"global-pharm\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"global-pharm\"}}]]},\"serversOnNetwork\":[\"rho-construction\",\"omnia\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":30.900000000000006,\"minDifficulty\":27,\"moneyAvailable\":33531130264.381355,\"moneyMax\":43003143700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":774,\"serverGrowth\":82,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":266.8099999999934,\"ramUsage\":1.75,\"server\":\"global-pharm\",\"scriptKey\":\"workers/weaken.js*[\\\"netlink\\\"]\",\"title\":\"workers/weaken.js netlink\",\"threads\":4,\"temporary\":false}}]}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557081.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"HvvMrr33333333333AAMhZZZZZZZZZ66666666Fa1sskyOO333333333\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"47.6.0.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"zeus-med\",\"microdyne\",\"applied-energetics\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":1110835337,\"moneyMax\":27770883425,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":815,\"serverGrowth\":67,\"runningScripts\":[]}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-369553.cct\",\"type\":\"Array Jumping Game II\",\"data\":[1,2,1,2,3,4,2,3,4,4,0,2,1,4,1,6,5,1,0,2,1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"98.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"deltaone\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":1417164268,\"moneyMax\":35429106700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":79,\"runningScripts\":[]}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"83.4.6.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"snap-fitness\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":1086486454,\"moneyMax\":27162161350,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":821,\"serverGrowth\":70,\"runningScripts\":[]}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"lexo-corp\",\"httpPortOpen\":true,\"ip\":\"7.1.9.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"lexo-corp\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"lexo-corp\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"lexo-corp\"}}]]},\"serversOnNetwork\":[\"catalyst\",\"aerocorp\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":72,\"hackDifficulty\":27.197999999999997,\"minDifficulty\":24,\"moneyAvailable\":17543486682.468075,\"moneyMax\":17570530725,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":729,\"serverGrowth\":64,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"lexo-corp\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":14,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"lexo-corp\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":4,\"temporary\":false}}]}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-408956.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[3],[2,3],[4,7,5],[3,7,3,8],[3,5,3,2,8],[4,9,9,1,5,8]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"56.8.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"rho-construction\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"rho-construction\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"rho-construction\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"rho-construction\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"rho-construction\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"rho-construction\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"global-pharm\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":42,\"hackDifficulty\":15.489999999999997,\"minDifficulty\":14,\"moneyAvailable\":11934362358.556053,\"moneyMax\":14265567700,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":506,\"serverGrowth\":57,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":266.8099999999934,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"workers/weaken.js*[\\\"netlink\\\"]\",\"title\":\"workers/weaken.js netlink\",\"threads\":11,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000049,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"workers/weaken.js*[\\\"the-hub\\\"]\",\"title\":\"workers/weaken.js the-hub\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"rho-construction\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":4,\"temporary\":false}}]}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"alpha-ent\",\"httpPortOpen\":true,\"ip\":\"88.9.5.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"alpha-ent\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"alpha-ent\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"alpha-ent\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"alpha-ent\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"alpha-ent\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"alpha-ent\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":53,\"hackDifficulty\":19.884,\"minDifficulty\":18,\"moneyAvailable\":14801536866.751307,\"moneyMax\":18576571825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":506,\"serverGrowth\":51,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":823.8100000000504,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"scriptKey\":\"workers/weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"workers/weaken.js lexo-corp\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.6099999999897,\"ramUsage\":1.75,\"server\":\"alpha-ent\",\"scriptKey\":\"workers/weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"workers/weaken.js alpha-ent\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"alpha-ent\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":5,\"temporary\":false}}]}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"aevum-police\",\"httpPortOpen\":true,\"ip\":\"11.4.4.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"aevum-police\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"aevum-police\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"aevum-police\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"aevum-police\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"aevum-police\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"aevum-police\"}}]]},\"serversOnNetwork\":[\"summit-uni\",\"galactic-cyber\",\"snap-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":29.374,\"minDifficulty\":26,\"moneyAvailable\":7026931911.829486,\"moneyMax\":7184307700,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":443,\"serverGrowth\":47,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":263.2099999999936,\"ramUsage\":1.75,\"server\":\"aevum-police\",\"scriptKey\":\"workers/weaken.js*[\\\"snap-fitness\\\"]\",\"title\":\"workers/weaken.js snap-fitness\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"aevum-police\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":1,\"temporary\":false}}]}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"60.9.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"rothman-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"rothman-uni\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"rothman-uni\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"rothman-uni\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"rothman-uni\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"rothman-uni\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":47,\"hackDifficulty\":16.178,\"minDifficulty\":16,\"moneyAvailable\":4003997343.9465137,\"moneyMax\":5734727900,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":391,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":288.60999999999217,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"workers/grow.js*[\\\"summit-uni\\\"]\",\"title\":\"workers/grow.js summit-uni\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"workers/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"workers/weaken.js harakiri-sushi\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":8.010000000000005,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"workers/weaken.js*[\\\"n00dles\\\"]\",\"title\":\"workers/weaken.js n00dles\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"rothman-uni\",\"scriptKey\":\"workers/grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"workers/grow.js hong-fang-tea\",\"threads\":1,\"temporary\":false}}]}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"zb-institute\",\"httpPortOpen\":true,\"ip\":\"90.5.8.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"zb-institute\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"zb-institute\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"zb-institute\"}}]]},\"serversOnNetwork\":[\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":22.240000000000002,\"minDifficulty\":22,\"moneyAvailable\":20482553214.055798,\"moneyMax\":21613028125,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":760,\"serverGrowth\":83,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.6099999999897,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"scriptKey\":\"workers/weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"workers/weaken.js alpha-ent\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":288.60999999999217,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"scriptKey\":\"workers/grow.js*[\\\"summit-uni\\\"]\",\"title\":\"workers/grow.js summit-uni\",\"threads\":14,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":266.8099999999934,\"ramUsage\":1.75,\"server\":\"zb-institute\",\"scriptKey\":\"workers/weaken.js*[\\\"netlink\\\"]\",\"title\":\"workers/weaken.js netlink\",\"threads\":3,\"temporary\":false}}]}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-422225-Sector12.cct\",\"type\":\"Algorithmic Stock Trader IV\",\"data\":[8,[74,6,186,107,31,149,56,157,122,179,138,145,119,187,101,195,83,54,111,101,8,76,183,2,118,108,3,71,199,12,141,45,188,171,139,195,65,83,109,16]],\"reward\":{\"type\":0,\"name\":\"Sector-12\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-557538.cct\",\"type\":\"Array Jumping Game II\",\"data\":[4,1,3,3,1,3,2,1,3,3,2,2,4,0,2,0,1,2,6,2,1],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"43.9.8.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"summit-uni\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"summit-uni\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"summit-uni\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"summit-uni\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"summit-uni\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"summit-uni\"}}]]},\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"aevum-police\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":21.843999999999994,\"minDifficulty\":20,\"moneyAvailable\":5790624406.788269,\"moneyMax\":8717699000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":432,\"serverGrowth\":51,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.6099999999897,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"workers/weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"workers/weaken.js alpha-ent\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":288.60999999999217,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"workers/grow.js*[\\\"summit-uni\\\"]\",\"title\":\"workers/grow.js summit-uni\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":266.8099999999934,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"workers/weaken.js*[\\\"netlink\\\"]\",\"title\":\"workers/weaken.js netlink\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000049,\"ramUsage\":1.75,\"server\":\"summit-uni\",\"scriptKey\":\"workers/weaken.js*[\\\"the-hub\\\"]\",\"title\":\"workers/weaken.js the-hub\",\"threads\":16,\"temporary\":false}}]}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"syscore\",\"httpPortOpen\":true,\"ip\":\"15.3.5.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":24.18599999999999,\"minDifficulty\":21,\"moneyAvailable\":11939289496.562025,\"moneyMax\":12003424825,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":561,\"serverGrowth\":69,\"runningScripts\":[]}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"97.3.8.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"catalyst\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"catalyst\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"catalyst\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"catalyst\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"catalyst\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"catalyst\"}}]]},\"serversOnNetwork\":[\"johnson-ortho\",\"lexo-corp\",\"alpha-ent\",\"millenium-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":22.206,\"minDifficulty\":22,\"moneyAvailable\":5149369019.502605,\"moneyMax\":8090405475,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":414,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"catalyst\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":2,\"temporary\":false}}]}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"31.5.7.5\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"the-hub\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"the-hub\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"the-hub\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"the-hub\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"the-hub\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"the-hub\"}}]]},\"serversOnNetwork\":[\"phantasy\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":14.069999999999995,\"minDifficulty\":12,\"moneyAvailable\":4695288424.660667,\"moneyMax\":4735821625,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":288,\"serverGrowth\":50,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"the-hub\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":4,\"temporary\":false}}]}},\"computek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"computek\",\"httpPortOpen\":false,\"ip\":\"97.5.2.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":21.752000000000002,\"minDifficulty\":20,\"moneyAvailable\":3877732582.697792,\"moneyMax\":5746652375,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":326,\"serverGrowth\":57,\"runningScripts\":[]}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"9.7.3.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"netlink\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"netlink\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"netlink\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"netlink\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"netlink\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"netlink\"}}]]},\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"I.I.I.I\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":69,\"hackDifficulty\":26.083999999999996,\"minDifficulty\":23,\"moneyAvailable\":6856117806.706135,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":389,\"serverGrowth\":56,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":823.8100000000504,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"workers/weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"workers/weaken.js lexo-corp\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.00999999998453,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"workers/weaken.js*[\\\"syscore\\\"]\",\"title\":\"workers/weaken.js syscore\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"workers/weaken.js*[\\\"zer0\\\"]\",\"title\":\"workers/weaken.js zer0\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":18.20999999999997,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"workers/weaken.js*[\\\"harakiri-sushi\\\"]\",\"title\":\"workers/weaken.js harakiri-sushi\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":25,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"workers/grow.js*[\\\"phantasy\\\"]\",\"title\":\"workers/grow.js phantasy\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"ramUsage\":1.75,\"server\":\"netlink\",\"scriptKey\":\"workers/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"workers/grow.js sigma-cosmetics\",\"threads\":14,\"temporary\":false}}]}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"81.1.3.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"neo-net\",\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":56,\"hackDifficulty\":22.238,\"minDifficulty\":19,\"moneyAvailable\":2028131778.726211,\"moneyMax\":2053627950,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":275,\"serverGrowth\":38,\"runningScripts\":[]}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"19.9.6.4\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"n00dles\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"n00dles\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"n00dles\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"n00dles\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"n00dles\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"n00dles\"}}]]},\"serversOnNetwork\":[\"home\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1.102,\"minDifficulty\":1,\"moneyAvailable\":1750000,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":3000,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"n00dles\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":2,\"temporary\":false}}]}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"24.4.4.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"foodnstuff\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"foodnstuff\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"foodnstuff\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"foodnstuff\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"foodnstuff\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"foodnstuff\"}}]]},\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.192,\"minDifficulty\":3,\"moneyAvailable\":49997516.82193835,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":5,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"foodnstuff\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":9,\"temporary\":false}}]}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"80.4.3.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"sigma-cosmetics\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"sigma-cosmetics\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"sigma-cosmetics\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"sigma-cosmetics\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":3.08,\"minDifficulty\":3,\"moneyAvailable\":38938670.666056134,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":5,\"serverGrowth\":10,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.6099999999897,\"ramUsage\":1.75,\"server\":\"sigma-cosmetics\",\"scriptKey\":\"workers/weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"workers/weaken.js alpha-ent\",\"threads\":5,\"temporary\":false}}]}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-348760.cct\",\"type\":\"Total Ways to Sum\",\"data\":51,\"reward\":{\"type\":3}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-127080-CyberSec.cct\",\"type\":\"Sanitize Parentheses in Expression\",\"data\":\"((a))(((a(())a))((aa\",\"reward\":{\"type\":0,\"name\":\"CyberSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"81.3.2.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"joesguns\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"joesguns\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"joesguns\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"joesguns\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"joesguns\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"joesguns\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.558,\"minDifficulty\":5,\"moneyAvailable\":62500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":10,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"joesguns\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":9,\"temporary\":false}}]}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"6.8.6.5\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"zer0\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"zer0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"zer0\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"zer0\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"zer0\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"zer0\"}}]]},\"serversOnNetwork\":[\"iron-gym\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.861999999999998,\"minDifficulty\":8,\"moneyAvailable\":187348319.23931146,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":75,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"ramUsage\":1.75,\"server\":\"zer0\",\"scriptKey\":\"workers/grow.js*[\\\"phantasy\\\"]\",\"title\":\"workers/grow.js phantasy\",\"threads\":17,\"temporary\":false}}]}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"99.5.5.7\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"nectar-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"nectar-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"nectar-net\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"nectar-net\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"nectar-net\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"nectar-net\"}}]]},\"serversOnNetwork\":[\"hong-fang-tea\",\"neo-net\",\"silver-helix\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":8.277999999999999,\"minDifficulty\":7,\"moneyAvailable\":68750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":20,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":823.8100000000504,\"ramUsage\":1.75,\"server\":\"nectar-net\",\"scriptKey\":\"workers/weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"workers/weaken.js lexo-corp\",\"threads\":9,\"temporary\":false}}]}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-112611-NiteSec.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[14,7],\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"10.6.0.1\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"neo-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"neo-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"neo-net\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"neo-net\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"neo-net\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"neo-net\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"computek\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":8.09,\"minDifficulty\":8,\"moneyAvailable\":85305657.11228144,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":50,\"serverGrowth\":25,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":823.8100000000504,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"workers/weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"workers/weaken.js lexo-corp\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.6099999999897,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"workers/weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"workers/weaken.js alpha-ent\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"neo-net\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":7,\"temporary\":false}}]}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-659510.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"55gk3D634izW5929WY3URwK2K04e6aT325A3by1279aUrWrIALK04fOXe71\",\"reward\":{\"type\":1}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-985452.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[16,30,38,35,12,13,39,10,42,7,7],[32,12,43,21,32,9,41,11,7,36,27],[18,31,13,21,6,46,25,47,27,12,18],[47,33,31,8,30,25,18,21,8,13,5],[2,32,31,3,21,15,22,28,3,47,8],[11,35,25,36,6,31,31,28,49,6,21],[10,13,27,48,33,45,6,44,9,41,33],[14,40,22,18,42,10,40,39,47,46,8],[35,19,29,17,34,42,44,8,47,36,39],[6,21,47,13,17,50,20,27,10,38,23],[37,37,15,13,43,46,14,37,17,44,18],[5,48,16,28,35,46,19,32,22,44,16],[39,30,6,10,24,48,29,4,46,42,21],[50,36,7,44,39,32,9,28,50,33,46],[44,2,28,43,44,10,11,30,3,10,45]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"34.2.4.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"silver-helix\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"silver-helix\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"silver-helix\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"silver-helix\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"silver-helix\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"silver-helix\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"crush-fitness\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":10.108,\"minDifficulty\":10,\"moneyAvailable\":742869689.2543241,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":150,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":588.809999999997,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"workers/weaken.js*[\\\"zb-def\\\"]\",\"title\":\"workers/weaken.js zb-def\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.6099999999897,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"workers/weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"workers/weaken.js alpha-ent\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":266.8099999999934,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"workers/weaken.js*[\\\"netlink\\\"]\",\"title\":\"workers/weaken.js netlink\",\"threads\":16,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"silver-helix\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"silver-helix\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":9,\"temporary\":false}}]}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"76.9.7.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"hong-fang-tea\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"hong-fang-tea\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"hong-fang-tea\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"hong-fang-tea\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"hong-fang-tea\"}}]]},\"serversOnNetwork\":[\"home\",\"nectar-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.086,\"minDifficulty\":5,\"moneyAvailable\":48157937.72715045,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":30,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.6099999999897,\"ramUsage\":1.75,\"server\":\"hong-fang-tea\",\"scriptKey\":\"workers/weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"workers/weaken.js alpha-ent\",\"threads\":8,\"temporary\":false}}]}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"8.1.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"harakiri-sushi\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"harakiri-sushi\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"harakiri-sushi\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"harakiri-sushi\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"harakiri-sushi\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":5.958,\"minDifficulty\":5,\"moneyAvailable\":100000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":1,\"requiredHackingSkill\":40,\"serverGrowth\":40,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"ramUsage\":1.75,\"server\":\"harakiri-sushi\",\"scriptKey\":\"workers/grow.js*[\\\"phantasy\\\"]\",\"title\":\"workers/grow.js phantasy\",\"threads\":9,\"temporary\":false}}]}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"76.2.8.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"phantasy\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"phantasy\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"phantasy\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"phantasy\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"phantasy\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"phantasy\"}}]]},\"serversOnNetwork\":[\"nectar-net\",\"the-hub\",\"avmnite-02h\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":7.095999999999998,\"minDifficulty\":7,\"moneyAvailable\":413050537.71455276,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":100,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"phantasy\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":13,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000049,\"ramUsage\":1.75,\"server\":\"phantasy\",\"scriptKey\":\"workers/weaken.js*[\\\"the-hub\\\"]\",\"title\":\"workers/weaken.js the-hub\",\"threads\":5,\"temporary\":false}}]}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-565833.cct\",\"type\":\"Array Jumping Game\",\"data\":[4,2,8,5,0,0,8,5,7,5,10,0,3,0,9,3,1,4,6,0,7,3,9,8,0],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"97.7.9.8\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"max-hardware\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"max-hardware\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"max-hardware\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"max-hardware\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"max-hardware\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"max-hardware\"}}]]},\"serversOnNetwork\":[\"n00dles\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":6.0779999999999985,\"minDifficulty\":5,\"moneyAvailable\":250000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":80,\"serverGrowth\":30,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"max-hardware\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":13,\"temporary\":false}}]}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"25.4.1.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"omega-net\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"omega-net\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"omega-net\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"omega-net\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"omega-net\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"omega-net\"}}]]},\"serversOnNetwork\":[\"zer0\",\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":29,\"hackDifficulty\":10,\"minDifficulty\":10,\"moneyAvailable\":1558460763.2424927,\"moneyMax\":1576100175,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":210,\"serverGrowth\":35,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.00999999998453,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"workers/weaken.js*[\\\"syscore\\\"]\",\"title\":\"workers/weaken.js syscore\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"workers/weaken.js*[\\\"zer0\\\"]\",\"title\":\"workers/weaken.js zer0\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"workers/weaken.js*[\\\"max-hardware\\\"]\",\"title\":\"workers/weaken.js max-hardware\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"ramUsage\":1.75,\"server\":\"omega-net\",\"scriptKey\":\"workers/grow.js*[\\\"phantasy\\\"]\",\"title\":\"workers/grow.js phantasy\",\"threads\":5,\"temporary\":false}}]}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-815973.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9LrPMhASrs810893e6z791s979es4se2c6s712CA\",\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"81.6.5.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"silver-helix\",\"zb-institute\",\"summit-uni\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":44,\"hackDifficulty\":17.049999999999997,\"minDifficulty\":15,\"moneyAvailable\":1310373528.9848716,\"moneyMax\":1334955275,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":238,\"serverGrowth\":29,\"runningScripts\":[]}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"35.7.6.9\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"iron-gym\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"iron-gym\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"iron-gym\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"iron-gym\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"iron-gym\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"iron-gym\"}}]]},\"serversOnNetwork\":[\"home\",\"zer0\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":12.373999999999999,\"minDifficulty\":10,\"moneyAvailable\":483285564.6750419,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"iron-gym\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"ramUsage\":1.75,\"server\":\"iron-gym\",\"scriptKey\":\"workers/grow.js*[\\\"phantasy\\\"]\",\"title\":\"workers/grow.js phantasy\",\"threads\":14,\"temporary\":false}}]}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":true,\"ip\":\"38.8.9.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"millenium-fitness\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"millenium-fitness\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"millenium-fitness\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"millenium-fitness\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"millenium-fitness\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"millenium-fitness\"}}]]},\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":17.19,\"minDifficulty\":17,\"moneyAvailable\":4702465188.739711,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":5,\"requiredHackingSkill\":518,\"serverGrowth\":31,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"alpha-ent\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":331.6099999999897,\"ramUsage\":1.75,\"server\":\"millenium-fitness\",\"scriptKey\":\"workers/weaken.js*[\\\"alpha-ent\\\"]\",\"title\":\"workers/weaken.js alpha-ent\",\"threads\":1,\"temporary\":false}}]}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-71000.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[3,28,11,22,16,41,46,36,23,3,49,28,49],[5,7,31,33,26,30,1,6,37,34,2,7,42],[17,40,46,47,31,40,33,41,32,14,9,24,8],[48,32,43,34,38,36,32,38,6,18,48,33,42]],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"42.8.7.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"4sigma\",\"fulcrumassets\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1078,\"serverGrowth\":58,\"runningScripts\":[]}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-823996.cct\",\"type\":\"Proper 2-Coloring of a Graph\",\"data\":[11,[[8,10],[2,6],[3,10],[8,9],[3,5],[4,6],[2,4],[0,9],[4,7],[2,9],[2,5],[0,10],[1,5]]],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"snap-fitness\",\"httpPortOpen\":true,\"ip\":\"64.6.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":59,\"hackDifficulty\":22.971999999999998,\"minDifficulty\":20,\"moneyAvailable\":11185242349.063612,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":741,\"serverGrowth\":46,\"runningScripts\":[]}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"run4theh111z\",\"httpPortOpen\":true,\"ip\":\"94.9.8.8\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"run4theh111z\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"run4theh111z\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"run4theh111z\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"run4theh111z\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"run4theh111z\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"run4theh111z\"}}]]},\"serversOnNetwork\":[\"zb-def\",\"stormtech\",\"helios\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":518,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":588.809999999997,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"workers/weaken.js*[\\\"zb-def\\\"]\",\"title\":\"workers/weaken.js zb-def\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"netlink\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":266.8099999999934,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"workers/weaken.js*[\\\"netlink\\\"]\",\"title\":\"workers/weaken.js netlink\",\"threads\":13,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":263.2099999999936,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"workers/weaken.js*[\\\"snap-fitness\\\"]\",\"title\":\"workers/weaken.js snap-fitness\",\"threads\":24,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"run4theh111z\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000049,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"workers/weaken.js*[\\\"the-hub\\\"]\",\"title\":\"workers/weaken.js the-hub\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"run4theh111z\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":14,\"temporary\":false}}]}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"51.7.2.0\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"I.I.I.I\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"I.I.I.I\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"I.I.I.I\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"I.I.I.I\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"I.I.I.I\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"I.I.I.I\"}}]]},\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":3,\"requiredHackingSkill\":354,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":823.8100000000504,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"workers/weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"workers/weaken.js lexo-corp\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":588.809999999997,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"workers/weaken.js*[\\\"zb-def\\\"]\",\"title\":\"workers/weaken.js zb-def\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":288.60999999999217,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"workers/grow.js*[\\\"summit-uni\\\"]\",\"title\":\"workers/grow.js summit-uni\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"I.I.I.I\",\"scriptKey\":\"workers/grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"workers/grow.js hong-fang-tea\",\"threads\":21,\"temporary\":false}}]}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"14.1.9.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"avmnite-02h\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"avmnite-02h\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"avmnite-02h\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"avmnite-02h\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"avmnite-02h\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"avmnite-02h\"}}]]},\"serversOnNetwork\":[\"phantasy\",\"syscore\"],\"smtpPortOpen\":true,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":3,\"requiredHackingSkill\":218,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":588.809999999997,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"workers/weaken.js*[\\\"zb-def\\\"]\",\"title\":\"workers/weaken.js zb-def\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":288.60999999999217,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"workers/grow.js*[\\\"summit-uni\\\"]\",\"title\":\"workers/grow.js summit-uni\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"avmnite-02h\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":21,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"the-hub\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":72.21000000000049,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"workers/weaken.js*[\\\"the-hub\\\"]\",\"title\":\"workers/weaken.js the-hub\",\"threads\":16,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zer0\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":27.409999999999936,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"workers/weaken.js*[\\\"zer0\\\"]\",\"title\":\"workers/weaken.js zer0\",\"threads\":13,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"workers/weaken.js*[\\\"max-hardware\\\"]\",\"title\":\"workers/weaken.js max-hardware\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"ramUsage\":1.75,\"server\":\"avmnite-02h\",\"scriptKey\":\"workers/grow.js*[\\\"phantasy\\\"]\",\"title\":\"workers/grow.js phantasy\",\"threads\":1,\"temporary\":false}}]}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\".\",\"httpPortOpen\":true,\"ip\":\"28.2.0.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\".\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\".\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\".\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\".\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\".\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\".\"}}]]},\"serversOnNetwork\":[\"vitalife\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":5,\"requiredHackingSkill\":526,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\".\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":9,\"temporary\":false}}]}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-947496-BitRunners.cct\",\"type\":\"Compression II: LZ Decompression\",\"data\":\"9YCEpxzbPu07dFZDMnT155PJ7L8922tn481g217LS2XJOz685li2sS595OOOOU729jj2wUOOO744\",\"reward\":{\"type\":0,\"name\":\"BitRunners\"}}},{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-805455-NiteSec.cct\",\"type\":\"Compression I: RLE Compression\",\"data\":\"888888888888JjvvvvvvvJyyyyyyPPTppWxxLLNNNNjjjjjjjjjjjjBBBBBBarrvvnWWvvvYGGOffqqIIIIfp6\",\"reward\":{\"type\":0,\"name\":\"NiteSec\"}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"73.8.4.3\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"CSEC\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"CSEC\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"CSEC\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"CSEC\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"CSEC\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"CSEC\"}}]]},\"serversOnNetwork\":[\"foodnstuff\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":60,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"CSEC\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":4,\"temporary\":false}}]}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-59081.cct\",\"type\":\"Algorithmic Stock Trader I\",\"data\":[10,75,51,158,152,124,102,170,33,64,183,195],\"reward\":{\"type\":3}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"80.9.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":1,\"runningScripts\":[]}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"98.3.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":1,\"runningScripts\":[]}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-236938.cct\",\"type\":\"Find All Valid Math Expressions\",\"data\":[\"22136664\",-99],\"reward\":{\"type\":1}}}],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"darkweb\",\"httpPortOpen\":true,\"ip\":\"7.8.8.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"darkweb\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":true,\"sqlPortOpen\":true,\"sshPortOpen\":true,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":5,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-0\",\"httpPortOpen\":false,\"ip\":\"11.3.3.3\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-0\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-0\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-0\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-0\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-0\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-0\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-def\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":588.809999999997,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/weaken.js*[\\\"zb-def\\\"]\",\"title\":\"workers/weaken.js zb-def\",\"threads\":23,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.00999999998453,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/weaken.js*[\\\"syscore\\\"]\",\"title\":\"workers/weaken.js syscore\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-0\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"max-hardware\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":9.809999999999999,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/weaken.js*[\\\"max-hardware\\\"]\",\"title\":\"workers/weaken.js max-hardware\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"workers/grow.js hong-fang-tea\",\"threads\":14,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"workers/weaken.js nectar-net\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/grow.js*[\\\"neo-net\\\"]\",\"title\":\"workers/grow.js neo-net\",\"threads\":11,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"ramUsage\":1.75,\"server\":\"pserv-0\",\"scriptKey\":\"workers/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"workers/grow.js sigma-cosmetics\",\"threads\":25,\"temporary\":false}}]}},\"pserv-1\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-1\",\"httpPortOpen\":false,\"ip\":\"14.7.2.8\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-1\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-1\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-1\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-1\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-1\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-1\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":29,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.00999999998453,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"scriptKey\":\"workers/weaken.js*[\\\"syscore\\\"]\",\"title\":\"workers/weaken.js syscore\",\"threads\":51,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":314.8099999999907,\"ramUsage\":1.75,\"server\":\"pserv-1\",\"scriptKey\":\"workers/grow.js*[\\\"catalyst\\\"]\",\"title\":\"workers/grow.js catalyst\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-1\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":63,\"temporary\":false}}]}},\"pserv-2\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-2\",\"httpPortOpen\":false,\"ip\":\"29.0.6.7\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-2\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-2\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-2\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-2\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-2\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-2\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"global-pharm\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":562.609999999991,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"scriptKey\":\"workers/weaken.js*[\\\"global-pharm\\\"]\",\"title\":\"workers/weaken.js global-pharm\",\"threads\":13,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"syscore\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":423.00999999998453,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"scriptKey\":\"workers/weaken.js*[\\\"syscore\\\"]\",\"title\":\"workers/weaken.js syscore\",\"threads\":2,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":314.8099999999907,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"scriptKey\":\"workers/grow.js*[\\\"catalyst\\\"]\",\"title\":\"workers/grow.js catalyst\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":288.60999999999217,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"scriptKey\":\"workers/grow.js*[\\\"summit-uni\\\"]\",\"title\":\"workers/grow.js summit-uni\",\"threads\":215,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-2\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":39,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"ramUsage\":1.75,\"server\":\"pserv-2\",\"scriptKey\":\"workers/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"workers/weaken.js nectar-net\",\"threads\":20,\"temporary\":false}}]}},\"pserv-3\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-3\",\"httpPortOpen\":false,\"ip\":\"96.6.0.1\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-3\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-3\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-3\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-3\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-3\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-3\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"lexo-corp\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":823.8100000000504,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"scriptKey\":\"workers/weaken.js*[\\\"lexo-corp\\\"]\",\"title\":\"workers/weaken.js lexo-corp\",\"threads\":36,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"summit-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":288.60999999999217,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"scriptKey\":\"workers/grow.js*[\\\"summit-uni\\\"]\",\"title\":\"workers/grow.js summit-uni\",\"threads\":156,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-3\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":88,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":3.8100000000000014,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"scriptKey\":\"workers/weaken.js*[\\\"nectar-net\\\"]\",\"title\":\"workers/weaken.js nectar-net\",\"threads\":4,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"pserv-3\",\"scriptKey\":\"workers/grow.js*[\\\"neo-net\\\"]\",\"title\":\"workers/grow.js neo-net\",\"threads\":1,\"temporary\":false}}]}},\"pserv-4\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-4\",\"httpPortOpen\":false,\"ip\":\"85.1.4.9\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-4\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-4\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-4\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-4\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-4\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-4\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":263.2099999999936,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"scriptKey\":\"workers/weaken.js*[\\\"snap-fitness\\\"]\",\"title\":\"workers/weaken.js snap-fitness\",\"threads\":16,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.80999999999668,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"scriptKey\":\"workers/grow.js*[\\\"computek\\\"]\",\"title\":\"workers/grow.js computek\",\"threads\":165,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-4\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":46,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-4\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":11,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":38,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"scriptKey\":\"workers/grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"workers/grow.js hong-fang-tea\",\"threads\":10,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"pserv-4\",\"scriptKey\":\"workers/grow.js*[\\\"neo-net\\\"]\",\"title\":\"workers/grow.js neo-net\",\"threads\":8,\"temporary\":false}}]}},\"pserv-5\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-5\",\"httpPortOpen\":false,\"ip\":\"18.0.6.2\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-5\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-5\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-5\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-5\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-5\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-5\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"snap-fitness\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":263.2099999999936,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"scriptKey\":\"workers/weaken.js*[\\\"snap-fitness\\\"]\",\"title\":\"workers/weaken.js snap-fitness\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.80999999999668,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"scriptKey\":\"workers/grow.js*[\\\"computek\\\"]\",\"title\":\"workers/grow.js computek\",\"threads\":179,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-5\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":76,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":20,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"scriptKey\":\"workers/grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"workers/grow.js hong-fang-tea\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"pserv-5\",\"scriptKey\":\"workers/grow.js*[\\\"neo-net\\\"]\",\"title\":\"workers/grow.js neo-net\",\"threads\":9,\"temporary\":false}}]}},\"pserv-6\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-6\",\"httpPortOpen\":false,\"ip\":\"62.3.0.3\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-6\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-6\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-6\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-6\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-6\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-6\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"computek\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":208.80999999999668,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"scriptKey\":\"workers/grow.js*[\\\"computek\\\"]\",\"title\":\"workers/grow.js computek\",\"threads\":5,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":63,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-6\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":42,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":3,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.40999999999998,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"scriptKey\":\"workers/weaken.js*[\\\"crush-fitness\\\"]\",\"title\":\"workers/weaken.js crush-fitness\",\"threads\":7,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.609999999999943,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"scriptKey\":\"workers/grow.js*[\\\"silver-helix\\\"]\",\"title\":\"workers/grow.js silver-helix\",\"threads\":134,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":19,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"scriptKey\":\"workers/weaken.js*[\\\"foodnstuff\\\"]\",\"title\":\"workers/weaken.js foodnstuff\",\"threads\":12,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"pserv-6\",\"scriptKey\":\"workers/grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"workers/grow.js hong-fang-tea\",\"threads\":10,\"temporary\":false}}]}},\"pserv-7\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-7\",\"httpPortOpen\":false,\"ip\":\"47.5.6.0\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-7\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-7\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-7\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-7\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-7\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-7\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":98,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":50,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"crush-fitness\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":36.40999999999998,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"scriptKey\":\"workers/weaken.js*[\\\"crush-fitness\\\"]\",\"title\":\"workers/weaken.js crush-fitness\",\"threads\":34,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.609999999999943,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"scriptKey\":\"workers/grow.js*[\\\"silver-helix\\\"]\",\"title\":\"workers/grow.js silver-helix\",\"threads\":40,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"ramUsage\":1.7,\"server\":\"pserv-7\",\"scriptKey\":\"workers/hack.js*[\\\"omega-net\\\"]\",\"title\":\"workers/hack.js omega-net\",\"threads\":9,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":8,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"pserv-7\",\"scriptKey\":\"workers/grow.js*[\\\"neo-net\\\"]\",\"title\":\"workers/grow.js neo-net\",\"threads\":58,\"temporary\":false}}]}},\"pserv-8\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-8\",\"httpPortOpen\":false,\"ip\":\"89.0.9.5\",\"isConnectedTo\":false,\"maxRam\":512,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-8\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-8\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-8\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-8\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-8\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-8\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":87,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-8\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":14,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"aevum-police\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":58.410000000000295,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"scriptKey\":\"workers/weaken.js*[\\\"aevum-police\\\"]\",\"title\":\"workers/weaken.js aevum-police\",\"threads\":17,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"silver-helix\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":25.609999999999943,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"scriptKey\":\"workers/grow.js*[\\\"silver-helix\\\"]\",\"title\":\"workers/grow.js silver-helix\",\"threads\":151,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"scriptKey\":\"workers/weaken.js*[\\\"foodnstuff\\\"]\",\"title\":\"workers/weaken.js foodnstuff\",\"threads\":6,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"pserv-8\",\"scriptKey\":\"workers/grow.js*[\\\"neo-net\\\"]\",\"title\":\"workers/grow.js neo-net\",\"threads\":20,\"temporary\":false}}]}},\"pserv-9\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-9\",\"httpPortOpen\":false,\"ip\":\"60.9.0.5\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-9\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-9\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-9\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-9\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-9\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-9\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":239,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"ramUsage\":1.7,\"server\":\"pserv-9\",\"scriptKey\":\"workers/hack.js*[\\\"omega-net\\\"]\",\"title\":\"workers/hack.js omega-net\",\"threads\":1,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":29,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":7.210000000000004,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"scriptKey\":\"workers/weaken.js*[\\\"foodnstuff\\\"]\",\"title\":\"workers/weaken.js foodnstuff\",\"threads\":106,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.610000000000004,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"scriptKey\":\"workers/weaken.js*[\\\"joesguns\\\"]\",\"title\":\"workers/weaken.js joesguns\",\"threads\":32,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"phantasy\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":6.010000000000003,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"scriptKey\":\"workers/grow.js*[\\\"phantasy\\\"]\",\"title\":\"workers/grow.js phantasy\",\"threads\":165,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"pserv-9\",\"scriptKey\":\"workers/grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"workers/grow.js hong-fang-tea\",\"threads\":20,\"temporary\":false}}]}},\"pserv-10\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-10\",\"httpPortOpen\":false,\"ip\":\"17.3.2.9\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-10\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-10\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-10\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-10\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-10\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-10\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"johnson-ortho\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":238.00999999999502,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"scriptKey\":\"workers/weaken.js*[\\\"johnson-ortho\\\"]\",\"title\":\"workers/weaken.js johnson-ortho\",\"threads\":65,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"zb-institute\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":118.61000000000115,\"ramUsage\":1.7,\"server\":\"pserv-10\",\"scriptKey\":\"workers/hack.js*[\\\"zb-institute\\\"]\",\"title\":\"workers/hack.js zb-institute\",\"threads\":15,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-10\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":42,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"omega-net\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":20.20999999999996,\"ramUsage\":1.7,\"server\":\"pserv-10\",\"scriptKey\":\"workers/hack.js*[\\\"omega-net\\\"]\",\"title\":\"workers/hack.js omega-net\",\"threads\":49,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":4.410000000000002,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"scriptKey\":\"workers/grow.js*[\\\"hong-fang-tea\\\"]\",\"title\":\"workers/grow.js hong-fang-tea\",\"threads\":359,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"pserv-10\",\"scriptKey\":\"workers/grow.js*[\\\"neo-net\\\"]\",\"title\":\"workers/grow.js neo-net\",\"threads\":58,\"temporary\":false}}]}},\"pserv-11\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-11\",\"httpPortOpen\":false,\"ip\":\"5.8.1.7\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-11\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-11\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-11\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-11\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-11\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-11\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-11\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":244,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rho-construction\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":44.410000000000096,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"scriptKey\":\"workers/weaken.js*[\\\"rho-construction\\\"]\",\"title\":\"workers/weaken.js rho-construction\",\"threads\":30,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":66,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"neo-net\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":2.41,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"scriptKey\":\"workers/grow.js*[\\\"neo-net\\\"]\",\"title\":\"workers/grow.js neo-net\",\"threads\":140,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"ramUsage\":1.75,\"server\":\"pserv-11\",\"scriptKey\":\"workers/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"workers/grow.js sigma-cosmetics\",\"threads\":112,\"temporary\":false}}]}},\"pserv-12\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-12\",\"httpPortOpen\":false,\"ip\":\"78.1.8.0\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-12\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-12\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-12\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-12\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-12\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-12\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-12\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":469,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"ramUsage\":1.75,\"server\":\"pserv-12\",\"scriptKey\":\"workers/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"workers/grow.js sigma-cosmetics\",\"threads\":129,\"temporary\":false}}]}},\"pserv-13\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-13\",\"httpPortOpen\":false,\"ip\":\"21.5.2.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-13\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-13\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-13\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-13\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-13\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-13\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-13\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":425,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"rothman-uni\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":10.009999999999998,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"scriptKey\":\"workers/grow.js*[\\\"rothman-uni\\\"]\",\"title\":\"workers/grow.js rothman-uni\",\"threads\":39,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"ramUsage\":1.75,\"server\":\"pserv-13\",\"scriptKey\":\"workers/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"workers/grow.js sigma-cosmetics\",\"threads\":133,\"temporary\":false}}]}},\"pserv-14\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-14\",\"httpPortOpen\":false,\"ip\":\"38.4.8.8\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-14\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-14\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-14\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-14\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-14\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-14\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":314.8099999999907,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"scriptKey\":\"workers/grow.js*[\\\"catalyst\\\"]\",\"title\":\"workers/grow.js catalyst\",\"threads\":252,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-14\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":306,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"ramUsage\":1.75,\"server\":\"pserv-14\",\"scriptKey\":\"workers/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"workers/grow.js sigma-cosmetics\",\"threads\":35,\"temporary\":false}}]}},\"pserv-15\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-15\",\"httpPortOpen\":false,\"ip\":\"49.9.7.4\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-15\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-15\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-15\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-15\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-15\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-15\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":314.8099999999907,\"ramUsage\":1.75,\"server\":\"pserv-15\",\"scriptKey\":\"workers/grow.js*[\\\"catalyst\\\"]\",\"title\":\"workers/grow.js catalyst\",\"threads\":585,\"temporary\":false}}]}},\"pserv-16\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-16\",\"httpPortOpen\":false,\"ip\":\"61.6.5.1\",\"isConnectedTo\":false,\"maxRam\":1024,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-16\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-16\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-16\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-16\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-16\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-16\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"catalyst\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":314.8099999999907,\"ramUsage\":1.75,\"server\":\"pserv-16\",\"scriptKey\":\"workers/grow.js*[\\\"catalyst\\\"]\",\"title\":\"workers/grow.js catalyst\",\"threads\":86,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-16\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":513,\"temporary\":false}}]}},\"pserv-17\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-17\",\"httpPortOpen\":false,\"ip\":\"37.9.2.3\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-17\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-17\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-17\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-17\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-17\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-17\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-17\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":1132,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"ramUsage\":1.75,\"server\":\"pserv-17\",\"scriptKey\":\"workers/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"workers/grow.js sigma-cosmetics\",\"threads\":70,\"temporary\":false}}]}},\"pserv-18\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-18\",\"httpPortOpen\":false,\"ip\":\"44.7.8.4\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-18\"}}],[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-18\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-18\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-18\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-18\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-18\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"applied-energetics\"],\"dataMap\":{},\"filename\":\"workers/hack.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":97.01000000000084,\"ramUsage\":1.7,\"server\":\"pserv-18\",\"scriptKey\":\"workers/hack.js*[\\\"applied-energetics\\\"]\",\"title\":\"workers/hack.js applied-energetics\",\"threads\":469,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"workers/weaken.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":40.41000000000004,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"scriptKey\":\"workers/weaken.js*[\\\"iron-gym\\\"]\",\"title\":\"workers/weaken.js iron-gym\",\"threads\":48,\"temporary\":false}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":1.21,\"ramUsage\":1.75,\"server\":\"pserv-18\",\"scriptKey\":\"workers/grow.js*[\\\"sigma-cosmetics\\\"]\",\"title\":\"workers/grow.js sigma-cosmetics\",\"threads\":259,\"temporary\":false}}]}},\"pserv-19\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-19\",\"httpPortOpen\":false,\"ip\":\"36.9.7.7\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-19\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-19\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-19\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-19\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-19\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-19\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"millenium-fitness\"],\"dataMap\":{},\"filename\":\"workers/grow.js\",\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":81.41000000000062,\"ramUsage\":1.75,\"server\":\"pserv-19\",\"scriptKey\":\"workers/grow.js*[\\\"millenium-fitness\\\"]\",\"title\":\"workers/grow.js millenium-fitness\",\"threads\":367,\"temporary\":false}}]}},\"pserv-20\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-20\",\"httpPortOpen\":false,\"ip\":\"66.8.2.8\",\"isConnectedTo\":false,\"maxRam\":2048,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-20\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-20\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-20\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-20\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-20\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-20\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}},\"pserv-21\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"pserv-21\",\"httpPortOpen\":false,\"ip\":\"94.2.2.8\",\"isConnectedTo\":false,\"maxRam\":32768,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"scripts\":{\"ctor\":\"JSONMap\",\"data\":[[\"grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"grow.js\",\"server\":\"pserv-21\"}}],[\"hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"hack.js\",\"server\":\"pserv-21\"}}],[\"weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"weaken.js\",\"server\":\"pserv-21\"}}],[\"workers/grow.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.grow(target);\\n  }\\n}\",\"filename\":\"workers/grow.js\",\"server\":\"pserv-21\"}}],[\"workers/hack.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.hack(target);\\n  }\\n}\",\"filename\":\"workers/hack.js\",\"server\":\"pserv-21\"}}],[\"workers/weaken.js\",{\"ctor\":\"Script\",\"data\":{\"code\":\"/** @param {NS} ns **/\\n\\nexport async function main(ns) {\\n  const target = ns.args[0];\\n\\n  if (target && typeof target === 'string') {\\n    await ns.weaken(target);\\n  }\\n}\",\"filename\":\"workers/weaken.js\",\"server\":\"pserv-21\"}}]]},\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":{\"ctor\":\"JSONMap\",\"data\":[]},\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1,\"runningScripts\":[]}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.9042,\"playerReputation\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"favor\":0.0449,\"playerReputation\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"favor\":0,\"playerReputation\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":1,\"isBanned\":false,\"isMember\":true,\"playerReputation\":380671.57318480016}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":93.8518,\"isBanned\":false,\"isMember\":true,\"playerReputation\":129955.49773819077}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":42.7768,\"isBanned\":false,\"isMember\":true,\"playerReputation\":38667.60734563695}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":67.4241,\"isBanned\":false,\"isMember\":true,\"playerReputation\":60244.918248015994}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":true,\"isMember\":false,\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":59.4372,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":true,\"favor\":56.1372,\"isBanned\":false,\"isMember\":true,\"playerReputation\":47859.12315535028}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}},\"Shadows of Anarchy\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"favor\":0,\"isBanned\":false,\"isMember\":false,\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{\"sa\":\"scan-analyze\",\"go\":\"run startup.js\",\"netmap\":\"run netmap.js\"}","StockMarketSave":"{\"ECorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"ECorp\",\"symbol\":\"ECP\",\"price\":7876.153476362606,\"lastPrice\":7889.022503750014,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.4,\"b\":false,\"otlkMag\":18.948713049287097,\"otlkMagForecast\":30.33525917021545,\"cap\":83451560,\"spreadPerc\":0.5,\"shareTxForMovement\":71992,\"shareTxUntilMovement\":71992,\"totalShares\":131800000,\"maxShares\":26400000}},\"MegaCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"MegaCorp\",\"symbol\":\"MGCP\",\"price\":18294.066179451096,\"lastPrice\":18260.50039883226,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.45,\"b\":true,\"otlkMag\":17.783691073239254,\"otlkMagForecast\":68.00262299324828,\"cap\":713876654,\"spreadPerc\":0.4,\"shareTxForMovement\":61279,\"shareTxUntilMovement\":61279,\"totalShares\":76500000,\"maxShares\":15300000}},\"Blade Industries\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Blade Industries\",\"symbol\":\"BLD\",\"price\":55680.89685413642,\"lastPrice\":55501.792697200195,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.79,\"b\":true,\"otlkMag\":7.826214956423011,\"otlkMagForecast\":58.07232563102544,\"cap\":172564138,\"spreadPerc\":0.5,\"shareTxForMovement\":79378,\"shareTxUntilMovement\":79378,\"totalShares\":81800000,\"maxShares\":16400000}},\"Clarke Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Clarke Incorporated\",\"symbol\":\"CLRK\",\"price\":41396.959214726754,\"lastPrice\":41280.60911733563,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.69,\"b\":true,\"otlkMag\":11.598495526628302,\"otlkMagForecast\":61.5981611678107,\"cap\":59411477,\"spreadPerc\":0.4,\"shareTxForMovement\":45892,\"shareTxUntilMovement\":45892,\"totalShares\":71900000,\"maxShares\":14400000}},\"OmniTek Incorporated\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"OmniTek Incorporated\",\"symbol\":\"OMTK\",\"price\":93717.12834712591,\"lastPrice\":93962.1308438371,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":12.43772663536377,\"otlkMagForecast\":62.72832314754052,\"cap\":344995773,\"spreadPerc\":0.4,\"shareTxForMovement\":76695,\"shareTxUntilMovement\":76695,\"totalShares\":47400000,\"maxShares\":9500000}},\"Four Sigma\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Four Sigma\",\"symbol\":\"FSIG\",\"price\":13924.12276987754,\"lastPrice\":13866.912668449515,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.01,\"b\":true,\"otlkMag\":18.930881670532603,\"otlkMagForecast\":68.14785459833713,\"cap\":273898112,\"spreadPerc\":0.9,\"shareTxForMovement\":76755,\"shareTxUntilMovement\":76755,\"totalShares\":36800000,\"maxShares\":7400000}},\"KuaiGong International\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"KuaiGong International\",\"symbol\":\"KGI\",\"price\":17218.00301524725,\"lastPrice\":17271.455504555244,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.76,\"b\":true,\"otlkMag\":1.6883800870750758,\"otlkMagForecast\":43.71105568427406,\"cap\":375305212,\"spreadPerc\":0.1,\"shareTxForMovement\":51065,\"shareTxUntilMovement\":51065,\"totalShares\":112900000,\"maxShares\":22600000}},\"Fulcrum Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Fulcrum Technologies\",\"symbol\":\"FLCM\",\"price\":1833.5138141856844,\"lastPrice\":1842.5761702166194,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.21,\"b\":true,\"otlkMag\":26.105247072663353,\"otlkMagForecast\":76.01068307466892,\"cap\":292387021,\"spreadPerc\":0.7,\"shareTxForMovement\":71991,\"shareTxUntilMovement\":71991,\"totalShares\":57400000,\"maxShares\":11500000}},\"Storm Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Storm Technologies\",\"symbol\":\"STM\",\"price\":25463.82907606848,\"lastPrice\":25553.281832000168,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.86,\"b\":false,\"otlkMag\":7.598777319840018,\"otlkMagForecast\":42.538646199021485,\"cap\":194274733,\"spreadPerc\":0.5,\"shareTxForMovement\":105402,\"shareTxUntilMovement\":105402,\"totalShares\":59500000,\"maxShares\":11900000}},\"DefComm\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"DefComm\",\"symbol\":\"DCOMM\",\"price\":14925.206399071509,\"lastPrice\":14965.44434889137,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":false,\"otlkMag\":15.403145194794094,\"otlkMagForecast\":34.31406015266271,\"cap\":181761706,\"spreadPerc\":0.6,\"shareTxForMovement\":89399,\"shareTxUntilMovement\":89399,\"totalShares\":54700000,\"maxShares\":10900000}},\"Helios Labs\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Helios Labs\",\"symbol\":\"HLS\",\"price\":8960.732382657523,\"lastPrice\":8981.596015251194,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.57,\"b\":false,\"otlkMag\":11.641284533435137,\"otlkMagForecast\":37.94218004322326,\"cap\":86412007,\"spreadPerc\":0.7,\"shareTxForMovement\":77012,\"shareTxUntilMovement\":77012,\"totalShares\":78000000,\"maxShares\":15600000}},\"VitaLife\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"VitaLife\",\"symbol\":\"VITA\",\"price\":4379.176188024535,\"lastPrice\":4391.697851336128,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.7,\"b\":false,\"otlkMag\":6.584715734426664,\"otlkMagForecast\":42.87519858338298,\"cap\":15411717,\"spreadPerc\":0.7,\"shareTxForMovement\":82748,\"shareTxUntilMovement\":82748,\"totalShares\":71600000,\"maxShares\":14300000}},\"Icarus Microsystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Icarus Microsystems\",\"symbol\":\"ICRS\",\"price\":5932.305891324684,\"lastPrice\":5947.814579867142,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":false,\"otlkMag\":5.534183462728752,\"otlkMagForecast\":42.0955211351695,\"cap\":244999779,\"spreadPerc\":0.8,\"shareTxForMovement\":104954,\"shareTxUntilMovement\":104954,\"totalShares\":42700000,\"maxShares\":8500000}},\"Universal Energy\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Universal Energy\",\"symbol\":\"UNV\",\"price\":26477.214324613313,\"lastPrice\":26534.536112010363,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.53,\"b\":false,\"otlkMag\":11.162969501731896,\"otlkMagForecast\":40.282898550161306,\"cap\":208135581,\"spreadPerc\":0.4,\"shareTxForMovement\":37242,\"shareTxUntilMovement\":37242,\"totalShares\":31100000,\"maxShares\":6200000}},\"AeroCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"AeroCorp\",\"symbol\":\"AERO\",\"price\":11512.962250495733,\"lastPrice\":11541.649471498806,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.61,\"b\":true,\"otlkMag\":6.12481639731231,\"otlkMagForecast\":57.02917388566949,\"cap\":213473015,\"spreadPerc\":0.8,\"shareTxForMovement\":60666,\"shareTxUntilMovement\":60666,\"totalShares\":60500000,\"maxShares\":12100000}},\"Omnia Cybersystems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omnia Cybersystems\",\"symbol\":\"OMN\",\"price\":7769.928301261608,\"lastPrice\":7790.875816272826,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.66,\"b\":true,\"otlkMag\":7.661990337518674,\"otlkMagForecast\":57.63679086086472,\"cap\":85623248,\"spreadPerc\":0.4,\"shareTxForMovement\":123269,\"shareTxUntilMovement\":123269,\"totalShares\":53400000,\"maxShares\":10700000}},\"Solaris Space Systems\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Solaris Space Systems\",\"symbol\":\"SLRS\",\"price\":11853.606349019206,\"lastPrice\":11817.883754255201,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.74,\"b\":true,\"otlkMag\":5.421321490445442,\"otlkMagForecast\":56.12533283936418,\"cap\":200834014,\"spreadPerc\":0.7,\"shareTxForMovement\":92582,\"shareTxUntilMovement\":92582,\"totalShares\":48400000,\"maxShares\":9700000}},\"Global Pharmaceuticals\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"symbol\":\"GPH\",\"price\":18467.52188965733,\"lastPrice\":18426.124947286877,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.55,\"b\":false,\"otlkMag\":11.821321800976111,\"otlkMagForecast\":39.67968667843789,\"cap\":492137965,\"spreadPerc\":0.9,\"shareTxForMovement\":97665,\"shareTxUntilMovement\":97665,\"totalShares\":23700000,\"maxShares\":4700000}},\"Nova Medical\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Nova Medical\",\"symbol\":\"NVMD\",\"price\":7386.177766412778,\"lastPrice\":7408.80610053143,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.75,\"b\":true,\"otlkMag\":5.088403345224697,\"otlkMagForecast\":54.01954141156786,\"cap\":135126782,\"spreadPerc\":0.8,\"shareTxForMovement\":93062,\"shareTxUntilMovement\":93062,\"totalShares\":35400000,\"maxShares\":7100000}},\"Watchdog Security\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Watchdog Security\",\"symbol\":\"WDS\",\"price\":26.148558260939645,\"lastPrice\":26.41772404528987,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.52,\"b\":false,\"otlkMag\":12.097648871520306,\"otlkMagForecast\":37.36725841522264,\"cap\":62142231,\"spreadPerc\":1.1,\"shareTxForMovement\":33308,\"shareTxUntilMovement\":33308,\"totalShares\":54700000,\"maxShares\":10900000}},\"LexoCorp\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"LexoCorp\",\"symbol\":\"LXO\",\"price\":545.4576801532562,\"lastPrice\":548.4433200322735,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.34,\"b\":true,\"otlkMag\":1.3636197628984303,\"otlkMagForecast\":49.986899016223795,\"cap\":35890110,\"spreadPerc\":1.1,\"shareTxForMovement\":66308,\"shareTxUntilMovement\":66308,\"totalShares\":54900000,\"maxShares\":11000000}},\"Rho Construction\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Rho Construction\",\"symbol\":\"RHOC\",\"price\":1185.7445952284581,\"lastPrice\":1182.6528136385366,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":5.345880245498233,\"otlkMagForecast\":55.590240855647195,\"cap\":5209773,\"spreadPerc\":0.3,\"shareTxForMovement\":71548,\"shareTxUntilMovement\":71548,\"totalShares\":79600000,\"maxShares\":15900000}},\"Alpha Enterprises\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Alpha Enterprises\",\"symbol\":\"APHE\",\"price\":64384.57122165198,\"lastPrice\":64852.70865920285,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.78,\"b\":true,\"otlkMag\":12.72798920593207,\"otlkMagForecast\":64.13712466225486,\"cap\":71595655,\"spreadPerc\":1.6,\"shareTxForMovement\":70794,\"shareTxUntilMovement\":70794,\"totalShares\":35200000,\"maxShares\":7000000}},\"SysCore Securities\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"SysCore Securities\",\"symbol\":\"SYSC\",\"price\":51.100219989010974,\"lastPrice\":50.764292982439976,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.62,\"b\":false,\"otlkMag\":22.43431506308782,\"otlkMagForecast\":31.27784907194519,\"cap\":51035083,\"spreadPerc\":0.5,\"shareTxForMovement\":60486,\"shareTxUntilMovement\":60486,\"totalShares\":33800000,\"maxShares\":6800000}},\"CompuTek\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"CompuTek\",\"symbol\":\"CTK\",\"price\":5364.594297546047,\"lastPrice\":5382.563230965959,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.82,\"b\":false,\"otlkMag\":10.097895957452067,\"otlkMagForecast\":41.38837899435723,\"cap\":23695880,\"spreadPerc\":0.5,\"shareTxForMovement\":80398,\"shareTxUntilMovement\":80398,\"totalShares\":83300000,\"maxShares\":16700000}},\"NetLink Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"NetLink Technologies\",\"symbol\":\"NTLK\",\"price\":514.8140308618375,\"lastPrice\":521.4171872982066,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":3.14,\"b\":false,\"otlkMag\":5.043890901853313,\"otlkMagForecast\":46.363962299223964,\"cap\":38849103,\"spreadPerc\":0.8,\"shareTxForMovement\":28702,\"shareTxUntilMovement\":28702,\"totalShares\":34800000,\"maxShares\":7000000}},\"Omega Software\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Omega Software\",\"symbol\":\"OMGA\",\"price\":2320.26767549957,\"lastPrice\":2310.2644714434755,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.06,\"b\":false,\"otlkMag\":5.275290113078829,\"otlkMagForecast\":43.99694824167137,\"cap\":49766077,\"spreadPerc\":1.3,\"shareTxForMovement\":43393,\"shareTxUntilMovement\":43393,\"totalShares\":23700000,\"maxShares\":4700000}},\"FoodNStuff\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"FoodNStuff\",\"symbol\":\"FNS\",\"price\":2959.3394043075104,\"lastPrice\":2950.060574217005,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.77,\"b\":false,\"otlkMag\":5.337777454806418,\"otlkMagForecast\":45.947225083384374,\"cap\":66436022,\"spreadPerc\":0.8,\"shareTxForMovement\":115149,\"shareTxUntilMovement\":115149,\"totalShares\":15300000,\"maxShares\":3100000}},\"Sigma Cosmetics\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Sigma Cosmetics\",\"symbol\":\"SGC\",\"price\":1084.5783679615367,\"lastPrice\":1079.2002117049385,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.22,\"b\":true,\"otlkMag\":5.220424654218581,\"otlkMagForecast\":53.44437322859437,\"cap\":19288439,\"spreadPerc\":0.8,\"shareTxForMovement\":54685,\"shareTxUntilMovement\":54685,\"totalShares\":10900000,\"maxShares\":2200000}},\"Joe's Guns\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Joe's Guns\",\"symbol\":\"JGN\",\"price\":35.53800471380591,\"lastPrice\":35.11486423503014,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":2.95,\"b\":false,\"otlkMag\":11.52991719791939,\"otlkMagForecast\":40.94448985743915,\"cap\":14525261,\"spreadPerc\":0.7,\"shareTxForMovement\":48409,\"shareTxUntilMovement\":48409,\"totalShares\":59500000,\"maxShares\":11900000}},\"Catalyst Ventures\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Catalyst Ventures\",\"symbol\":\"CTYS\",\"price\":761.2885180172705,\"lastPrice\":765.3311498878692,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":1.3,\"b\":true,\"otlkMag\":22.83945045314703,\"otlkMagForecast\":75.11374976060485,\"cap\":10756764,\"spreadPerc\":1.3,\"shareTxForMovement\":48690,\"shareTxUntilMovement\":48690,\"totalShares\":70200000,\"maxShares\":14000000}},\"Microdyne Technologies\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Microdyne Technologies\",\"symbol\":\"MDYN\",\"price\":5556.926586942279,\"lastPrice\":5540.405600180583,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.73,\"b\":true,\"otlkMag\":7.006096323065194,\"otlkMagForecast\":58.011218089384535,\"cap\":424166627,\"spreadPerc\":0.6,\"shareTxForMovement\":106059,\"shareTxUntilMovement\":106059,\"totalShares\":14700000,\"maxShares\":2900000}},\"Titan Laboratories\":{\"ctor\":\"Stock\",\"data\":{\"name\":\"Titan Laboratories\",\"symbol\":\"TITN\",\"price\":12543.880916066173,\"lastPrice\":12511.173248463447,\"playerShares\":0,\"playerAvgPx\":0,\"playerShortShares\":0,\"playerAvgShortPx\":0,\"mv\":0.64,\"b\":true,\"otlkMag\":18.275402104053967,\"otlkMagForecast\":66.07990569934168,\"cap\":353038124,\"spreadPerc\":0.9,\"shareTxForMovement\":126972,\"shareTxUntilMovement\":126972,\"totalShares\":22800000,\"maxShares\":4600000}},\"Orders\":{\"ECP\":[],\"MGCP\":[],\"BLD\":[],\"CLRK\":[],\"OMTK\":[],\"FSIG\":[],\"KGI\":[],\"FLCM\":[],\"STM\":[],\"DCOMM\":[],\"HLS\":[],\"VITA\":[],\"ICRS\":[],\"UNV\":[],\"AERO\":[],\"OMN\":[],\"SLRS\":[],\"GPH\":[],\"NVMD\":[],\"WDS\":[],\"LXO\":[],\"RHOC\":[],\"APHE\":[],\"SYSC\":[],\"CTK\":[],\"NTLK\":[],\"OMGA\":[],\"FNS\":[],\"SGC\":[],\"JGN\":[],\"CTYS\":[],\"MDYN\":[],\"TITN\":[]},\"storedCycles\":16,\"lastUpdate\":1700782871218,\"ticksUntilCycle\":25}","SettingsSave":"{\"ActiveScriptsServerPageSize\":100,\"ActiveScriptsScriptPageSize\":100,\"AutoexecScript\":\"\",\"AutosaveInterval\":60,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"DisableOverviewProgressBars\":false,\"EnableBashHotkeys\":false,\"EnableHistorySearch\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxRecentScriptsCapacity\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":500,\"RemoteFileApiPort\":0,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":true,\"SuppressAutosaveDisabledWarnings\":false,\"UseIEC60027_2\":false,\"ShowMiddleNullTimeUnit\":false,\"ExcludeRunningScriptsFromSave\":false,\"IsSidebarOpened\":true,\"theme\":{\"primarylight\":\"#DDDFC5\",\"primary\":\"#CDCFB6\",\"primarydark\":\"#9D9F8C\",\"successlight\":\"#00EF00\",\"success\":\"#00A500\",\"successdark\":\"#007A00\",\"errorlight\":\"#F92672\",\"error\":\"#CA1C5C\",\"errordark\":\"#90274A\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#D3D300\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#00010A\",\"white\":\"#fff\",\"black\":\"#020509\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#8CCF27\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#080C11\",\"backgroundsecondary\":\"#03080F\",\"button\":\"#00010A\"},\"styles\":{\"lineHeight\":1.5,\"fontFamily\":\"Lucida Console, Lucida Sans Unicode, Fira Mono, Consolas, Courier New, Courier, monospace, Times New Roman\"},\"overview\":{\"x\":0,\"y\":0,\"opened\":true},\"EditorTheme\":{\"common\":{\"accent\":\"B5CEA8\",\"bg\":\"1E1E1E\",\"fg\":\"D4D4D4\"},\"syntax\":{\"tag\":\"569CD6\",\"entity\":\"569CD6\",\"string\":\"CE9178\",\"regexp\":\"646695\",\"markup\":\"569CD6\",\"keyword\":\"569CD6\",\"comment\":\"6A9955\",\"constant\":\"569CD6\",\"error\":\"F44747\"},\"ui\":{\"line\":\"1E1E1E\",\"panel\":{\"bg\":\"252526\",\"selected\":\"252526\",\"border\":\"1E1E1E\"},\"selection\":{\"bg\":\"ADD6FF26\"}},\"base\":\"vs-dark\",\"inherit\":true},\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":2,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":true,\"MonacoTabSize\":2,\"MonacoDetectIndentation\":false,\"MonacoFontFamily\":\"Lucida Console\",\"MonacoFontSize\":20,\"MonacoFontLigatures\":false,\"MonacoVim\":false,\"MonacoWordWrap\":\"off\",\"MonacoCursorStyle\":\"line\",\"MonacoCursorBlinking\":\"blink\",\"hideTrailingDecimalZeros\":false,\"hideThousandsSeparator\":false,\"useEngineeringNotation\":true,\"disableSuffixes\":false}","VersionSave":"35","AllGangsSave":"","LastExportBonus":"1700782874440","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"fragments\":[],\"isBonusCharging\":false,\"storedCycles\":0}}"}}